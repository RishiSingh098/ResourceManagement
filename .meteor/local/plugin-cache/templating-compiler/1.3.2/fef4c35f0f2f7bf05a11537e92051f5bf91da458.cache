{"head":"<title>resource_management</title>\n\n  <style>\n        body {\n          font-family: 'Open Sans', sans-serif;\n          font-size: 11px;\n          font-weight: 300;\n          fill: #242424;\n          text-align: center;\n          text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, -1px 0 0 #fff, 0 -1px 0 #fff;\n          cursor: default;\n        }\n\n        .legend {\n          font-family: 'Raleway', sans-serif;\n          fill: #333333;\n        }\n\n        .tooltip {\n          fill: #333333;\n        }\n  </style>\n  <title>Smoothed D3.js Radar Chart</title>\n  <!-- Google fonts-->\n  <link href='http://fonts.googleapis.com/css?family=Open+Sans:400,300' rel='stylesheet' type='text/css'>\n  <link href='https://fonts.googleapis.com/css?family=Raleway' rel='stylesheet' type='text/css'>\n  <!-- D3.js\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.6/d3.min.js\" charset=\"utf-8\"></script>-->","body":"","js":"\nTemplate.body.addContent((function() {\n  var view = this;\n  return HTML.DIV({\n    class: \"container\"\n  }, HTML.Raw('\\n    <div class=\"col-12\">\\n      <h1 class=\"text-center\">Welcome to Resource Management</h1>\\n    </div>\\n    '), HTML.DIV({\n    class: \"container\"\n  }, \"\\n        \", HTML.DIV({\n    id: \"top-left\"\n  }, \"\\n          \", Spacebars.include(view.lookupTemplate(\"resource_filter\")), \"\\n        \"), \"\\n\\n        \", HTML.DIV({\n    id: \"top-middle\",\n    style: \"overflow-y:auto;\"\n  }, \"\\n          \", Spacebars.include(view.lookupTemplate(\"resource_list\")), \"\\n        \"), \"\\n\\n        \", HTML.DIV({\n    id: \"top-right\"\n  }, \"\\n          \", Spacebars.include(view.lookupTemplate(\"resource_display\")), \"\\n        \"), \"\\n    \"), \"\\n    \", HTML.DIV(\"\\n      \", HTML.DIV({\n    class: \"container\"\n  }, \"\\n        \", Spacebars.include(view.lookupTemplate(\"resource_visualization\")), \"\\n      \"), \"\\n    \"), \"\\n  \");\n}));\nMeteor.startup(Template.body.renderToDocument);\n\nTemplate.__checkName(\"resource_filter\");\nTemplate[\"resource_filter\"] = new Template(\"Template.resource_filter\", (function() {\n  var view = this;\n  return HTML.DIV({\n    class: \"container-fluid\"\n  }, \"\\n    \", HTML.FORM({\n    class: \"employee_filter\"\n  }, \"\\n      \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"getSkills\"));\n  }, function() {\n    return [ \"\\n        \", HTML.LABEL(HTML.INPUT({\n      type: \"checkbox\",\n      class: \"skill_filter\",\n      name: \"skill_box\",\n      value: function() {\n        return Spacebars.mustache(view.lookup(\"skill\"));\n      }\n    }), Blaze.View(\"lookup:skill\", function() {\n      return Spacebars.mustache(view.lookup(\"skill\"));\n    })), \"\\n      \" ];\n  }), \"\\n      \", HTML.Raw('<input type=\"submit\" value=\"Submit\">'), \"\\n    \"), \"\\n  \");\n}));\n\nTemplate.__checkName(\"resource_display\");\nTemplate[\"resource_display\"] = new Template(\"Template.resource_display\", (function() {\n  var view = this;\n  return [ HTML.H3(\"Name: \", Blaze.View(\"lookup:display_employee_details.name\", function() {\n    return Spacebars.mustache(Spacebars.dot(view.lookup(\"display_employee_details\"), \"name\"));\n  })), \"\\n  \", HTML.P(\"Location: \", Blaze.View(\"lookup:display_employee_details.location\", function() {\n    return Spacebars.mustache(Spacebars.dot(view.lookup(\"display_employee_details\"), \"location\"));\n  })), \"\\n  \", HTML.P(\"Role: \", Blaze.View(\"lookup:display_employee_details.role\", function() {\n    return Spacebars.mustache(Spacebars.dot(view.lookup(\"display_employee_details\"), \"role\"));\n  })), \"\\n  \", Spacebars.include(view.lookupTemplate(\"radarChart\")) ];\n}));\n\nTemplate.__checkName(\"resource_visualization\");\nTemplate[\"resource_visualization\"] = new Template(\"Template.resource_visualization\", (function() {\n  var view = this;\n  return \"\";\n}));\n\nTemplate.__checkName(\"resource_list\");\nTemplate[\"resource_list\"] = new Template(\"Template.resource_list\", (function() {\n  var view = this;\n  return HTML.TABLE({\n    class: \"hoverTable\"\n  }, \"\\n      \", HTML.THEAD(\"\\n        \", HTML.TH(\"\\n          Name:\\n        \"), \"\\n        \", HTML.TH(\"\\n          Team:\\n        \"), \"\\n        \", HTML.TH(\"\\n          Role:\\n        \"), \"\\n        \", HTML.TH(\"\\n          Office:\\n        \"), \"\\n        \", HTML.TH(\"\\n          Location:\\n        \"), \"\\n      \"), \"\\n      \", HTML.TBODY(\"\\n        \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"getEmployees\"));\n  }, function() {\n    return [ \"\\n          \", Spacebars.include(view.lookupTemplate(\"employee_row\")), \"\\n        \" ];\n  }), \"\\n      \"), \"\\n  \");\n}));\n\nTemplate.__checkName(\"employee_row\");\nTemplate[\"employee_row\"] = new Template(\"Template.employee_row\", (function() {\n  var view = this;\n  return HTML.TR({\n    class: \"employee_row\"\n  }, \"\\n      \", HTML.TD(\"\\n        \", Blaze.View(\"lookup:name\", function() {\n    return Spacebars.mustache(view.lookup(\"name\"));\n  }), \"\\n      \"), \"\\n      \", HTML.TD(\"\\n        \", Blaze.View(\"lookup:team\", function() {\n    return Spacebars.mustache(view.lookup(\"team\"));\n  }), \"\\n      \"), \"\\n      \", HTML.TD(\"\\n        \", Blaze.View(\"lookup:role\", function() {\n    return Spacebars.mustache(view.lookup(\"role\"));\n  }), \"\\n      \"), \"\\n      \", HTML.TD(\"\\n        \", Blaze.View(\"lookup:office\", function() {\n    return Spacebars.mustache(view.lookup(\"office\"));\n  }), \"\\n      \"), \"\\n      \", HTML.TD(\"\\n       \", Blaze.View(\"lookup:location\", function() {\n    return Spacebars.mustache(view.lookup(\"location\"));\n  }), \"\\n      \"), \"\\n    \");\n}));\n\nTemplate.__checkName(\"radarChart\");\nTemplate[\"radarChart\"] = new Template(\"Template.radarChart\", (function() {\n  var view = this;\n  return [ HTML.Raw('<div class=\"radarChart\"></div>\\n  '), HTML.SCRIPT('\\n    function RadarChart(id, data, options) {\\n      var cfg = {\\n       w: 600,\\t\\t\\t\\t//Width of the circle\\n       h: 600,\\t\\t\\t\\t//Height of the circle\\n       margin: {top: 20, right: 20, bottom: 20, left: 20}, //The margins of the SVG\\n       levels: 3,\\t\\t\\t\\t//How many levels or inner circles should there be drawn\\n       maxValue: 0, \\t\\t\\t//What is the value that the biggest circle will represent\\n       labelFactor: 1.25, \\t//How much farther than the radius of the outer circle should the labels be placed\\n       wrapWidth: 60, \\t\\t//The number of pixels after which a label needs to be given a new line\\n       opacityArea: 0.35, \\t//The opacity of the area of the blob\\n       dotRadius: 4, \\t\\t\\t//The size of the colored circles of each blog\\n       opacityCircles: 0.1, \\t//The opacity of the circles of each blob\\n       strokeWidth: 2, \\t\\t//The width of the stroke around each blob\\n       roundStrokes: false,\\t//If true the area and stroke will follow a round path (cardinal-closed)\\n       color: d3.scale.category10()\\n      };\\n\\n      //Put all of the options into a variable called cfg\\n      if(\\'undefined\\' !== typeof options){\\n        for(var i in options){\\n        if(\\'undefined\\' !== typeof options[i]){ cfg[i] = options[i]; }\\n        }//for i\\n      }//if\\n\\n      //If the supplied maxValue is smaller than the actual one, replace by the max in the data\\n      var maxValue = Math.max(cfg.maxValue, d3.max(data, function(i){return d3.max(i.map(function(o){return o.value;}))}));\\n\\n      var allAxis = (data[0].map(function(i, j){return i.axis})),\\t//Names of each axis\\n        total = allAxis.length,\\t\\t\\t\\t\\t//The number of different axes\\n        radius = Math.min(cfg.w/2, cfg.h/2), \\t//Radius of the outermost circle\\n        Format = d3.format(\\'%\\'),\\t\\t\\t \\t//Percentage formatting\\n        angleSlice = Math.PI * 2 / total;\\t\\t//The width in radians of each \"slice\"\\n\\n      //Scale for the radius\\n      var rScale = d3.scale.linear()\\n        .range([0, radius])\\n        .domain([0, maxValue]);\\n\\n      /////////////////////////////////////////////////////////\\n      //////////// Create the container SVG and g /////////////\\n      /////////////////////////////////////////////////////////\\n\\n      //Remove whatever chart with the same id/class was present before\\n      d3.select(id).select(\"svg\").remove();\\n\\n      //Initiate the radar chart SVG\\n      var svg = d3.select(id).append(\"svg\")\\n          .attr(\"width\",  cfg.w + cfg.margin.left + cfg.margin.right)\\n          .attr(\"height\", cfg.h + cfg.margin.top + cfg.margin.bottom)\\n          .attr(\"class\", \"radar\"+id);\\n      //Append a g element\\n      var g = svg.append(\"g\")\\n          .attr(\"transform\", \"translate(\" + (cfg.w/2 + cfg.margin.left) + \",\" + (cfg.h/2 + cfg.margin.top) + \")\");\\n\\n      /////////////////////////////////////////////////////////\\n      ////////// Glow filter for some extra pizzazz ///////////\\n      /////////////////////////////////////////////////////////\\n\\n      //Filter for the outside glow\\n      var filter = g.append(\\'defs\\').append(\\'filter\\').attr(\\'id\\',\\'glow\\'),\\n        feGaussianBlur = filter.append(\\'feGaussianBlur\\').attr(\\'stdDeviation\\',\\'2.5\\').attr(\\'result\\',\\'coloredBlur\\'),\\n        feMerge = filter.append(\\'feMerge\\'),\\n        feMergeNode_1 = feMerge.append(\\'feMergeNode\\').attr(\\'in\\',\\'coloredBlur\\'),\\n        feMergeNode_2 = feMerge.append(\\'feMergeNode\\').attr(\\'in\\',\\'SourceGraphic\\');\\n\\n      /////////////////////////////////////////////////////////\\n      /////////////// Draw the Circular grid //////////////////\\n      /////////////////////////////////////////////////////////\\n\\n      //Wrapper for the grid & axes\\n      var axisGrid = g.append(\"g\").attr(\"class\", \"axisWrapper\");\\n\\n      //Draw the background circles\\n      axisGrid.selectAll(\".levels\")\\n         .data(d3.range(1,(cfg.levels+1)).reverse())\\n         .enter()\\n        .append(\"circle\")\\n        .attr(\"class\", \"gridCircle\")\\n        .attr(\"r\", function(d, i){return radius/cfg.levels*d;})\\n        .style(\"fill\", \"#CDCDCD\")\\n        .style(\"stroke\", \"#CDCDCD\")\\n        .style(\"fill-opacity\", cfg.opacityCircles)\\n        .style(\"filter\" , \"url(#glow)\");\\n\\n      //Text indicating at what % each level is\\n      axisGrid.selectAll(\".axisLabel\")\\n         .data(d3.range(1,(cfg.levels+1)).reverse())\\n         .enter().append(\"text\")\\n         .attr(\"class\", \"axisLabel\")\\n         .attr(\"x\", 4)\\n         .attr(\"y\", function(d){return -d*radius/cfg.levels;})\\n         .attr(\"dy\", \"0.4em\")\\n         .style(\"font-size\", \"10px\")\\n         .attr(\"fill\", \"#737373\")\\n         .text(function(d,i) { return Format(maxValue * d/cfg.levels); });\\n\\n      /////////////////////////////////////////////////////////\\n      //////////////////// Draw the axes //////////////////////\\n      /////////////////////////////////////////////////////////\\n\\n      //Create the straight lines radiating outward from the center\\n      var axis = axisGrid.selectAll(\".axis\")\\n        .data(allAxis)\\n        .enter()\\n        .append(\"g\")\\n        .attr(\"class\", \"axis\");\\n      //Append the lines\\n      axis.append(\"line\")\\n        .attr(\"x1\", 0)\\n        .attr(\"y1\", 0)\\n        .attr(\"x2\", function(d, i){ return rScale(maxValue*1.1) * Math.cos(angleSlice*i - Math.PI/2); })\\n        .attr(\"y2\", function(d, i){ return rScale(maxValue*1.1) * Math.sin(angleSlice*i - Math.PI/2); })\\n        .attr(\"class\", \"line\")\\n        .style(\"stroke\", \"white\")\\n        .style(\"stroke-width\", \"2px\");\\n\\n      //Append the labels at each axis\\n      axis.append(\"text\")\\n        .attr(\"class\", \"legend\")\\n        .style(\"font-size\", \"11px\")\\n        .attr(\"text-anchor\", \"middle\")\\n        .attr(\"dy\", \"0.35em\")\\n        .attr(\"x\", function(d, i){ return rScale(maxValue * cfg.labelFactor) * Math.cos(angleSlice*i - Math.PI/2); })\\n        .attr(\"y\", function(d, i){ return rScale(maxValue * cfg.labelFactor) * Math.sin(angleSlice*i - Math.PI/2); })\\n        .text(function(d){return d})\\n        .call(wrap, cfg.wrapWidth);\\n\\n      /////////////////////////////////////////////////////////\\n      ///////////// Draw the radar chart blobs ////////////////\\n      /////////////////////////////////////////////////////////\\n\\n      //The radial line function\\n      var radarLine = d3.svg.line.radial().interpolate(\"linear-closed\")\\n        .radius(function(d) { return rScale(d.value); })\\n        .angle(function(d,i) {\\treturn i*angleSlice; });\\n\\n      if(cfg.roundStrokes) {\\n        radarLine.interpolate(\"cardinal-closed\");\\n      }\\n\\n      //Create a wrapper for the blobs\\n      var blobWrapper = g.selectAll(\".radarWrapper\")\\n        .data(data)\\n        .enter().append(\"g\")\\n        .attr(\"class\", \"radarWrapper\");\\n\\n      //Append the backgrounds\\n      blobWrapper\\n        .append(\"path\")\\n        .attr(\"class\", \"radarArea\")\\n        .attr(\"d\", function(d,i) { return radarLine(d); })\\n        .style(\"fill\", function(d,i) { return cfg.color(i); })\\n        .style(\"fill-opacity\", cfg.opacityArea)\\n        .on(\\'mouseover\\', function (d,i){\\n          //Dim all blobs\\n          d3.selectAll(\".radarArea\")\\n            .transition().duration(200)\\n            .style(\"fill-opacity\", 0.1);\\n          //Bring back the hovered over blob\\n          d3.select(this)\\n            .transition().duration(200)\\n            .style(\"fill-opacity\", 0.7);\\n        })\\n        .on(\\'mouseout\\', function(){\\n          //Bring back all blobs\\n          d3.selectAll(\".radarArea\")\\n            .transition().duration(200)\\n            .style(\"fill-opacity\", cfg.opacityArea);\\n        });\\n\\n      //Create the outlines\\n      blobWrapper.append(\"path\")\\n        .attr(\"class\", \"radarStroke\")\\n        .attr(\"d\", function(d,i) { return radarLine(d); })\\n        .style(\"stroke-width\", cfg.strokeWidth + \"px\")\\n        .style(\"stroke\", function(d,i) { return cfg.color(i); })\\n        .style(\"fill\", \"none\")\\n        .style(\"filter\" , \"url(#glow)\");\\n\\n      //Append the circles\\n      blobWrapper.selectAll(\".radarCircle\")\\n        .data(function(d,i) { return d; })\\n        .enter().append(\"circle\")\\n        .attr(\"class\", \"radarCircle\")\\n        .attr(\"r\", cfg.dotRadius)\\n        .attr(\"cx\", function(d,i){ return rScale(d.value) * Math.cos(angleSlice*i - Math.PI/2); })\\n        .attr(\"cy\", function(d,i){ return rScale(d.value) * Math.sin(angleSlice*i - Math.PI/2); })\\n        .style(\"fill\", function(d,i,j) { return cfg.color(j); })\\n        .style(\"fill-opacity\", 0.8);\\n\\n      /////////////////////////////////////////////////////////\\n      //////// Append invisible circles for tooltip ///////////\\n      /////////////////////////////////////////////////////////\\n\\n      //Wrapper for the invisible circles on top\\n      var blobCircleWrapper = g.selectAll(\".radarCircleWrapper\")\\n        .data(data)\\n        .enter().append(\"g\")\\n        .attr(\"class\", \"radarCircleWrapper\");\\n\\n      //Append a set of invisible circles on top for the mouseover pop-up\\n      blobCircleWrapper.selectAll(\".radarInvisibleCircle\")\\n        .data(function(d,i) { return d; })\\n        .enter().append(\"circle\")\\n        .attr(\"class\", \"radarInvisibleCircle\")\\n        .attr(\"r\", cfg.dotRadius*1.5)\\n        .attr(\"cx\", function(d,i){ return rScale(d.value) * Math.cos(angleSlice*i - Math.PI/2); })\\n        .attr(\"cy\", function(d,i){ return rScale(d.value) * Math.sin(angleSlice*i - Math.PI/2); })\\n        .style(\"fill\", \"none\")\\n        .style(\"pointer-events\", \"all\")\\n        .on(\"mouseover\", function(d,i) {\\n          newX =  parseFloat(d3.select(this).attr(\\'cx\\')) - 10;\\n          newY =  parseFloat(d3.select(this).attr(\\'cy\\')) - 10;\\n\\n          tooltip\\n            .attr(\\'x\\', newX)\\n            .attr(\\'y\\', newY)\\n            .text(Format(d.value))\\n            .transition().duration(200)\\n            .style(\\'opacity\\', 1);\\n        })\\n        .on(\"mouseout\", function(){\\n          tooltip.transition().duration(200)\\n            .style(\"opacity\", 0);\\n        });\\n\\n      //Set up the small tooltip for when you hover over a circle\\n      var tooltip = g.append(\"text\")\\n        .attr(\"class\", \"tooltip\")\\n        .style(\"opacity\", 0);\\n\\n      /////////////////////////////////////////////////////////\\n      /////////////////// Helper Function /////////////////////\\n      /////////////////////////////////////////////////////////\\n\\n      //Taken from http://bl.ocks.org/mbostock/7555321\\n      //Wraps SVG text\\n      function wrap(text, width) {\\n        text.each(function() {\\n        var text = d3.select(this),\\n          words = text.text().split(/\\\\s+/).reverse(),\\n          word,\\n          line = [],\\n          lineNumber = 0,\\n          lineHeight = 1.4, // ems\\n          y = text.attr(\"y\"),\\n          x = text.attr(\"x\"),\\n          dy = parseFloat(text.attr(\"dy\")),\\n          tspan = text.text(null).append(\"tspan\").attr(\"x\", x).attr(\"y\", y).attr(\"dy\", dy + \"em\");\\n\\n        while (word = words.pop()) {\\n          line.push(word);\\n          tspan.text(line.join(\" \"));\\n          if (tspan.node().getComputedTextLength() > width) {\\n          line.pop();\\n          tspan.text(line.join(\" \"));\\n          line = [word];\\n          tspan = text.append(\"tspan\").attr(\"x\", x).attr(\"y\", y).attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\").text(word);\\n          }\\n        }\\n        });\\n      }//wrap\\n\\n    }//RadarChart\\n\\n    console.log(\"WE HEEEEERRRRRRREEEEEEE!!!!!!\");\\n      /* Radar chart design created by Nadieh Bremer - VisualCinnamon.com */\\n\\n      //////////////////////////////////////////////////////////////\\n      //////////////////////// Set-Up //////////////////////////////\\n      //////////////////////////////////////////////////////////////\\n      var margin = {top: 100, right: 100, bottom: 100, left: 100},\\n        width = Math.min(400, window.innerWidth - 10) - margin.left - margin.right,\\n        height = Math.min(width, window.innerHeight - margin.top - margin.bottom - 20);\\n\\n      //////////////////////////////////////////////////////////////\\n      ////////////////////////// Data //////////////////////////////\\n      //////////////////////////////////////////////////////////////\\n      var data = [\\n            [//iPhone\\n            {axis:\"Java\",value:1},\\n            {axis:\"Brand\",value:2},\\n            {axis:\"Contract Cost\",value:3},\\n            {axis:\"Design And Quality\",value:4},\\n            {axis:\"Have Internet Connectivity\",value:5},\\n            {axis:\"Large Screen\",value:4},\\n            {axis:\"Price Of Device\",value:3},\\n            {axis:\"To Be A Smartphone\",value:2}\\n            ]\\n          ];\\n      //////////////////////////////////////////////////////////////\\n      //////////////////// Draw the Chart //////////////////////////\\n      //////////////////////////////////////////////////////////////\\n      var color = d3.scale.ordinal()\\n        .range([\"#00A0B0\",\"#EDC951\",\"#CC333F\"]);\\n\\n      var radarChartOptions = {\\n        w: width,\\n        h: height,\\n        margin: margin,\\n        maxValue: 5,\\n        levels: 5,\\n        roundStrokes: true,\\n        color: color\\n      };\\n      //Call function to draw the Radar chart\\n\\n      RadarChart(\".radarChart\", data, radarChartOptions);\\n  ') ];\n}));\n","bodyAttrs":{}}