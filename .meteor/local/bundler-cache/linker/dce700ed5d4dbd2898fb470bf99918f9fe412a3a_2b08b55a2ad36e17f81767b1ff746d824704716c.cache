[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar meteorInstall = Package['modules-runtime'].meteorInstall;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"modules\":{\"client.js\":function(require,exports){\n\n///////////////////////////////////////////////////////////////////////////////////////\n//                                                                                   //\n// packages/modules/client.js                                                        //\n//                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////\n                                                                                     //\nrequire(\"./install-packages.js\");                                                    // 1\nrequire(\"./stubs.js\");                                                               // 2\nrequire(\"./process.js\");                                                             // 3\nrequire(\"./reify.js\");                                                               // 4\n                                                                                     // 5\nexports.addStyles = require(\"./css\").addStyles;                                      // 6\n                                                                                     // 7\n///////////////////////////////////////////////////////////////////////////////////////\n\n},\"css.js\":function(require,exports){\n\n///////////////////////////////////////////////////////////////////////////////////////\n//                                                                                   //\n// packages/modules/css.js                                                           //\n//                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////\n                                                                                     //\nvar doc = document;                                                                  // 1\nvar head = doc.getElementsByTagName(\"head\").item(0);                                 // 2\n                                                                                     // 3\nexports.addStyles = function (css) {                                                 // 4\n  var style = doc.createElement(\"style\");                                            // 5\n                                                                                     // 6\n  style.setAttribute(\"type\", \"text/css\");                                            // 7\n                                                                                     // 8\n  // https://msdn.microsoft.com/en-us/library/ms535871(v=vs.85).aspx                 // 9\n  var internetExplorerSheetObject =                                                  // 10\n    style.sheet || // Edge/IE11.                                                     // 11\n    style.styleSheet; // Older IEs.                                                  // 12\n                                                                                     // 13\n  if (internetExplorerSheetObject) {                                                 // 14\n    internetExplorerSheetObject.cssText = css;                                       // 15\n  } else {                                                                           // 16\n    style.appendChild(doc.createTextNode(css));                                      // 17\n  }                                                                                  // 18\n                                                                                     // 19\n  return head.appendChild(style);                                                    // 20\n};                                                                                   // 21\n                                                                                     // 22\n///////////////////////////////////////////////////////////////////////////////////////\n\n},\"install-packages.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////\n//                                                                                   //\n// packages/modules/install-packages.js                                              //\n//                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////\n                                                                                     //\nfunction install(name, mainModule) {                                                 // 1\n  var meteorDir = {};                                                                // 2\n                                                                                     // 3\n  // Given a package name <name>, install a stub module in the                       // 4\n  // /node_modules/meteor directory called <name>.js, so that                        // 5\n  // require.resolve(\"meteor/<name>\") will always return                             // 6\n  // /node_modules/meteor/<name>.js instead of something like                        // 7\n  // /node_modules/meteor/<name>/index.js, in the rare but possible event            // 8\n  // that the package contains a file called index.js (#6590).                       // 9\n                                                                                     // 10\n  if (typeof mainModule === \"string\") {                                              // 11\n    // Set up an alias from /node_modules/meteor/<package>.js to the main            // 12\n    // module, e.g. meteor/<package>/index.js.                                       // 13\n    meteorDir[name + \".js\"] = mainModule;                                            // 14\n  } else {                                                                           // 15\n    // back compat with old Meteor packages                                          // 16\n    meteorDir[name + \".js\"] = function (r, e, module) {                              // 17\n      module.exports = Package[name];                                                // 18\n    };                                                                               // 19\n  }                                                                                  // 20\n                                                                                     // 21\n  meteorInstall({                                                                    // 22\n    node_modules: {                                                                  // 23\n      meteor: meteorDir                                                              // 24\n    }                                                                                // 25\n  });                                                                                // 26\n}                                                                                    // 27\n                                                                                     // 28\n// This file will be modified during computeJsOutputFilesMap to include              // 29\n// install(<name>) calls for every Meteor package.                                   // 30\n                                                                                     // 31\ninstall(\"meteor\");                                                                   // 32\ninstall(\"meteor-base\");                                                              // 33\ninstall(\"mobile-experience\");                                                        // 34\ninstall(\"babel-compiler\");                                                           // 35\ninstall(\"ecmascript\");                                                               // 36\ninstall(\"underscore\");                                                               // 37\ninstall(\"base64\");                                                                   // 38\ninstall(\"ejson\");                                                                    // 39\ninstall(\"id-map\");                                                                   // 40\ninstall(\"ordered-dict\");                                                             // 41\ninstall(\"tracker\");                                                                  // 42\ninstall(\"modules-runtime\");                                                          // 43\ninstall(\"modules\", \"meteor/modules/client.js\");                                      // 44\ninstall(\"ecmascript-runtime\");                                                       // 45\ninstall(\"es5-shim\", \"meteor/es5-shim/client.js\");                                    // 46\ninstall(\"promise\", \"meteor/promise/client.js\");                                      // 47\ninstall(\"babel-runtime\", \"meteor/babel-runtime/babel-runtime.js\");                   // 48\ninstall(\"ecmascript-runtime-client\", \"meteor/ecmascript-runtime-client/runtime.js\");\ninstall(\"random\");                                                                   // 50\ninstall(\"mongo-id\");                                                                 // 51\ninstall(\"diff-sequence\");                                                            // 52\ninstall(\"geojson-utils\", \"meteor/geojson-utils/main.js\");                            // 53\ninstall(\"minimongo\");                                                                // 54\ninstall(\"check\", \"meteor/check/match.js\");                                           // 55\ninstall(\"retry\");                                                                    // 56\ninstall(\"ddp-common\");                                                               // 57\ninstall(\"reload\");                                                                   // 58\ninstall(\"ddp-client\", \"meteor/ddp-client/namespace.js\");                             // 59\ninstall(\"ddp\");                                                                      // 60\ninstall(\"ddp-server\");                                                               // 61\ninstall(\"allow-deny\");                                                               // 62\ninstall(\"insecure\");                                                                 // 63\ninstall(\"mongo\");                                                                    // 64\ninstall(\"blaze-html-templates\");                                                     // 65\ninstall(\"reactive-var\");                                                             // 66\ninstall(\"standard-minifier-css\");                                                    // 67\ninstall(\"standard-minifier-js\");                                                     // 68\ninstall(\"shell-server\");                                                             // 69\ninstall(\"jquery\", \"meteor/jquery/main.js\");                                          // 70\ninstall(\"twbs:bootstrap\");                                                           // 71\ninstall(\"d3\");                                                                       // 72\ninstall(\"webapp\", \"meteor/webapp/webapp_client.js\");                                 // 73\ninstall(\"livedata\");                                                                 // 74\ninstall(\"dynamic-import\", \"meteor/dynamic-import/client.js\");                        // 75\ninstall(\"hot-code-push\");                                                            // 76\ninstall(\"observe-sequence\");                                                         // 77\ninstall(\"deps\");                                                                     // 78\ninstall(\"htmljs\");                                                                   // 79\ninstall(\"blaze\");                                                                    // 80\ninstall(\"spacebars\");                                                                // 81\ninstall(\"templating-compiler\");                                                      // 82\ninstall(\"templating-runtime\");                                                       // 83\ninstall(\"templating\");                                                               // 84\ninstall(\"launch-screen\");                                                            // 85\ninstall(\"ui\");                                                                       // 86\ninstall(\"autoupdate\");                                                               // 87\n                                                                                     // 88\n///////////////////////////////////////////////////////////////////////////////////////\n\n},\"process.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////\n//                                                                                   //\n// packages/modules/process.js                                                       //\n//                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////\n                                                                                     //\nif (! global.process) {                                                              // 1\n  try {                                                                              // 2\n    // The application can run `npm install process` to provide its own              // 3\n    // process stub; otherwise this module will provide a partial stub.              // 4\n    global.process = require(\"process\");                                             // 5\n  } catch (missing) {                                                                // 6\n    global.process = {};                                                             // 7\n  }                                                                                  // 8\n}                                                                                    // 9\n                                                                                     // 10\nvar proc = global.process;                                                           // 11\n                                                                                     // 12\nif (Meteor.isServer) {                                                               // 13\n  // Make require(\"process\") work on the server in all versions of Node.             // 14\n  meteorInstall({                                                                    // 15\n    node_modules: {                                                                  // 16\n      \"process.js\": function (r, e, module) {                                        // 17\n        module.exports = proc;                                                       // 18\n      }                                                                              // 19\n    }                                                                                // 20\n  });                                                                                // 21\n} else {                                                                             // 22\n  proc.platform = \"browser\";                                                         // 23\n  proc.nextTick = proc.nextTick || Meteor._setImmediate;                             // 24\n}                                                                                    // 25\n                                                                                     // 26\nif (typeof proc.env !== \"object\") {                                                  // 27\n  proc.env = {};                                                                     // 28\n}                                                                                    // 29\n                                                                                     // 30\nvar hasOwn = Object.prototype.hasOwnProperty;                                        // 31\nfor (var key in meteorEnv) {                                                         // 32\n  if (hasOwn.call(meteorEnv, key)) {                                                 // 33\n    proc.env[key] = meteorEnv[key];                                                  // 34\n  }                                                                                  // 35\n}                                                                                    // 36\n                                                                                     // 37\n///////////////////////////////////////////////////////////////////////////////////////\n\n},\"reify.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////\n//                                                                                   //\n// packages/modules/reify.js                                                         //\n//                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////\n                                                                                     //\nvar Module = module.constructor;                                                     // 1\nvar Mp = Module.prototype;                                                           // 2\nrequire(\"reify/lib/runtime\").enable(Mp);                                             // 3\nMp.importSync = Mp.importSync || Mp.import;                                          // 4\nMp.import = Mp.import || Mp.importSync;                                              // 5\n                                                                                     // 6\n///////////////////////////////////////////////////////////////////////////////////////\n\n},\"stubs.js\":function(require){\n\n///////////////////////////////////////////////////////////////////////////////////////\n//                                                                                   //\n// packages/modules/stubs.js                                                         //\n//                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////\n                                                                                     //\nvar haveStubs = false;                                                               // 1\ntry {                                                                                // 2\n  require.resolve(\"meteor-node-stubs\");                                              // 3\n  haveStubs = true;                                                                  // 4\n} catch (noStubs) {}                                                                 // 5\n                                                                                     // 6\nif (haveStubs) {                                                                     // 7\n  // When meteor-node-stubs is installed in the application's root                   // 8\n  // node_modules directory, requiring it here installs aliases for stubs            // 9\n  // for all Node built-in modules, such as fs, util, and http.                      // 10\n  require(\"meteor-node-stubs\");                                                      // 11\n}                                                                                    // 12\n                                                                                     // 13\n///////////////////////////////////////////////////////////////////////////////////////\n\n},\"node_modules\":{\"reify\":{\"lib\":{\"runtime\":{\"index.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////\n//                                                                                   //\n// node_modules/meteor/modules/node_modules/reify/lib/runtime/index.js               //\n//                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////\n                                                                                     //\n\"use strict\";                                                                        // 1\n                                                                                     // 2\n// This module should be compatible with PhantomJS v1, just like the other files     // 3\n// in reify/lib/runtime. Node 4+ features like const/let and arrow functions are     // 4\n// not acceptable here, and importing any npm packages should be contemplated        // 5\n// with extreme skepticism.                                                          // 6\n                                                                                     // 7\nvar utils = require(\"./utils.js\");                                                   // 8\nvar Entry = require(\"./entry.js\");                                                   // 9\n                                                                                     // 10\n// The exports.enable method can be used to enable the Reify runtime for             // 11\n// specific module objects, or for Module.prototype (where implemented),             // 12\n// to make the runtime available throughout the entire module system.                // 13\nexports.enable = function (mod) {                                                    // 14\n  if (typeof mod.export !== \"function\" ||                                            // 15\n      typeof mod.importSync !== \"function\") {                                        // 16\n    mod.export = moduleExport;                                                       // 17\n    mod.exportDefault = moduleExportDefault;                                         // 18\n    mod.runSetters = runSetters;                                                     // 19\n    mod.watch = moduleWatch;                                                         // 20\n                                                                                     // 21\n    // Used for copying the properties of a namespace object to                      // 22\n    // mod.exports to implement `export * from \"module\"` syntax.                     // 23\n    mod.makeNsSetter = moduleMakeNsSetter;                                           // 24\n                                                                                     // 25\n    // To be deprecated:                                                             // 26\n    mod.runModuleSetters = runSetters;                                               // 27\n    mod.importSync = importSync;                                                     // 28\n                                                                                     // 29\n    return true;                                                                     // 30\n  }                                                                                  // 31\n                                                                                     // 32\n  return false;                                                                      // 33\n};                                                                                   // 34\n                                                                                     // 35\nfunction moduleWatch(exported, setters, key) {                                       // 36\n  utils.setESModule(this.exports);                                                   // 37\n  Entry.getOrCreate(this.exports, this);                                             // 38\n                                                                                     // 39\n  if (utils.isObject(setters)) {                                                     // 40\n    Entry.getOrCreate(exported).addSetters(this, setters, key);                      // 41\n  }                                                                                  // 42\n}                                                                                    // 43\n                                                                                     // 44\n// If key is provided, it will be used to identify the given setters so              // 45\n// that they can be replaced if module.importSync is called again with the           // 46\n// same key. This avoids potential memory leaks from import declarations             // 47\n// inside loops. The compiler generates these keys automatically (and                // 48\n// deterministically) when compiling nested import declarations.                     // 49\nfunction importSync(id, setters, key) {                                              // 50\n  return this.watch(this.require(id), setters, key);                                 // 51\n}                                                                                    // 52\n                                                                                     // 53\n// Register getter functions for local variables in the scope of an export           // 54\n// statement. Pass true as the second argument to indicate that the getter           // 55\n// functions always return the same values.                                          // 56\nfunction moduleExport(getters, constant) {                                           // 57\n  utils.setESModule(this.exports);                                                   // 58\n  var entry = Entry.getOrCreate(this.exports, this);                                 // 59\n  entry.addGetters(getters, constant);                                               // 60\n  if (this.loaded) {                                                                 // 61\n    // If the module has already been evaluated, then we need to trigger             // 62\n    // another round of entry.runSetters calls, which begins by calling              // 63\n    // entry.runModuleGetters(module).                                               // 64\n    entry.runSetters();                                                              // 65\n  }                                                                                  // 66\n}                                                                                    // 67\n                                                                                     // 68\n// Register a getter function that always returns the given value.                   // 69\nfunction moduleExportDefault(value) {                                                // 70\n  return this.export({                                                               // 71\n    default: function () {                                                           // 72\n      return value;                                                                  // 73\n    }                                                                                // 74\n  }, true);                                                                          // 75\n}                                                                                    // 76\n                                                                                     // 77\n// Platform-specific code should find a way to call this method whenever             // 78\n// the module system is about to return module.exports from require. This            // 79\n// might happen more than once per module, in case of dependency cycles,             // 80\n// so we want Module.prototype.runSetters to run each time.                          // 81\nfunction runSetters(valueToPassThrough) {                                            // 82\n  var entry = Entry.get(this.exports);                                               // 83\n  if (entry !== null) {                                                              // 84\n    entry.runSetters();                                                              // 85\n  }                                                                                  // 86\n                                                                                     // 87\n  if (this.loaded) {                                                                 // 88\n    // If this module has finished loading, then we must create an Entry             // 89\n    // object here, so that we can add this module to entry.ownerModules             // 90\n    // by passing it as the second argument to Entry.getOrCreate.                    // 91\n    Entry.getOrCreate(this.exports, this);                                           // 92\n  }                                                                                  // 93\n                                                                                     // 94\n  // Assignments to exported local variables get wrapped with calls to               // 95\n  // module.runSetters, so module.runSetters returns the                             // 96\n  // valueToPassThrough parameter to allow the value of the original                 // 97\n  // expression to pass through. For example,                                        // 98\n  //                                                                                 // 99\n  //   export var a = 1;                                                             // 100\n  //   console.log(a += 3);                                                          // 101\n  //                                                                                 // 102\n  // becomes                                                                         // 103\n  //                                                                                 // 104\n  //   module.export(\"a\", () => a);                                                  // 105\n  //   var a = 1;                                                                    // 106\n  //   console.log(module.runSetters(a += 3));                                       // 107\n  //                                                                                 // 108\n  // This ensures module.runSetters runs immediately after the assignment,           // 109\n  // and does not interfere with the larger computation.                             // 110\n  return valueToPassThrough;                                                         // 111\n}                                                                                    // 112\n                                                                                     // 113\n// Returns a function that takes a namespace object and copies the                   // 114\n// properties of the namespace to module.exports, which is useful for                // 115\n// implementing `export * from \"module\"` syntax.                                     // 116\nfunction moduleMakeNsSetter() {                                                      // 117\n  var module = this;                                                                 // 118\n  return function (namespace) {                                                      // 119\n    utils.assign(module.exports, namespace);                                         // 120\n  };                                                                                 // 121\n}                                                                                    // 122\n                                                                                     // 123\n///////////////////////////////////////////////////////////////////////////////////////\n\n},\"utils.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////\n//                                                                                   //\n// node_modules/meteor/modules/node_modules/reify/lib/runtime/utils.js               //\n//                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////\n                                                                                     //\n\"use strict\";                                                                        // 1\n                                                                                     // 2\n// This module should be compatible with PhantomJS v1, just like the other files     // 3\n// in reify/lib/runtime. Node 4+ features like const/let and arrow functions are     // 4\n// not acceptable here, and importing any npm packages should be contemplated        // 5\n// with extreme skepticism.                                                          // 6\n                                                                                     // 7\nvar useSetPrototypeOf = typeof Object.setPrototypeOf === \"function\";                 // 8\nvar useSymbol = typeof Symbol === \"function\";                                        // 9\n                                                                                     // 10\nvar esStrKey = \"__esModule\";                                                         // 11\nvar esSymKey = useSymbol ? Symbol.for(esStrKey) : null;                              // 12\nvar useToStringTag = useSymbol && typeof Symbol.toStringTag === \"symbol\";            // 13\nvar useGetOwnPropDesc =                                                              // 14\n  typeof Object.getOwnPropertyDescriptor === \"function\";                             // 15\nvar hasOwn = Object.prototype.hasOwnProperty;                                        // 16\n                                                                                     // 17\nexports.assign = function (target) {                                                 // 18\n  var argCount = arguments.length;                                                   // 19\n  var sourcesByKey = Object.create(null);                                            // 20\n                                                                                     // 21\n  for (var i = 0; i < argCount; ++i) {                                               // 22\n    var source = arguments[i];                                                       // 23\n    if (isObjectLike(source)) {                                                      // 24\n      Object.keys(source).forEach(function (key) {                                   // 25\n        sourcesByKey[key] = source;                                                  // 26\n      });                                                                            // 27\n    }                                                                                // 28\n  }                                                                                  // 29\n                                                                                     // 30\n  Object.keys(sourcesByKey).forEach(function (key) {                                 // 31\n    copyKey(key, target, sourcesByKey[key]);                                         // 32\n  });                                                                                // 33\n                                                                                     // 34\n  return target;                                                                     // 35\n};                                                                                   // 36\n                                                                                     // 37\nfunction copyKey(key, target, source) {                                              // 38\n  if (useGetOwnPropDesc) {                                                           // 39\n    var desc = Object.getOwnPropertyDescriptor(source, key);                         // 40\n    desc.configurable = true; // Allow redefinition.                                 // 41\n    Object.defineProperty(target, key, desc);                                        // 42\n  } else {                                                                           // 43\n    target[key] = source[key];                                                       // 44\n  }                                                                                  // 45\n}                                                                                    // 46\n                                                                                     // 47\nexports.copyKey = copyKey;                                                           // 48\n                                                                                     // 49\n// Returns obj[key] unless that property is defined by a getter function,            // 50\n// in which case the getter function is returned.                                    // 51\nexports.valueOrGetter = function (obj, key) {                                        // 52\n  if (useGetOwnPropDesc && hasOwn.call(obj, key)) {                                  // 53\n    var desc = Object.getOwnPropertyDescriptor(obj, key);                            // 54\n    if (typeof desc.get === \"function\") {                                            // 55\n      return desc.get;                                                               // 56\n    }                                                                                // 57\n  }                                                                                  // 58\n                                                                                     // 59\n  return obj[key];                                                                   // 60\n};                                                                                   // 61\n                                                                                     // 62\nfunction getESModule(exported) {                                                     // 63\n  if (isObjectLike(exported)) {                                                      // 64\n    if (useSymbol && hasOwn.call(exported, esSymKey)) {                              // 65\n      return !! exported[esSymKey];                                                  // 66\n    }                                                                                // 67\n                                                                                     // 68\n    if (hasOwn.call(exported, esStrKey)) {                                           // 69\n      return !! exported[esStrKey];                                                  // 70\n    }                                                                                // 71\n  }                                                                                  // 72\n                                                                                     // 73\n  return false;                                                                      // 74\n}                                                                                    // 75\n                                                                                     // 76\nexports.getESModule = getESModule;                                                   // 77\n                                                                                     // 78\nfunction setESModule(exported) {                                                     // 79\n  if (isObjectLike(exported)) {                                                      // 80\n    if (useSymbol) {                                                                 // 81\n      exported[esSymKey] = true;                                                     // 82\n    } else if (! exported[esStrKey]) {                                               // 83\n      // Other module runtime systems may set exported.__esModule such               // 84\n      // that it can't be redefined, so we call Object.defineProperty only           // 85\n      // when exported.__esModule is not already true.                               // 86\n      Object.defineProperty(exported, esStrKey, {                                    // 87\n        configurable: true,                                                          // 88\n        enumerable: false,                                                           // 89\n        value: true,                                                                 // 90\n        writable: false                                                              // 91\n      });                                                                            // 92\n    }                                                                                // 93\n  }                                                                                  // 94\n}                                                                                    // 95\n                                                                                     // 96\nexports.setESModule = setESModule;                                                   // 97\n                                                                                     // 98\nfunction isObject(value) {                                                           // 99\n  return typeof value === \"object\" && value !== null;                                // 100\n}                                                                                    // 101\n                                                                                     // 102\nexports.isObject = isObject;                                                         // 103\n                                                                                     // 104\nfunction isObjectLike(value) {                                                       // 105\n  var type = typeof value;                                                           // 106\n  return type === \"function\" || (type === \"object\" && value !== null);               // 107\n}                                                                                    // 108\n                                                                                     // 109\nexports.isObjectLike = isObjectLike;                                                 // 110\n                                                                                     // 111\nfunction createNamespace() {                                                         // 112\n  var namespace = Object.create(null);                                               // 113\n                                                                                     // 114\n  if (useToStringTag) {                                                              // 115\n    Object.defineProperty(namespace, Symbol.toStringTag, {                           // 116\n      value: \"Module\",                                                               // 117\n      configurable: false,                                                           // 118\n      enumerable: false,                                                             // 119\n      writable: false                                                                // 120\n    });                                                                              // 121\n  }                                                                                  // 122\n                                                                                     // 123\n  setESModule(namespace);                                                            // 124\n                                                                                     // 125\n  return namespace;                                                                  // 126\n}                                                                                    // 127\n                                                                                     // 128\nexports.createNamespace = createNamespace;                                           // 129\n                                                                                     // 130\nfunction setPrototypeOf(object, proto) {                                             // 131\n  if (useSetPrototypeOf) {                                                           // 132\n    Object.setPrototypeOf(object, proto);                                            // 133\n  } else {                                                                           // 134\n    object.__proto__ = proto;                                                        // 135\n  }                                                                                  // 136\n  return object;                                                                     // 137\n}                                                                                    // 138\n                                                                                     // 139\nexports.setPrototypeOf = setPrototypeOf;                                             // 140\n                                                                                     // 141\n///////////////////////////////////////////////////////////////////////////////////////\n\n},\"entry.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////\n//                                                                                   //\n// node_modules/meteor/modules/node_modules/reify/lib/runtime/entry.js               //\n//                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////\n                                                                                     //\n\"use strict\";                                                                        // 1\n                                                                                     // 2\n// This module should be compatible with PhantomJS v1, just like the other files     // 3\n// in reify/lib/runtime. Node 4+ features like const/let and arrow functions are     // 4\n// not acceptable here, and importing any npm packages should be contemplated        // 5\n// with extreme skepticism.                                                          // 6\n                                                                                     // 7\nvar utils = require(\"./utils.js\");                                                   // 8\n                                                                                     // 9\nvar GETTER_ERROR = {};                                                               // 10\nvar NAN = {};                                                                        // 11\nvar UNDEFINED = {};                                                                  // 12\nvar hasOwn = Object.prototype.hasOwnProperty;                                        // 13\nvar keySalt = 0;                                                                     // 14\n                                                                                     // 15\nfunction Entry(exported) {                                                           // 16\n  // The module.exports of the module this Entry is managing.                        // 17\n  this.exports = exported;                                                           // 18\n  // Getters for local variables exported from the managed module.                   // 19\n  this.getters = Object.create(null);                                                // 20\n  // Setters for assigning to local variables in parent modules.                     // 21\n  this.setters = Object.create(null);                                                // 22\n  // The normalized namespace object that importers receive when they use            // 23\n  // `import * as namespace from \"...\"` syntax.                                      // 24\n  this.namespace = utils.createNamespace();                                          // 25\n  // Map from module.id string to module object for each module this Entry           // 26\n  // is managing.                                                                    // 27\n  this.ownerModules = Object.create(null);                                           // 28\n  // Boolean indicating whether all the modules this Entry is managing               // 29\n  // have finished loading yet. Call entry.hasLoaded() to compute.                   // 30\n  this._loaded = false;                                                              // 31\n}                                                                                    // 32\n                                                                                     // 33\nvar Ep = utils.setPrototypeOf(Entry.prototype, null);                                // 34\n                                                                                     // 35\nvar weakEntryMap = typeof WeakMap === \"function\"                                     // 36\n  ? new WeakMap                                                                      // 37\n  : new (function FakeWeakMap() {                                                    // 38\n    // A barely functional WeakMap polyfill, just in case. This                      // 39\n    // implementation needs to be logically correct only in the specific             // 40\n    // ways that the Entry class uses it. It isn't even \"weak\" in the                // 41\n    // garbage-collection sense of the word, but that's fine.                        // 42\n    var keys = [];                                                                   // 43\n    var values = [];                                                                 // 44\n                                                                                     // 45\n    this.get = function (obj) {                                                      // 46\n      var index = keys.indexOf(obj);                                                 // 47\n      if (index >= 0) {                                                              // 48\n        return values[index];                                                        // 49\n      }                                                                              // 50\n    };                                                                               // 51\n                                                                                     // 52\n    this.set = function (obj, value) {                                               // 53\n      var index = keys.indexOf(obj);                                                 // 54\n      if (index >= 0) {                                                              // 55\n        values[index] = value;                                                       // 56\n      } else {                                                                       // 57\n        keys.push(obj);                                                              // 58\n        values.push(value);                                                          // 59\n      }                                                                              // 60\n    };                                                                               // 61\n  });                                                                                // 62\n                                                                                     // 63\nEntry.get = function (exported) {                                                    // 64\n  if (utils.isObjectLike(exported)) {                                                // 65\n    var entry = weakEntryMap.get(exported);                                          // 66\n    if (entry !== void 0) {                                                          // 67\n      return entry;                                                                  // 68\n    }                                                                                // 69\n  }                                                                                  // 70\n  return null;                                                                       // 71\n};                                                                                   // 72\n                                                                                     // 73\nEntry.getOrCreate = function (exported, mod) {                                       // 74\n  var entry = getOrCreate(exported);                                                 // 75\n                                                                                     // 76\n  if (utils.isObject(mod)) {                                                         // 77\n    entry.ownerModules[mod.id] = mod;                                                // 78\n  }                                                                                  // 79\n                                                                                     // 80\n  return entry;                                                                      // 81\n};                                                                                   // 82\n                                                                                     // 83\nfunction getOrCreate(exported) {                                                     // 84\n  if (! utils.isObjectLike(exported)) {                                              // 85\n    // In case the child module modified module.exports, create a temporary          // 86\n    // Entry object so that we can call the entry.addSetters method once,            // 87\n    // which will trigger entry.runSetters(names), so that module.importSync         // 88\n    // behaves as expected.                                                          // 89\n    return new Entry(exported);                                                      // 90\n  }                                                                                  // 91\n                                                                                     // 92\n  var entry = weakEntryMap.get(exported);                                            // 93\n  if (entry !== void 0) {                                                            // 94\n    return entry;                                                                    // 95\n  }                                                                                  // 96\n                                                                                     // 97\n  var entry = new Entry(exported);                                                   // 98\n  weakEntryMap.set(exported, entry);                                                 // 99\n  return entry;                                                                      // 100\n};                                                                                   // 101\n                                                                                     // 102\nfunction safeKeys(obj) {                                                             // 103\n  var keys = Object.keys(obj);                                                       // 104\n  var esModuleIndex = keys.indexOf(\"__esModule\");                                    // 105\n  if (esModuleIndex >= 0) {                                                          // 106\n    keys.splice(esModuleIndex, 1);                                                   // 107\n  }                                                                                  // 108\n  return keys;                                                                       // 109\n}                                                                                    // 110\n                                                                                     // 111\nEp.addGetters = function (getters, constant) {                                       // 112\n  var names = safeKeys(getters);                                                     // 113\n  var nameCount = names.length;                                                      // 114\n  constant = !! constant;                                                            // 115\n                                                                                     // 116\n  for (var i = 0; i < nameCount; ++i) {                                              // 117\n    var name = names[i];                                                             // 118\n    var getter = getters[name];                                                      // 119\n                                                                                     // 120\n    if (typeof getter === \"function\" &&                                              // 121\n        // Should this throw if this.getters[name] exists?                           // 122\n        ! (name in this.getters)) {                                                  // 123\n      this.getters[name] = getter;                                                   // 124\n      getter.constant = constant;                                                    // 125\n      getter.runCount = 0;                                                           // 126\n    }                                                                                // 127\n  }                                                                                  // 128\n};                                                                                   // 129\n                                                                                     // 130\nEp.addSetters = function (parent, setters, key) {                                    // 131\n  var names = safeKeys(setters);                                                     // 132\n  var nameCount = names.length;                                                      // 133\n                                                                                     // 134\n  if (! nameCount) {                                                                 // 135\n    return;                                                                          // 136\n  }                                                                                  // 137\n                                                                                     // 138\n  // If no key is provided, make a unique key. Otherwise, make sure the key is       // 139\n  // distinct from keys provided by other parent modules.                            // 140\n  key = key === void 0                                                               // 141\n    ? makeUniqueKey()                                                                // 142\n    : parent.id + \":\" + key;                                                         // 143\n                                                                                     // 144\n  for (var i = 0; i < nameCount; ++i) {                                              // 145\n    var name = names[i];                                                             // 146\n    var setter = setters[name];                                                      // 147\n                                                                                     // 148\n    if (typeof setter === \"function\") {                                              // 149\n      setter.parent = parent;                                                        // 150\n      if (! (name in this.setters)) {                                                // 151\n        this.setters[name] = Object.create(null);                                    // 152\n      }                                                                              // 153\n      this.setters[name][key] = setter;                                              // 154\n    }                                                                                // 155\n  }                                                                                  // 156\n                                                                                     // 157\n  this.runSetters(names);                                                            // 158\n};                                                                                   // 159\n                                                                                     // 160\nEp.runGetters = function (names) {                                                   // 161\n  // Before running getters, copy anything added to the exports object               // 162\n  // over to the namespace. Values returned by getters take precedence               // 163\n  // over these values, but we don't want to miss anything.                          // 164\n  syncExportsToNamespace(this, names);                                               // 165\n                                                                                     // 166\n  if (names === void 0 ||                                                            // 167\n      names.indexOf(\"*\") >= 0) {                                                     // 168\n    names = Object.keys(this.getters);                                               // 169\n  }                                                                                  // 170\n                                                                                     // 171\n  var nameCount = names.length;                                                      // 172\n                                                                                     // 173\n  for (var i = 0; i < nameCount; ++i) {                                              // 174\n    var name = names[i];                                                             // 175\n    var value = runGetter(this, name);                                               // 176\n                                                                                     // 177\n    // If the getter is run without error, update both entry.namespace and           // 178\n    // module.exports with the current value so that CommonJS require                // 179\n    // calls remain consistent with module.watch.                                    // 180\n    if (value !== GETTER_ERROR) {                                                    // 181\n      this.namespace[name] = value;                                                  // 182\n      this.exports[name] = value;                                                    // 183\n    }                                                                                // 184\n  }                                                                                  // 185\n};                                                                                   // 186\n                                                                                     // 187\nfunction syncExportsToNamespace(entry, names) {                                      // 188\n  var setDefault = false;                                                            // 189\n                                                                                     // 190\n  if (! utils.getESModule(entry.exports)) {                                          // 191\n    // If the module entry is managing overrides module.exports, that                // 192\n    // value should be exposed as the .default property of the namespace,            // 193\n    // unless module.exports is marked as an ECMASCript module.                      // 194\n    entry.namespace.default = entry.exports;                                         // 195\n    setDefault = true;                                                               // 196\n  }                                                                                  // 197\n                                                                                     // 198\n  if (! utils.isObjectLike(entry.exports)) {                                         // 199\n    return;                                                                          // 200\n  }                                                                                  // 201\n                                                                                     // 202\n  if (names === void 0 ||                                                            // 203\n      names.indexOf(\"*\") >= 0) {                                                     // 204\n    names = Object.keys(entry.exports);                                              // 205\n  }                                                                                  // 206\n                                                                                     // 207\n  names.forEach(function (key) {                                                     // 208\n    // Don't set any properties for which a getter function exists in                // 209\n    // entry.getters, don't accidentally override entry.namespace.default,           // 210\n    // and only copy own properties from entry.exports.                              // 211\n    if (! hasOwn.call(entry.getters, key) &&                                         // 212\n        ! (setDefault && key === \"default\") &&                                       // 213\n        hasOwn.call(entry.exports, key)) {                                           // 214\n      utils.copyKey(key, entry.namespace, entry.exports);                            // 215\n    }                                                                                // 216\n  });                                                                                // 217\n}                                                                                    // 218\n                                                                                     // 219\n// Called by module.runSetters once the module this Entry is managing has            // 220\n// finished loading.                                                                 // 221\nEp.hasLoaded = function () {                                                         // 222\n  if (this._loaded) {                                                                // 223\n    return true;                                                                     // 224\n  }                                                                                  // 225\n                                                                                     // 226\n  var ids = Object.keys(this.ownerModules);                                          // 227\n  var idCount = ids.length;                                                          // 228\n                                                                                     // 229\n  for (var i = 0; i < idCount; ++i) {                                                // 230\n    var owner = this.ownerModules[ids[i]];                                           // 231\n    if (! owner.loaded && owner.exports === this.exports) {                          // 232\n      // At least one owner module whose exports are still ===                       // 233\n      // this.exports has not finished loading, so this this Entry cannot            // 234\n      // be marked as loaded yet.                                                    // 235\n      return false;                                                                  // 236\n    }                                                                                // 237\n  }                                                                                  // 238\n                                                                                     // 239\n  // Set entry._loaded = true only if all the modules in                             // 240\n  // entry.ownerModules that are still associated with entry.exports have            // 241\n  // finished loading.                                                               // 242\n  return this._loaded = true;                                                        // 243\n};                                                                                   // 244\n                                                                                     // 245\n// Called whenever module.exports might have changed, to trigger any                 // 246\n// setters associated with the newly exported values. The names parameter            // 247\n// is optional; without it, all getters and setters will run.                        // 248\nEp.runSetters = function (names) {                                                   // 249\n  // Make sure entry.namespace and module.exports are up to date before we           // 250\n  // call getExportByName(entry, name).                                              // 251\n  this.runGetters(names);                                                            // 252\n                                                                                     // 253\n  // Lazily-initialized object mapping parent module identifiers to parent           // 254\n  // module objects whose setters we might need to run.                              // 255\n  var parents;                                                                       // 256\n                                                                                     // 257\n  forEachSetter(this, names, function (setter, name, value) {                        // 258\n    if (parents === void 0) {                                                        // 259\n      parents = Object.create(null);                                                 // 260\n    }                                                                                // 261\n    parents[setter.parent.id] = setter.parent;                                       // 262\n                                                                                     // 263\n    // The param order for setters is `value` then `name` because the `name`         // 264\n    // param is only used by namespace exports.                                      // 265\n    setter(value, name);                                                             // 266\n  });                                                                                // 267\n                                                                                     // 268\n  if (! parents) {                                                                   // 269\n    return;                                                                          // 270\n  }                                                                                  // 271\n                                                                                     // 272\n  // If any of the setters updated the module.exports of a parent module,            // 273\n  // or updated local variables that are exported by that parent module,             // 274\n  // then we must re-run any setters registered by that parent module.               // 275\n  var parentIDs = Object.keys(parents);                                              // 276\n  var parentIDCount = parentIDs.length;                                              // 277\n                                                                                     // 278\n  for (var i = 0; i < parentIDCount; ++i) {                                          // 279\n    // What happens if parents[parentIDs[id]] === module, or if                      // 280\n    // longer cycles exist in the parent chain? Thanks to our setter.last            // 281\n    // bookkeeping above, the runSetters broadcast will only proceed                 // 282\n    // as far as there are any actual changes to report.                             // 283\n    var parent = parents[parentIDs[i]];                                              // 284\n    var parentEntry = Entry.get(parent.exports);                                     // 285\n    if (parentEntry) {                                                               // 286\n      parentEntry.runSetters();                                                      // 287\n    }                                                                                // 288\n  }                                                                                  // 289\n};                                                                                   // 290\n                                                                                     // 291\nfunction callSetterIfNecessary(setter, name, value, callback) {                      // 292\n  if (name === \"__esModule\") {                                                       // 293\n    // Ignore setters asking for module.exports.__esModule.                          // 294\n    return;                                                                          // 295\n  }                                                                                  // 296\n                                                                                     // 297\n  var shouldCall = false;                                                            // 298\n                                                                                     // 299\n  if (setter.last === void 0) {                                                      // 300\n    setter.last = Object.create(null);                                               // 301\n    // Always call the setter if it has never been called before.                    // 302\n    shouldCall = true;                                                               // 303\n  }                                                                                  // 304\n                                                                                     // 305\n  function changed(name, value) {                                                    // 306\n    var valueToCompare = value;                                                      // 307\n    if (valueToCompare !== valueToCompare) {                                         // 308\n      valueToCompare = NAN;                                                          // 309\n    } else if (valueToCompare === void 0) {                                          // 310\n      valueToCompare = UNDEFINED;                                                    // 311\n    }                                                                                // 312\n                                                                                     // 313\n    if (setter.last[name] === valueToCompare) {                                      // 314\n      return false;                                                                  // 315\n    }                                                                                // 316\n                                                                                     // 317\n    setter.last[name] = valueToCompare;                                              // 318\n    return true;                                                                     // 319\n  }                                                                                  // 320\n                                                                                     // 321\n  if (name === \"*\") {                                                                // 322\n    var keys = safeKeys(value);                                                      // 323\n    var keyCount = keys.length;                                                      // 324\n    for (var i = 0; i < keyCount; ++i) {                                             // 325\n      var key = keys[i];                                                             // 326\n      // Evaluating value[key] is risky because the property might be                // 327\n      // defined by a getter function that logs a deprecation warning (or            // 328\n      // worse) when evaluated. For example, Node uses this trick to                 // 329\n      // display a deprecation warning whenever crypto.createCredentials             // 330\n      // is accessed. Fortunately, when value[key] is defined by a getter            // 331\n      // function, it's enough to check whether the getter function itself           // 332\n      // has changed, since we are careful elsewhere to preserve getters             // 333\n      // rather than prematurely evaluating them.                                    // 334\n      if (changed(key, utils.valueOrGetter(value, key))) {                           // 335\n        shouldCall = true;                                                           // 336\n      }                                                                              // 337\n    }                                                                                // 338\n  } else if (changed(name, value)) {                                                 // 339\n    shouldCall = true;                                                               // 340\n  }                                                                                  // 341\n                                                                                     // 342\n  if (shouldCall) {                                                                  // 343\n    // Only invoke the callback if we have not called this setter                    // 344\n    // (with a value of this name) before, or the current value is                   // 345\n    // different from the last value we passed to this setter.                       // 346\n    return callback(setter, name, value);                                            // 347\n  }                                                                                  // 348\n}                                                                                    // 349\n                                                                                     // 350\n// Invoke the given callback once for every (setter, name, value) that needs to      // 351\n// be called. Note that forEachSetter does not call any setters itself, only the     // 352\n// given callback.                                                                   // 353\nfunction forEachSetter(entry, names, callback) {                                     // 354\n  var needToCheckNames = true;                                                       // 355\n                                                                                     // 356\n  if (names === void 0) {                                                            // 357\n    names = Object.keys(entry.setters);                                              // 358\n    needToCheckNames = false;                                                        // 359\n  }                                                                                  // 360\n                                                                                     // 361\n  var nameCount = names.length;                                                      // 362\n                                                                                     // 363\n  for (var i = 0; i < nameCount; ++i) {                                              // 364\n    var name = names[i];                                                             // 365\n                                                                                     // 366\n    if (needToCheckNames &&                                                          // 367\n        ! hasOwn.call(entry.setters, name)) {                                        // 368\n      continue;                                                                      // 369\n    }                                                                                // 370\n                                                                                     // 371\n    var setters = entry.setters[name];                                               // 372\n    var keys = Object.keys(setters);                                                 // 373\n    var keyCount = keys.length;                                                      // 374\n                                                                                     // 375\n    for (var j = 0; j < keyCount; ++j) {                                             // 376\n      var key = keys[j];                                                             // 377\n      var value = getExportByName(entry, name);                                      // 378\n                                                                                     // 379\n      callSetterIfNecessary(setters[key], name, value, callback);                    // 380\n                                                                                     // 381\n      var getter = entry.getters[name];                                              // 382\n      if (typeof getter === \"function\" &&                                            // 383\n          // Sometimes a getter function will throw because it's called              // 384\n          // before the variable it's supposed to return has been                    // 385\n          // initialized, so we need to know that the getter function has            // 386\n          // run to completion at least once.                                        // 387\n          getter.runCount > 0 &&                                                     // 388\n          getter.constant) {                                                         // 389\n        // If we happen to know that this getter function has run                    // 390\n        // successfully, and will never return a different value, then we            // 391\n        // can forget the corresponding setter, because we've already                // 392\n        // reported that constant value. Note that we can't forget the               // 393\n        // getter, because we need to remember the original value in case            // 394\n        // anyone tampers with entry.exports[name].                                  // 395\n        delete setters[key];                                                         // 396\n      }                                                                              // 397\n    }                                                                                // 398\n  }                                                                                  // 399\n}                                                                                    // 400\n                                                                                     // 401\nfunction getExportByName(entry, name) {                                              // 402\n  if (name === \"*\") {                                                                // 403\n    return entry.namespace;                                                          // 404\n  }                                                                                  // 405\n                                                                                     // 406\n  if (hasOwn.call(entry.namespace, name)) {                                          // 407\n    return entry.namespace[name];                                                    // 408\n  }                                                                                  // 409\n                                                                                     // 410\n  var exported = entry.exports;                                                      // 411\n                                                                                     // 412\n  if (name === \"default\" &&                                                          // 413\n      ! (utils.getESModule(exported) &&                                              // 414\n         \"default\" in exported)) {                                                   // 415\n    return exported;                                                                 // 416\n  }                                                                                  // 417\n                                                                                     // 418\n  if (exported == null) {                                                            // 419\n    return;                                                                          // 420\n  }                                                                                  // 421\n                                                                                     // 422\n  return exported[name];                                                             // 423\n}                                                                                    // 424\n                                                                                     // 425\nfunction makeUniqueKey() {                                                           // 426\n  return Math.random()                                                               // 427\n    .toString(36)                                                                    // 428\n    // Add an incrementing salt to help track key ordering and also                  // 429\n    // absolutely guarantee we never return the same key twice.                      // 430\n    .replace(\"0.\", ++keySalt + \"$\");                                                 // 431\n}                                                                                    // 432\n                                                                                     // 433\nfunction runGetter(entry, name) {                                                    // 434\n  var getter = entry.getters[name];                                                  // 435\n  try {                                                                              // 436\n    var result = getter();                                                           // 437\n    ++getter.runCount;                                                               // 438\n    return result;                                                                   // 439\n  } catch (e) {}                                                                     // 440\n  return GETTER_ERROR;                                                               // 441\n}                                                                                    // 442\n                                                                                     // 443\nmodule.exports = Entry;                                                              // 444\n                                                                                     // 445\n///////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nvar exports = require(\"./node_modules/meteor/modules/client.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.modules = exports, {\n  meteorInstall: meteorInstall\n});\n\n})();\n","servePath":"/packages/modules.js"}]