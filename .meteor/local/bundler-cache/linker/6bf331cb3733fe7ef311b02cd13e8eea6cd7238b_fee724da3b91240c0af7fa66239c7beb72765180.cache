[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\n\n/* Package-scope variables */\nvar d3, b;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/d3/packages/d3.js                                        //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/d3/d3.v3.js                                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nd3 = function() {                                                                                                      // 1\n  var d3 = {                                                                                                           // 2\n    version: \"3.1.4\"                                                                                                   // 3\n  };                                                                                                                   // 4\n  if (!Date.now) Date.now = function() {                                                                               // 5\n    return +new Date();                                                                                                // 6\n  };                                                                                                                   // 7\n  var d3_document = document, d3_window = window;                                                                      // 8\n  try {                                                                                                                // 9\n    d3_document.createElement(\"div\").style.setProperty(\"opacity\", 0, \"\");                                              // 10\n  } catch (error) {                                                                                                    // 11\n    var d3_style_prototype = d3_window.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;\n    d3_style_prototype.setProperty = function(name, value, priority) {                                                 // 13\n      d3_style_setProperty.call(this, name, value + \"\", priority);                                                     // 14\n    };                                                                                                                 // 15\n  }                                                                                                                    // 16\n  d3.ascending = function(a, b) {                                                                                      // 17\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;                                                                  // 18\n  };                                                                                                                   // 19\n  d3.descending = function(a, b) {                                                                                     // 20\n    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;                                                                  // 21\n  };                                                                                                                   // 22\n  d3.min = function(array, f) {                                                                                        // 23\n    var i = -1, n = array.length, a, b;                                                                                // 24\n    if (arguments.length === 1) {                                                                                      // 25\n      while (++i < n && ((a = array[i]) == null || a != a)) a = undefined;                                             // 26\n      while (++i < n) if ((b = array[i]) != null && a > b) a = b;                                                      // 27\n    } else {                                                                                                           // 28\n      while (++i < n && ((a = f.call(array, array[i], i)) == null || a != a)) a = undefined;                           // 29\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;                                    // 30\n    }                                                                                                                  // 31\n    return a;                                                                                                          // 32\n  };                                                                                                                   // 33\n  d3.max = function(array, f) {                                                                                        // 34\n    var i = -1, n = array.length, a, b;                                                                                // 35\n    if (arguments.length === 1) {                                                                                      // 36\n      while (++i < n && ((a = array[i]) == null || a != a)) a = undefined;                                             // 37\n      while (++i < n) if ((b = array[i]) != null && b > a) a = b;                                                      // 38\n    } else {                                                                                                           // 39\n      while (++i < n && ((a = f.call(array, array[i], i)) == null || a != a)) a = undefined;                           // 40\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;                                    // 41\n    }                                                                                                                  // 42\n    return a;                                                                                                          // 43\n  };                                                                                                                   // 44\n  d3.extent = function(array, f) {                                                                                     // 45\n    var i = -1, n = array.length, a, b, c;                                                                             // 46\n    if (arguments.length === 1) {                                                                                      // 47\n      while (++i < n && ((a = c = array[i]) == null || a != a)) a = c = undefined;                                     // 48\n      while (++i < n) if ((b = array[i]) != null) {                                                                    // 49\n        if (a > b) a = b;                                                                                              // 50\n        if (c < b) c = b;                                                                                              // 51\n      }                                                                                                                // 52\n    } else {                                                                                                           // 53\n      while (++i < n && ((a = c = f.call(array, array[i], i)) == null || a != a)) a = undefined;                       // 54\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {                                                  // 55\n        if (a > b) a = b;                                                                                              // 56\n        if (c < b) c = b;                                                                                              // 57\n      }                                                                                                                // 58\n    }                                                                                                                  // 59\n    return [ a, c ];                                                                                                   // 60\n  };                                                                                                                   // 61\n  d3.sum = function(array, f) {                                                                                        // 62\n    var s = 0, n = array.length, a, i = -1;                                                                            // 63\n    if (arguments.length === 1) {                                                                                      // 64\n      while (++i < n) if (!isNaN(a = +array[i])) s += a;                                                               // 65\n    } else {                                                                                                           // 66\n      while (++i < n) if (!isNaN(a = +f.call(array, array[i], i))) s += a;                                             // 67\n    }                                                                                                                  // 68\n    return s;                                                                                                          // 69\n  };                                                                                                                   // 70\n  function d3_number(x) {                                                                                              // 71\n    return x != null && !isNaN(x);                                                                                     // 72\n  }                                                                                                                    // 73\n  d3.mean = function(array, f) {                                                                                       // 74\n    var n = array.length, a, m = 0, i = -1, j = 0;                                                                     // 75\n    if (arguments.length === 1) {                                                                                      // 76\n      while (++i < n) if (d3_number(a = array[i])) m += (a - m) / ++j;                                                 // 77\n    } else {                                                                                                           // 78\n      while (++i < n) if (d3_number(a = f.call(array, array[i], i))) m += (a - m) / ++j;                               // 79\n    }                                                                                                                  // 80\n    return j ? m : undefined;                                                                                          // 81\n  };                                                                                                                   // 82\n  d3.quantile = function(values, p) {                                                                                  // 83\n    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;                             // 84\n    return e ? v + e * (values[h] - v) : v;                                                                            // 85\n  };                                                                                                                   // 86\n  d3.median = function(array, f) {                                                                                     // 87\n    if (arguments.length > 1) array = array.map(f);                                                                    // 88\n    array = array.filter(d3_number);                                                                                   // 89\n    return array.length ? d3.quantile(array.sort(d3.ascending), .5) : undefined;                                       // 90\n  };                                                                                                                   // 91\n  d3.bisector = function(f) {                                                                                          // 92\n    return {                                                                                                           // 93\n      left: function(a, x, lo, hi) {                                                                                   // 94\n        if (arguments.length < 3) lo = 0;                                                                              // 95\n        if (arguments.length < 4) hi = a.length;                                                                       // 96\n        while (lo < hi) {                                                                                              // 97\n          var mid = lo + hi >>> 1;                                                                                     // 98\n          if (f.call(a, a[mid], mid) < x) lo = mid + 1; else hi = mid;                                                 // 99\n        }                                                                                                              // 100\n        return lo;                                                                                                     // 101\n      },                                                                                                               // 102\n      right: function(a, x, lo, hi) {                                                                                  // 103\n        if (arguments.length < 3) lo = 0;                                                                              // 104\n        if (arguments.length < 4) hi = a.length;                                                                       // 105\n        while (lo < hi) {                                                                                              // 106\n          var mid = lo + hi >>> 1;                                                                                     // 107\n          if (x < f.call(a, a[mid], mid)) hi = mid; else lo = mid + 1;                                                 // 108\n        }                                                                                                              // 109\n        return lo;                                                                                                     // 110\n      }                                                                                                                // 111\n    };                                                                                                                 // 112\n  };                                                                                                                   // 113\n  var d3_bisector = d3.bisector(function(d) {                                                                          // 114\n    return d;                                                                                                          // 115\n  });                                                                                                                  // 116\n  d3.bisectLeft = d3_bisector.left;                                                                                    // 117\n  d3.bisect = d3.bisectRight = d3_bisector.right;                                                                      // 118\n  d3.shuffle = function(array) {                                                                                       // 119\n    var m = array.length, t, i;                                                                                        // 120\n    while (m) {                                                                                                        // 121\n      i = Math.random() * m-- | 0;                                                                                     // 122\n      t = array[m], array[m] = array[i], array[i] = t;                                                                 // 123\n    }                                                                                                                  // 124\n    return array;                                                                                                      // 125\n  };                                                                                                                   // 126\n  d3.permute = function(array, indexes) {                                                                              // 127\n    var permutes = [], i = -1, n = indexes.length;                                                                     // 128\n    while (++i < n) permutes[i] = array[indexes[i]];                                                                   // 129\n    return permutes;                                                                                                   // 130\n  };                                                                                                                   // 131\n  d3.zip = function() {                                                                                                // 132\n    if (!(n = arguments.length)) return [];                                                                            // 133\n    for (var i = -1, m = d3.min(arguments, d3_zipLength), zips = new Array(m); ++i < m; ) {                            // 134\n      for (var j = -1, n, zip = zips[i] = new Array(n); ++j < n; ) {                                                   // 135\n        zip[j] = arguments[j][i];                                                                                      // 136\n      }                                                                                                                // 137\n    }                                                                                                                  // 138\n    return zips;                                                                                                       // 139\n  };                                                                                                                   // 140\n  function d3_zipLength(d) {                                                                                           // 141\n    return d.length;                                                                                                   // 142\n  }                                                                                                                    // 143\n  d3.transpose = function(matrix) {                                                                                    // 144\n    return d3.zip.apply(d3, matrix);                                                                                   // 145\n  };                                                                                                                   // 146\n  d3.keys = function(map) {                                                                                            // 147\n    var keys = [];                                                                                                     // 148\n    for (var key in map) keys.push(key);                                                                               // 149\n    return keys;                                                                                                       // 150\n  };                                                                                                                   // 151\n  d3.values = function(map) {                                                                                          // 152\n    var values = [];                                                                                                   // 153\n    for (var key in map) values.push(map[key]);                                                                        // 154\n    return values;                                                                                                     // 155\n  };                                                                                                                   // 156\n  d3.entries = function(map) {                                                                                         // 157\n    var entries = [];                                                                                                  // 158\n    for (var key in map) entries.push({                                                                                // 159\n      key: key,                                                                                                        // 160\n      value: map[key]                                                                                                  // 161\n    });                                                                                                                // 162\n    return entries;                                                                                                    // 163\n  };                                                                                                                   // 164\n  d3.merge = function(arrays) {                                                                                        // 165\n    return Array.prototype.concat.apply([], arrays);                                                                   // 166\n  };                                                                                                                   // 167\n  d3.range = function(start, stop, step) {                                                                             // 168\n    if (arguments.length < 3) {                                                                                        // 169\n      step = 1;                                                                                                        // 170\n      if (arguments.length < 2) {                                                                                      // 171\n        stop = start;                                                                                                  // 172\n        start = 0;                                                                                                     // 173\n      }                                                                                                                // 174\n    }                                                                                                                  // 175\n    if ((stop - start) / step === Infinity) throw new Error(\"infinite range\");                                         // 176\n    var range = [], k = d3_range_integerScale(Math.abs(step)), i = -1, j;                                              // 177\n    start *= k, stop *= k, step *= k;                                                                                  // 178\n    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);\n    return range;                                                                                                      // 180\n  };                                                                                                                   // 181\n  function d3_range_integerScale(x) {                                                                                  // 182\n    var k = 1;                                                                                                         // 183\n    while (x * k % 1) k *= 10;                                                                                         // 184\n    return k;                                                                                                          // 185\n  }                                                                                                                    // 186\n  function d3_class(ctor, properties) {                                                                                // 187\n    try {                                                                                                              // 188\n      for (var key in properties) {                                                                                    // 189\n        Object.defineProperty(ctor.prototype, key, {                                                                   // 190\n          value: properties[key],                                                                                      // 191\n          enumerable: false                                                                                            // 192\n        });                                                                                                            // 193\n      }                                                                                                                // 194\n    } catch (e) {                                                                                                      // 195\n      ctor.prototype = properties;                                                                                     // 196\n    }                                                                                                                  // 197\n  }                                                                                                                    // 198\n  d3.map = function(object) {                                                                                          // 199\n    var map = new d3_Map();                                                                                            // 200\n    for (var key in object) map.set(key, object[key]);                                                                 // 201\n    return map;                                                                                                        // 202\n  };                                                                                                                   // 203\n  function d3_Map() {}                                                                                                 // 204\n  d3_class(d3_Map, {                                                                                                   // 205\n    has: function(key) {                                                                                               // 206\n      return d3_map_prefix + key in this;                                                                              // 207\n    },                                                                                                                 // 208\n    get: function(key) {                                                                                               // 209\n      return this[d3_map_prefix + key];                                                                                // 210\n    },                                                                                                                 // 211\n    set: function(key, value) {                                                                                        // 212\n      return this[d3_map_prefix + key] = value;                                                                        // 213\n    },                                                                                                                 // 214\n    remove: function(key) {                                                                                            // 215\n      key = d3_map_prefix + key;                                                                                       // 216\n      return key in this && delete this[key];                                                                          // 217\n    },                                                                                                                 // 218\n    keys: function() {                                                                                                 // 219\n      var keys = [];                                                                                                   // 220\n      this.forEach(function(key) {                                                                                     // 221\n        keys.push(key);                                                                                                // 222\n      });                                                                                                              // 223\n      return keys;                                                                                                     // 224\n    },                                                                                                                 // 225\n    values: function() {                                                                                               // 226\n      var values = [];                                                                                                 // 227\n      this.forEach(function(key, value) {                                                                              // 228\n        values.push(value);                                                                                            // 229\n      });                                                                                                              // 230\n      return values;                                                                                                   // 231\n    },                                                                                                                 // 232\n    entries: function() {                                                                                              // 233\n      var entries = [];                                                                                                // 234\n      this.forEach(function(key, value) {                                                                              // 235\n        entries.push({                                                                                                 // 236\n          key: key,                                                                                                    // 237\n          value: value                                                                                                 // 238\n        });                                                                                                            // 239\n      });                                                                                                              // 240\n      return entries;                                                                                                  // 241\n    },                                                                                                                 // 242\n    forEach: function(f) {                                                                                             // 243\n      for (var key in this) {                                                                                          // 244\n        if (key.charCodeAt(0) === d3_map_prefixCode) {                                                                 // 245\n          f.call(this, key.substring(1), this[key]);                                                                   // 246\n        }                                                                                                              // 247\n      }                                                                                                                // 248\n    }                                                                                                                  // 249\n  });                                                                                                                  // 250\n  var d3_map_prefix = \"\\0\", d3_map_prefixCode = d3_map_prefix.charCodeAt(0);                                           // 251\n  d3.nest = function() {                                                                                               // 252\n    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;                                                       // 253\n    function map(mapType, array, depth) {                                                                              // 254\n      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;\n      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values; // 256\n      while (++i < n) {                                                                                                // 257\n        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {                                             // 258\n          values.push(object);                                                                                         // 259\n        } else {                                                                                                       // 260\n          valuesByKey.set(keyValue, [ object ]);                                                                       // 261\n        }                                                                                                              // 262\n      }                                                                                                                // 263\n      if (mapType) {                                                                                                   // 264\n        object = mapType();                                                                                            // 265\n        setter = function(keyValue, values) {                                                                          // 266\n          object.set(keyValue, map(mapType, values, depth));                                                           // 267\n        };                                                                                                             // 268\n      } else {                                                                                                         // 269\n        object = {};                                                                                                   // 270\n        setter = function(keyValue, values) {                                                                          // 271\n          object[keyValue] = map(mapType, values, depth);                                                              // 272\n        };                                                                                                             // 273\n      }                                                                                                                // 274\n      valuesByKey.forEach(setter);                                                                                     // 275\n      return object;                                                                                                   // 276\n    }                                                                                                                  // 277\n    function entries(map, depth) {                                                                                     // 278\n      if (depth >= keys.length) return map;                                                                            // 279\n      var array = [], sortKey = sortKeys[depth++];                                                                     // 280\n      map.forEach(function(key, keyMap) {                                                                              // 281\n        array.push({                                                                                                   // 282\n          key: key,                                                                                                    // 283\n          values: entries(keyMap, depth)                                                                               // 284\n        });                                                                                                            // 285\n      });                                                                                                              // 286\n      return sortKey ? array.sort(function(a, b) {                                                                     // 287\n        return sortKey(a.key, b.key);                                                                                  // 288\n      }) : array;                                                                                                      // 289\n    }                                                                                                                  // 290\n    nest.map = function(array, mapType) {                                                                              // 291\n      return map(mapType, array, 0);                                                                                   // 292\n    };                                                                                                                 // 293\n    nest.entries = function(array) {                                                                                   // 294\n      return entries(map(d3.map, array, 0), 0);                                                                        // 295\n    };                                                                                                                 // 296\n    nest.key = function(d) {                                                                                           // 297\n      keys.push(d);                                                                                                    // 298\n      return nest;                                                                                                     // 299\n    };                                                                                                                 // 300\n    nest.sortKeys = function(order) {                                                                                  // 301\n      sortKeys[keys.length - 1] = order;                                                                               // 302\n      return nest;                                                                                                     // 303\n    };                                                                                                                 // 304\n    nest.sortValues = function(order) {                                                                                // 305\n      sortValues = order;                                                                                              // 306\n      return nest;                                                                                                     // 307\n    };                                                                                                                 // 308\n    nest.rollup = function(f) {                                                                                        // 309\n      rollup = f;                                                                                                      // 310\n      return nest;                                                                                                     // 311\n    };                                                                                                                 // 312\n    return nest;                                                                                                       // 313\n  };                                                                                                                   // 314\n  d3.set = function(array) {                                                                                           // 315\n    var set = new d3_Set();                                                                                            // 316\n    if (array) for (var i = 0; i < array.length; i++) set.add(array[i]);                                               // 317\n    return set;                                                                                                        // 318\n  };                                                                                                                   // 319\n  function d3_Set() {}                                                                                                 // 320\n  d3_class(d3_Set, {                                                                                                   // 321\n    has: function(value) {                                                                                             // 322\n      return d3_map_prefix + value in this;                                                                            // 323\n    },                                                                                                                 // 324\n    add: function(value) {                                                                                             // 325\n      this[d3_map_prefix + value] = true;                                                                              // 326\n      return value;                                                                                                    // 327\n    },                                                                                                                 // 328\n    remove: function(value) {                                                                                          // 329\n      value = d3_map_prefix + value;                                                                                   // 330\n      return value in this && delete this[value];                                                                      // 331\n    },                                                                                                                 // 332\n    values: function() {                                                                                               // 333\n      var values = [];                                                                                                 // 334\n      this.forEach(function(value) {                                                                                   // 335\n        values.push(value);                                                                                            // 336\n      });                                                                                                              // 337\n      return values;                                                                                                   // 338\n    },                                                                                                                 // 339\n    forEach: function(f) {                                                                                             // 340\n      for (var value in this) {                                                                                        // 341\n        if (value.charCodeAt(0) === d3_map_prefixCode) {                                                               // 342\n          f.call(this, value.substring(1));                                                                            // 343\n        }                                                                                                              // 344\n      }                                                                                                                // 345\n    }                                                                                                                  // 346\n  });                                                                                                                  // 347\n  d3.behavior = {};                                                                                                    // 348\n  d3.rebind = function(target, source) {                                                                               // 349\n    var i = 1, n = arguments.length, method;                                                                           // 350\n    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);                         // 351\n    return target;                                                                                                     // 352\n  };                                                                                                                   // 353\n  function d3_rebind(target, source, method) {                                                                         // 354\n    return function() {                                                                                                // 355\n      var value = method.apply(source, arguments);                                                                     // 356\n      return value === source ? target : value;                                                                        // 357\n    };                                                                                                                 // 358\n  }                                                                                                                    // 359\n  d3.dispatch = function() {                                                                                           // 360\n    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;                                                    // 361\n    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);                                              // 362\n    return dispatch;                                                                                                   // 363\n  };                                                                                                                   // 364\n  function d3_dispatch() {}                                                                                            // 365\n  d3_dispatch.prototype.on = function(type, listener) {                                                                // 366\n    var i = type.indexOf(\".\"), name = \"\";                                                                              // 367\n    if (i >= 0) {                                                                                                      // 368\n      name = type.substring(i + 1);                                                                                    // 369\n      type = type.substring(0, i);                                                                                     // 370\n    }                                                                                                                  // 371\n    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);                       // 372\n    if (arguments.length === 2) {                                                                                      // 373\n      if (listener == null) for (type in this) {                                                                       // 374\n        if (this.hasOwnProperty(type)) this[type].on(name, null);                                                      // 375\n      }                                                                                                                // 376\n      return this;                                                                                                     // 377\n    }                                                                                                                  // 378\n  };                                                                                                                   // 379\n  function d3_dispatch_event(dispatch) {                                                                               // 380\n    var listeners = [], listenerByName = new d3_Map();                                                                 // 381\n    function event() {                                                                                                 // 382\n      var z = listeners, i = -1, n = z.length, l;                                                                      // 383\n      while (++i < n) if (l = z[i].on) l.apply(this, arguments);                                                       // 384\n      return dispatch;                                                                                                 // 385\n    }                                                                                                                  // 386\n    event.on = function(name, listener) {                                                                              // 387\n      var l = listenerByName.get(name), i;                                                                             // 388\n      if (arguments.length < 2) return l && l.on;                                                                      // 389\n      if (l) {                                                                                                         // 390\n        l.on = null;                                                                                                   // 391\n        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));                       // 392\n        listenerByName.remove(name);                                                                                   // 393\n      }                                                                                                                // 394\n      if (listener) listeners.push(listenerByName.set(name, {                                                          // 395\n        on: listener                                                                                                   // 396\n      }));                                                                                                             // 397\n      return dispatch;                                                                                                 // 398\n    };                                                                                                                 // 399\n    return event;                                                                                                      // 400\n  }                                                                                                                    // 401\n  d3.event = null;                                                                                                     // 402\n  function d3_eventCancel() {                                                                                          // 403\n    d3.event.stopPropagation();                                                                                        // 404\n    d3.event.preventDefault();                                                                                         // 405\n  }                                                                                                                    // 406\n  function d3_eventSource() {                                                                                          // 407\n    var e = d3.event, s;                                                                                               // 408\n    while (s = e.sourceEvent) e = s;                                                                                   // 409\n    return e;                                                                                                          // 410\n  }                                                                                                                    // 411\n  function d3_eventDispatch(target) {                                                                                  // 412\n    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;                                                     // 413\n    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);                                              // 414\n    dispatch.of = function(thiz, argumentz) {                                                                          // 415\n      return function(e1) {                                                                                            // 416\n        try {                                                                                                          // 417\n          var e0 = e1.sourceEvent = d3.event;                                                                          // 418\n          e1.target = target;                                                                                          // 419\n          d3.event = e1;                                                                                               // 420\n          dispatch[e1.type].apply(thiz, argumentz);                                                                    // 421\n        } finally {                                                                                                    // 422\n          d3.event = e0;                                                                                               // 423\n        }                                                                                                              // 424\n      };                                                                                                               // 425\n    };                                                                                                                 // 426\n    return dispatch;                                                                                                   // 427\n  }                                                                                                                    // 428\n  d3.mouse = function(container) {                                                                                     // 429\n    return d3_mousePoint(container, d3_eventSource());                                                                 // 430\n  };                                                                                                                   // 431\n  var d3_mouse_bug44083 = /WebKit/.test(d3_window.navigator.userAgent) ? -1 : 0;                                       // 432\n  function d3_mousePoint(container, e) {                                                                               // 433\n    var svg = container.ownerSVGElement || container;                                                                  // 434\n    if (svg.createSVGPoint) {                                                                                          // 435\n      var point = svg.createSVGPoint();                                                                                // 436\n      if (d3_mouse_bug44083 < 0 && (d3_window.scrollX || d3_window.scrollY)) {                                         // 437\n        svg = d3.select(d3_document.body).append(\"svg\").style(\"position\", \"absolute\").style(\"top\", 0).style(\"left\", 0);\n        var ctm = svg[0][0].getScreenCTM();                                                                            // 439\n        d3_mouse_bug44083 = !(ctm.f || ctm.e);                                                                         // 440\n        svg.remove();                                                                                                  // 441\n      }                                                                                                                // 442\n      if (d3_mouse_bug44083) {                                                                                         // 443\n        point.x = e.pageX;                                                                                             // 444\n        point.y = e.pageY;                                                                                             // 445\n      } else {                                                                                                         // 446\n        point.x = e.clientX;                                                                                           // 447\n        point.y = e.clientY;                                                                                           // 448\n      }                                                                                                                // 449\n      point = point.matrixTransform(container.getScreenCTM().inverse());                                               // 450\n      return [ point.x, point.y ];                                                                                     // 451\n    }                                                                                                                  // 452\n    var rect = container.getBoundingClientRect();                                                                      // 453\n    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];               // 454\n  }                                                                                                                    // 455\n  var d3_array = d3_arraySlice;                                                                                        // 456\n  function d3_arrayCopy(pseudoarray) {                                                                                 // 457\n    var i = -1, n = pseudoarray.length, array = [];                                                                    // 458\n    while (++i < n) array.push(pseudoarray[i]);                                                                        // 459\n    return array;                                                                                                      // 460\n  }                                                                                                                    // 461\n  function d3_arraySlice(pseudoarray) {                                                                                // 462\n    return Array.prototype.slice.call(pseudoarray);                                                                    // 463\n  }                                                                                                                    // 464\n  try {                                                                                                                // 465\n    d3_array(d3_document.documentElement.childNodes)[0].nodeType;                                                      // 466\n  } catch (e) {                                                                                                        // 467\n    d3_array = d3_arrayCopy;                                                                                           // 468\n  }                                                                                                                    // 469\n  var d3_arraySubclass = [].__proto__ ? function(array, prototype) {                                                   // 470\n    array.__proto__ = prototype;                                                                                       // 471\n  } : function(array, prototype) {                                                                                     // 472\n    for (var property in prototype) array[property] = prototype[property];                                             // 473\n  };                                                                                                                   // 474\n  d3.touches = function(container, touches) {                                                                          // 475\n    if (arguments.length < 2) touches = d3_eventSource().touches;                                                      // 476\n    return touches ? d3_array(touches).map(function(touch) {                                                           // 477\n      var point = d3_mousePoint(container, touch);                                                                     // 478\n      point.identifier = touch.identifier;                                                                             // 479\n      return point;                                                                                                    // 480\n    }) : [];                                                                                                           // 481\n  };                                                                                                                   // 482\n  d3.behavior.drag = function() {                                                                                      // 483\n    var event = d3_eventDispatch(drag, \"drag\", \"dragstart\", \"dragend\"), origin = null;                                 // 484\n    function drag() {                                                                                                  // 485\n      this.on(\"mousedown.drag\", mousedown).on(\"touchstart.drag\", mousedown);                                           // 486\n    }                                                                                                                  // 487\n    function mousedown() {                                                                                             // 488\n      var target = this, event_ = event.of(target, arguments), eventTarget = d3.event.target, touchId = d3.event.touches ? d3.event.changedTouches[0].identifier : null, offset, origin_ = point(), moved = 0;\n      var w = d3.select(d3_window).on(touchId != null ? \"touchmove.drag-\" + touchId : \"mousemove.drag\", dragmove).on(touchId != null ? \"touchend.drag-\" + touchId : \"mouseup.drag\", dragend, true);\n      if (origin) {                                                                                                    // 491\n        offset = origin.apply(target, arguments);                                                                      // 492\n        offset = [ offset.x - origin_[0], offset.y - origin_[1] ];                                                     // 493\n      } else {                                                                                                         // 494\n        offset = [ 0, 0 ];                                                                                             // 495\n      }                                                                                                                // 496\n      if (touchId == null) d3_eventCancel();                                                                           // 497\n      event_({                                                                                                         // 498\n        type: \"dragstart\"                                                                                              // 499\n      });                                                                                                              // 500\n      function point() {                                                                                               // 501\n        var p = target.parentNode;                                                                                     // 502\n        return touchId != null ? d3.touches(p).filter(function(p) {                                                    // 503\n          return p.identifier === touchId;                                                                             // 504\n        })[0] : d3.mouse(p);                                                                                           // 505\n      }                                                                                                                // 506\n      function dragmove() {                                                                                            // 507\n        if (!target.parentNode) return dragend();                                                                      // 508\n        var p = point(), dx = p[0] - origin_[0], dy = p[1] - origin_[1];                                               // 509\n        moved |= dx | dy;                                                                                              // 510\n        origin_ = p;                                                                                                   // 511\n        d3_eventCancel();                                                                                              // 512\n        event_({                                                                                                       // 513\n          type: \"drag\",                                                                                                // 514\n          x: p[0] + offset[0],                                                                                         // 515\n          y: p[1] + offset[1],                                                                                         // 516\n          dx: dx,                                                                                                      // 517\n          dy: dy                                                                                                       // 518\n        });                                                                                                            // 519\n      }                                                                                                                // 520\n      function dragend() {                                                                                             // 521\n        event_({                                                                                                       // 522\n          type: \"dragend\"                                                                                              // 523\n        });                                                                                                            // 524\n        if (moved) {                                                                                                   // 525\n          d3_eventCancel();                                                                                            // 526\n          if (d3.event.target === eventTarget) w.on(\"click.drag\", click, true);                                        // 527\n        }                                                                                                              // 528\n        w.on(touchId != null ? \"touchmove.drag-\" + touchId : \"mousemove.drag\", null).on(touchId != null ? \"touchend.drag-\" + touchId : \"mouseup.drag\", null);\n      }                                                                                                                // 530\n      function click() {                                                                                               // 531\n        d3_eventCancel();                                                                                              // 532\n        w.on(\"click.drag\", null);                                                                                      // 533\n      }                                                                                                                // 534\n    }                                                                                                                  // 535\n    drag.origin = function(x) {                                                                                        // 536\n      if (!arguments.length) return origin;                                                                            // 537\n      origin = x;                                                                                                      // 538\n      return drag;                                                                                                     // 539\n    };                                                                                                                 // 540\n    return d3.rebind(drag, event, \"on\");                                                                               // 541\n  };                                                                                                                   // 542\n  function d3_selection(groups) {                                                                                      // 543\n    d3_arraySubclass(groups, d3_selectionPrototype);                                                                   // 544\n    return groups;                                                                                                     // 545\n  }                                                                                                                    // 546\n  var d3_select = function(s, n) {                                                                                     // 547\n    return n.querySelector(s);                                                                                         // 548\n  }, d3_selectAll = function(s, n) {                                                                                   // 549\n    return n.querySelectorAll(s);                                                                                      // 550\n  }, d3_selectRoot = d3_document.documentElement, d3_selectMatcher = d3_selectRoot.matchesSelector || d3_selectRoot.webkitMatchesSelector || d3_selectRoot.mozMatchesSelector || d3_selectRoot.msMatchesSelector || d3_selectRoot.oMatchesSelector, d3_selectMatches = function(n, s) {\n    return d3_selectMatcher.call(n, s);                                                                                // 552\n  };                                                                                                                   // 553\n  if (typeof Sizzle === \"function\") {                                                                                  // 554\n    d3_select = function(s, n) {                                                                                       // 555\n      return Sizzle(s, n)[0] || null;                                                                                  // 556\n    };                                                                                                                 // 557\n    d3_selectAll = function(s, n) {                                                                                    // 558\n      return Sizzle.uniqueSort(Sizzle(s, n));                                                                          // 559\n    };                                                                                                                 // 560\n    d3_selectMatches = Sizzle.matchesSelector;                                                                         // 561\n  }                                                                                                                    // 562\n  var d3_selectionPrototype = [];                                                                                      // 563\n  d3.selection = function() {                                                                                          // 564\n    return d3_selectionRoot;                                                                                           // 565\n  };                                                                                                                   // 566\n  d3.selection.prototype = d3_selectionPrototype;                                                                      // 567\n  d3_selectionPrototype.select = function(selector) {                                                                  // 568\n    var subgroups = [], subgroup, subnode, group, node;                                                                // 569\n    if (typeof selector !== \"function\") selector = d3_selection_selector(selector);                                    // 570\n    for (var j = -1, m = this.length; ++j < m; ) {                                                                     // 571\n      subgroups.push(subgroup = []);                                                                                   // 572\n      subgroup.parentNode = (group = this[j]).parentNode;                                                              // 573\n      for (var i = -1, n = group.length; ++i < n; ) {                                                                  // 574\n        if (node = group[i]) {                                                                                         // 575\n          subgroup.push(subnode = selector.call(node, node.__data__, i));                                              // 576\n          if (subnode && \"__data__\" in node) subnode.__data__ = node.__data__;                                         // 577\n        } else {                                                                                                       // 578\n          subgroup.push(null);                                                                                         // 579\n        }                                                                                                              // 580\n      }                                                                                                                // 581\n    }                                                                                                                  // 582\n    return d3_selection(subgroups);                                                                                    // 583\n  };                                                                                                                   // 584\n  function d3_selection_selector(selector) {                                                                           // 585\n    return function() {                                                                                                // 586\n      return d3_select(selector, this);                                                                                // 587\n    };                                                                                                                 // 588\n  }                                                                                                                    // 589\n  d3_selectionPrototype.selectAll = function(selector) {                                                               // 590\n    var subgroups = [], subgroup, node;                                                                                // 591\n    if (typeof selector !== \"function\") selector = d3_selection_selectorAll(selector);                                 // 592\n    for (var j = -1, m = this.length; ++j < m; ) {                                                                     // 593\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {                                                 // 594\n        if (node = group[i]) {                                                                                         // 595\n          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i)));                                  // 596\n          subgroup.parentNode = node;                                                                                  // 597\n        }                                                                                                              // 598\n      }                                                                                                                // 599\n    }                                                                                                                  // 600\n    return d3_selection(subgroups);                                                                                    // 601\n  };                                                                                                                   // 602\n  function d3_selection_selectorAll(selector) {                                                                        // 603\n    return function() {                                                                                                // 604\n      return d3_selectAll(selector, this);                                                                             // 605\n    };                                                                                                                 // 606\n  }                                                                                                                    // 607\n  var d3_nsPrefix = {                                                                                                  // 608\n    svg: \"http://www.w3.org/2000/svg\",                                                                                 // 609\n    xhtml: \"http://www.w3.org/1999/xhtml\",                                                                             // 610\n    xlink: \"http://www.w3.org/1999/xlink\",                                                                             // 611\n    xml: \"http://www.w3.org/XML/1998/namespace\",                                                                       // 612\n    xmlns: \"http://www.w3.org/2000/xmlns/\"                                                                             // 613\n  };                                                                                                                   // 614\n  d3.ns = {                                                                                                            // 615\n    prefix: d3_nsPrefix,                                                                                               // 616\n    qualify: function(name) {                                                                                          // 617\n      var i = name.indexOf(\":\"), prefix = name;                                                                        // 618\n      if (i >= 0) {                                                                                                    // 619\n        prefix = name.substring(0, i);                                                                                 // 620\n        name = name.substring(i + 1);                                                                                  // 621\n      }                                                                                                                // 622\n      return d3_nsPrefix.hasOwnProperty(prefix) ? {                                                                    // 623\n        space: d3_nsPrefix[prefix],                                                                                    // 624\n        local: name                                                                                                    // 625\n      } : name;                                                                                                        // 626\n    }                                                                                                                  // 627\n  };                                                                                                                   // 628\n  d3_selectionPrototype.attr = function(name, value) {                                                                 // 629\n    if (arguments.length < 2) {                                                                                        // 630\n      if (typeof name === \"string\") {                                                                                  // 631\n        var node = this.node();                                                                                        // 632\n        name = d3.ns.qualify(name);                                                                                    // 633\n        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);                     // 634\n      }                                                                                                                // 635\n      for (value in name) this.each(d3_selection_attr(value, name[value]));                                            // 636\n      return this;                                                                                                     // 637\n    }                                                                                                                  // 638\n    return this.each(d3_selection_attr(name, value));                                                                  // 639\n  };                                                                                                                   // 640\n  function d3_selection_attr(name, value) {                                                                            // 641\n    name = d3.ns.qualify(name);                                                                                        // 642\n    function attrNull() {                                                                                              // 643\n      this.removeAttribute(name);                                                                                      // 644\n    }                                                                                                                  // 645\n    function attrNullNS() {                                                                                            // 646\n      this.removeAttributeNS(name.space, name.local);                                                                  // 647\n    }                                                                                                                  // 648\n    function attrConstant() {                                                                                          // 649\n      this.setAttribute(name, value);                                                                                  // 650\n    }                                                                                                                  // 651\n    function attrConstantNS() {                                                                                        // 652\n      this.setAttributeNS(name.space, name.local, value);                                                              // 653\n    }                                                                                                                  // 654\n    function attrFunction() {                                                                                          // 655\n      var x = value.apply(this, arguments);                                                                            // 656\n      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);                                      // 657\n    }                                                                                                                  // 658\n    function attrFunctionNS() {                                                                                        // 659\n      var x = value.apply(this, arguments);                                                                            // 660\n      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);\n    }                                                                                                                  // 662\n    return value == null ? name.local ? attrNullNS : attrNull : typeof value === \"function\" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;\n  }                                                                                                                    // 664\n  function d3_collapse(s) {                                                                                            // 665\n    return s.trim().replace(/\\s+/g, \" \");                                                                              // 666\n  }                                                                                                                    // 667\n  d3.requote = function(s) {                                                                                           // 668\n    return s.replace(d3_requote_re, \"\\\\$&\");                                                                           // 669\n  };                                                                                                                   // 670\n  var d3_requote_re = /[\\\\\\^\\$\\*\\+\\?\\|\\[\\]\\(\\)\\.\\{\\}]/g;                                                               // 671\n  d3_selectionPrototype.classed = function(name, value) {                                                              // 672\n    if (arguments.length < 2) {                                                                                        // 673\n      if (typeof name === \"string\") {                                                                                  // 674\n        var node = this.node(), n = (name = name.trim().split(/^|\\s+/g)).length, i = -1;                               // 675\n        if (value = node.classList) {                                                                                  // 676\n          while (++i < n) if (!value.contains(name[i])) return false;                                                  // 677\n        } else {                                                                                                       // 678\n          value = node.getAttribute(\"class\");                                                                          // 679\n          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;                              // 680\n        }                                                                                                              // 681\n        return true;                                                                                                   // 682\n      }                                                                                                                // 683\n      for (value in name) this.each(d3_selection_classed(value, name[value]));                                         // 684\n      return this;                                                                                                     // 685\n    }                                                                                                                  // 686\n    return this.each(d3_selection_classed(name, value));                                                               // 687\n  };                                                                                                                   // 688\n  function d3_selection_classedRe(name) {                                                                              // 689\n    return new RegExp(\"(?:^|\\\\s+)\" + d3.requote(name) + \"(?:\\\\s+|$)\", \"g\");                                            // 690\n  }                                                                                                                    // 691\n  function d3_selection_classed(name, value) {                                                                         // 692\n    name = name.trim().split(/\\s+/).map(d3_selection_classedName);                                                     // 693\n    var n = name.length;                                                                                               // 694\n    function classedConstant() {                                                                                       // 695\n      var i = -1;                                                                                                      // 696\n      while (++i < n) name[i](this, value);                                                                            // 697\n    }                                                                                                                  // 698\n    function classedFunction() {                                                                                       // 699\n      var i = -1, x = value.apply(this, arguments);                                                                    // 700\n      while (++i < n) name[i](this, x);                                                                                // 701\n    }                                                                                                                  // 702\n    return typeof value === \"function\" ? classedFunction : classedConstant;                                            // 703\n  }                                                                                                                    // 704\n  function d3_selection_classedName(name) {                                                                            // 705\n    var re = d3_selection_classedRe(name);                                                                             // 706\n    return function(node, value) {                                                                                     // 707\n      if (c = node.classList) return value ? c.add(name) : c.remove(name);                                             // 708\n      var c = node.getAttribute(\"class\") || \"\";                                                                        // 709\n      if (value) {                                                                                                     // 710\n        re.lastIndex = 0;                                                                                              // 711\n        if (!re.test(c)) node.setAttribute(\"class\", d3_collapse(c + \" \" + name));                                      // 712\n      } else {                                                                                                         // 713\n        node.setAttribute(\"class\", d3_collapse(c.replace(re, \" \")));                                                   // 714\n      }                                                                                                                // 715\n    };                                                                                                                 // 716\n  }                                                                                                                    // 717\n  d3_selectionPrototype.style = function(name, value, priority) {                                                      // 718\n    var n = arguments.length;                                                                                          // 719\n    if (n < 3) {                                                                                                       // 720\n      if (typeof name !== \"string\") {                                                                                  // 721\n        if (n < 2) value = \"\";                                                                                         // 722\n        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));                         // 723\n        return this;                                                                                                   // 724\n      }                                                                                                                // 725\n      if (n < 2) return d3_window.getComputedStyle(this.node(), null).getPropertyValue(name);                          // 726\n      priority = \"\";                                                                                                   // 727\n    }                                                                                                                  // 728\n    return this.each(d3_selection_style(name, value, priority));                                                       // 729\n  };                                                                                                                   // 730\n  function d3_selection_style(name, value, priority) {                                                                 // 731\n    function styleNull() {                                                                                             // 732\n      this.style.removeProperty(name);                                                                                 // 733\n    }                                                                                                                  // 734\n    function styleConstant() {                                                                                         // 735\n      this.style.setProperty(name, value, priority);                                                                   // 736\n    }                                                                                                                  // 737\n    function styleFunction() {                                                                                         // 738\n      var x = value.apply(this, arguments);                                                                            // 739\n      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);                  // 740\n    }                                                                                                                  // 741\n    return value == null ? styleNull : typeof value === \"function\" ? styleFunction : styleConstant;                    // 742\n  }                                                                                                                    // 743\n  d3_selectionPrototype.property = function(name, value) {                                                             // 744\n    if (arguments.length < 2) {                                                                                        // 745\n      if (typeof name === \"string\") return this.node()[name];                                                          // 746\n      for (value in name) this.each(d3_selection_property(value, name[value]));                                        // 747\n      return this;                                                                                                     // 748\n    }                                                                                                                  // 749\n    return this.each(d3_selection_property(name, value));                                                              // 750\n  };                                                                                                                   // 751\n  function d3_selection_property(name, value) {                                                                        // 752\n    function propertyNull() {                                                                                          // 753\n      delete this[name];                                                                                               // 754\n    }                                                                                                                  // 755\n    function propertyConstant() {                                                                                      // 756\n      this[name] = value;                                                                                              // 757\n    }                                                                                                                  // 758\n    function propertyFunction() {                                                                                      // 759\n      var x = value.apply(this, arguments);                                                                            // 760\n      if (x == null) delete this[name]; else this[name] = x;                                                           // 761\n    }                                                                                                                  // 762\n    return value == null ? propertyNull : typeof value === \"function\" ? propertyFunction : propertyConstant;           // 763\n  }                                                                                                                    // 764\n  d3_selectionPrototype.text = function(value) {                                                                       // 765\n    return arguments.length ? this.each(typeof value === \"function\" ? function() {                                     // 766\n      var v = value.apply(this, arguments);                                                                            // 767\n      this.textContent = v == null ? \"\" : v;                                                                           // 768\n    } : value == null ? function() {                                                                                   // 769\n      this.textContent = \"\";                                                                                           // 770\n    } : function() {                                                                                                   // 771\n      this.textContent = value;                                                                                        // 772\n    }) : this.node().textContent;                                                                                      // 773\n  };                                                                                                                   // 774\n  d3_selectionPrototype.html = function(value) {                                                                       // 775\n    return arguments.length ? this.each(typeof value === \"function\" ? function() {                                     // 776\n      var v = value.apply(this, arguments);                                                                            // 777\n      this.innerHTML = v == null ? \"\" : v;                                                                             // 778\n    } : value == null ? function() {                                                                                   // 779\n      this.innerHTML = \"\";                                                                                             // 780\n    } : function() {                                                                                                   // 781\n      this.innerHTML = value;                                                                                          // 782\n    }) : this.node().innerHTML;                                                                                        // 783\n  };                                                                                                                   // 784\n  d3_selectionPrototype.append = function(name) {                                                                      // 785\n    name = d3.ns.qualify(name);                                                                                        // 786\n    function append() {                                                                                                // 787\n      return this.appendChild(d3_document.createElementNS(this.namespaceURI, name));                                   // 788\n    }                                                                                                                  // 789\n    function appendNS() {                                                                                              // 790\n      return this.appendChild(d3_document.createElementNS(name.space, name.local));                                    // 791\n    }                                                                                                                  // 792\n    return this.select(name.local ? appendNS : append);                                                                // 793\n  };                                                                                                                   // 794\n  d3_selectionPrototype.insert = function(name, before) {                                                              // 795\n    name = d3.ns.qualify(name);                                                                                        // 796\n    if (typeof before !== \"function\") before = d3_selection_selector(before);                                          // 797\n    function insert(d, i) {                                                                                            // 798\n      return this.insertBefore(d3_document.createElementNS(this.namespaceURI, name), before.call(this, d, i));         // 799\n    }                                                                                                                  // 800\n    function insertNS(d, i) {                                                                                          // 801\n      return this.insertBefore(d3_document.createElementNS(name.space, name.local), before.call(this, d, i));          // 802\n    }                                                                                                                  // 803\n    return this.select(name.local ? insertNS : insert);                                                                // 804\n  };                                                                                                                   // 805\n  d3_selectionPrototype.remove = function() {                                                                          // 806\n    return this.each(function() {                                                                                      // 807\n      var parent = this.parentNode;                                                                                    // 808\n      if (parent) parent.removeChild(this);                                                                            // 809\n    });                                                                                                                // 810\n  };                                                                                                                   // 811\n  d3_selectionPrototype.data = function(value, key) {                                                                  // 812\n    var i = -1, n = this.length, group, node;                                                                          // 813\n    if (!arguments.length) {                                                                                           // 814\n      value = new Array(n = (group = this[0]).length);                                                                 // 815\n      while (++i < n) {                                                                                                // 816\n        if (node = group[i]) {                                                                                         // 817\n          value[i] = node.__data__;                                                                                    // 818\n        }                                                                                                              // 819\n      }                                                                                                                // 820\n      return value;                                                                                                    // 821\n    }                                                                                                                  // 822\n    function bind(group, groupData) {                                                                                  // 823\n      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;\n      if (key) {                                                                                                       // 825\n        var nodeByKeyValue = new d3_Map(), dataByKeyValue = new d3_Map(), keyValues = [], keyValue;                    // 826\n        for (i = -1; ++i < n; ) {                                                                                      // 827\n          keyValue = key.call(node = group[i], node.__data__, i);                                                      // 828\n          if (nodeByKeyValue.has(keyValue)) {                                                                          // 829\n            exitNodes[i] = node;                                                                                       // 830\n          } else {                                                                                                     // 831\n            nodeByKeyValue.set(keyValue, node);                                                                        // 832\n          }                                                                                                            // 833\n          keyValues.push(keyValue);                                                                                    // 834\n        }                                                                                                              // 835\n        for (i = -1; ++i < m; ) {                                                                                      // 836\n          keyValue = key.call(groupData, nodeData = groupData[i], i);                                                  // 837\n          if (node = nodeByKeyValue.get(keyValue)) {                                                                   // 838\n            updateNodes[i] = node;                                                                                     // 839\n            node.__data__ = nodeData;                                                                                  // 840\n          } else if (!dataByKeyValue.has(keyValue)) {                                                                  // 841\n            enterNodes[i] = d3_selection_dataNode(nodeData);                                                           // 842\n          }                                                                                                            // 843\n          dataByKeyValue.set(keyValue, nodeData);                                                                      // 844\n          nodeByKeyValue.remove(keyValue);                                                                             // 845\n        }                                                                                                              // 846\n        for (i = -1; ++i < n; ) {                                                                                      // 847\n          if (nodeByKeyValue.has(keyValues[i])) {                                                                      // 848\n            exitNodes[i] = group[i];                                                                                   // 849\n          }                                                                                                            // 850\n        }                                                                                                              // 851\n      } else {                                                                                                         // 852\n        for (i = -1; ++i < n0; ) {                                                                                     // 853\n          node = group[i];                                                                                             // 854\n          nodeData = groupData[i];                                                                                     // 855\n          if (node) {                                                                                                  // 856\n            node.__data__ = nodeData;                                                                                  // 857\n            updateNodes[i] = node;                                                                                     // 858\n          } else {                                                                                                     // 859\n            enterNodes[i] = d3_selection_dataNode(nodeData);                                                           // 860\n          }                                                                                                            // 861\n        }                                                                                                              // 862\n        for (;i < m; ++i) {                                                                                            // 863\n          enterNodes[i] = d3_selection_dataNode(groupData[i]);                                                         // 864\n        }                                                                                                              // 865\n        for (;i < n; ++i) {                                                                                            // 866\n          exitNodes[i] = group[i];                                                                                     // 867\n        }                                                                                                              // 868\n      }                                                                                                                // 869\n      enterNodes.update = updateNodes;                                                                                 // 870\n      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;                        // 871\n      enter.push(enterNodes);                                                                                          // 872\n      update.push(updateNodes);                                                                                        // 873\n      exit.push(exitNodes);                                                                                            // 874\n    }                                                                                                                  // 875\n    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);                            // 876\n    if (typeof value === \"function\") {                                                                                 // 877\n      while (++i < n) {                                                                                                // 878\n        bind(group = this[i], value.call(group, group.parentNode.__data__, i));                                        // 879\n      }                                                                                                                // 880\n    } else {                                                                                                           // 881\n      while (++i < n) {                                                                                                // 882\n        bind(group = this[i], value);                                                                                  // 883\n      }                                                                                                                // 884\n    }                                                                                                                  // 885\n    update.enter = function() {                                                                                        // 886\n      return enter;                                                                                                    // 887\n    };                                                                                                                 // 888\n    update.exit = function() {                                                                                         // 889\n      return exit;                                                                                                     // 890\n    };                                                                                                                 // 891\n    return update;                                                                                                     // 892\n  };                                                                                                                   // 893\n  function d3_selection_dataNode(data) {                                                                               // 894\n    return {                                                                                                           // 895\n      __data__: data                                                                                                   // 896\n    };                                                                                                                 // 897\n  }                                                                                                                    // 898\n  d3_selectionPrototype.datum = function(value) {                                                                      // 899\n    return arguments.length ? this.property(\"__data__\", value) : this.property(\"__data__\");                            // 900\n  };                                                                                                                   // 901\n  d3_selectionPrototype.filter = function(filter) {                                                                    // 902\n    var subgroups = [], subgroup, group, node;                                                                         // 903\n    if (typeof filter !== \"function\") filter = d3_selection_filter(filter);                                            // 904\n    for (var j = 0, m = this.length; j < m; j++) {                                                                     // 905\n      subgroups.push(subgroup = []);                                                                                   // 906\n      subgroup.parentNode = (group = this[j]).parentNode;                                                              // 907\n      for (var i = 0, n = group.length; i < n; i++) {                                                                  // 908\n        if ((node = group[i]) && filter.call(node, node.__data__, i)) {                                                // 909\n          subgroup.push(node);                                                                                         // 910\n        }                                                                                                              // 911\n      }                                                                                                                // 912\n    }                                                                                                                  // 913\n    return d3_selection(subgroups);                                                                                    // 914\n  };                                                                                                                   // 915\n  function d3_selection_filter(selector) {                                                                             // 916\n    return function() {                                                                                                // 917\n      return d3_selectMatches(this, selector);                                                                         // 918\n    };                                                                                                                 // 919\n  }                                                                                                                    // 920\n  d3_selectionPrototype.order = function() {                                                                           // 921\n    for (var j = -1, m = this.length; ++j < m; ) {                                                                     // 922\n      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {                             // 923\n        if (node = group[i]) {                                                                                         // 924\n          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);                             // 925\n          next = node;                                                                                                 // 926\n        }                                                                                                              // 927\n      }                                                                                                                // 928\n    }                                                                                                                  // 929\n    return this;                                                                                                       // 930\n  };                                                                                                                   // 931\n  d3_selectionPrototype.sort = function(comparator) {                                                                  // 932\n    comparator = d3_selection_sortComparator.apply(this, arguments);                                                   // 933\n    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);                                             // 934\n    return this.order();                                                                                               // 935\n  };                                                                                                                   // 936\n  function d3_selection_sortComparator(comparator) {                                                                   // 937\n    if (!arguments.length) comparator = d3.ascending;                                                                  // 938\n    return function(a, b) {                                                                                            // 939\n      return !a - !b || comparator(a.__data__, b.__data__);                                                            // 940\n    };                                                                                                                 // 941\n  }                                                                                                                    // 942\n  function d3_noop() {}                                                                                                // 943\n  d3_selectionPrototype.on = function(type, listener, capture) {                                                       // 944\n    var n = arguments.length;                                                                                          // 945\n    if (n < 3) {                                                                                                       // 946\n      if (typeof type !== \"string\") {                                                                                  // 947\n        if (n < 2) listener = false;                                                                                   // 948\n        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));                            // 949\n        return this;                                                                                                   // 950\n      }                                                                                                                // 951\n      if (n < 2) return (n = this.node()[\"__on\" + type]) && n._;                                                       // 952\n      capture = false;                                                                                                 // 953\n    }                                                                                                                  // 954\n    return this.each(d3_selection_on(type, listener, capture));                                                        // 955\n  };                                                                                                                   // 956\n  function d3_selection_on(type, listener, capture) {                                                                  // 957\n    var name = \"__on\" + type, i = type.indexOf(\".\"), wrap = d3_selection_onListener;                                   // 958\n    if (i > 0) type = type.substring(0, i);                                                                            // 959\n    var filter = d3_selection_onFilters.get(type);                                                                     // 960\n    if (filter) type = filter, wrap = d3_selection_onFilter;                                                           // 961\n    function onRemove() {                                                                                              // 962\n      var l = this[name];                                                                                              // 963\n      if (l) {                                                                                                         // 964\n        this.removeEventListener(type, l, l.$);                                                                        // 965\n        delete this[name];                                                                                             // 966\n      }                                                                                                                // 967\n    }                                                                                                                  // 968\n    function onAdd() {                                                                                                 // 969\n      var l = wrap(listener, d3_array(arguments));                                                                     // 970\n      onRemove.call(this);                                                                                             // 971\n      this.addEventListener(type, this[name] = l, l.$ = capture);                                                      // 972\n      l._ = listener;                                                                                                  // 973\n    }                                                                                                                  // 974\n    function removeAll() {                                                                                             // 975\n      var re = new RegExp(\"^__on([^.]+)\" + d3.requote(type) + \"$\"), match;                                             // 976\n      for (var name in this) {                                                                                         // 977\n        if (match = name.match(re)) {                                                                                  // 978\n          var l = this[name];                                                                                          // 979\n          this.removeEventListener(match[1], l, l.$);                                                                  // 980\n          delete this[name];                                                                                           // 981\n        }                                                                                                              // 982\n      }                                                                                                                // 983\n    }                                                                                                                  // 984\n    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;                                           // 985\n  }                                                                                                                    // 986\n  var d3_selection_onFilters = d3.map({                                                                                // 987\n    mouseenter: \"mouseover\",                                                                                           // 988\n    mouseleave: \"mouseout\"                                                                                             // 989\n  });                                                                                                                  // 990\n  d3_selection_onFilters.forEach(function(k) {                                                                         // 991\n    if (\"on\" + k in d3_document) d3_selection_onFilters.remove(k);                                                     // 992\n  });                                                                                                                  // 993\n  function d3_selection_onListener(listener, argumentz) {                                                              // 994\n    return function(e) {                                                                                               // 995\n      var o = d3.event;                                                                                                // 996\n      d3.event = e;                                                                                                    // 997\n      argumentz[0] = this.__data__;                                                                                    // 998\n      try {                                                                                                            // 999\n        listener.apply(this, argumentz);                                                                               // 1000\n      } finally {                                                                                                      // 1001\n        d3.event = o;                                                                                                  // 1002\n      }                                                                                                                // 1003\n    };                                                                                                                 // 1004\n  }                                                                                                                    // 1005\n  function d3_selection_onFilter(listener, argumentz) {                                                                // 1006\n    var l = d3_selection_onListener(listener, argumentz);                                                              // 1007\n    return function(e) {                                                                                               // 1008\n      var target = this, related = e.relatedTarget;                                                                    // 1009\n      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {                          // 1010\n        l.call(target, e);                                                                                             // 1011\n      }                                                                                                                // 1012\n    };                                                                                                                 // 1013\n  }                                                                                                                    // 1014\n  d3_selectionPrototype.each = function(callback) {                                                                    // 1015\n    return d3_selection_each(this, function(node, i, j) {                                                              // 1016\n      callback.call(node, node.__data__, i, j);                                                                        // 1017\n    });                                                                                                                // 1018\n  };                                                                                                                   // 1019\n  function d3_selection_each(groups, callback) {                                                                       // 1020\n    for (var j = 0, m = groups.length; j < m; j++) {                                                                   // 1021\n      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {                                         // 1022\n        if (node = group[i]) callback(node, i, j);                                                                     // 1023\n      }                                                                                                                // 1024\n    }                                                                                                                  // 1025\n    return groups;                                                                                                     // 1026\n  }                                                                                                                    // 1027\n  d3_selectionPrototype.call = function(callback) {                                                                    // 1028\n    var args = d3_array(arguments);                                                                                    // 1029\n    callback.apply(args[0] = this, args);                                                                              // 1030\n    return this;                                                                                                       // 1031\n  };                                                                                                                   // 1032\n  d3_selectionPrototype.empty = function() {                                                                           // 1033\n    return !this.node();                                                                                               // 1034\n  };                                                                                                                   // 1035\n  d3_selectionPrototype.node = function() {                                                                            // 1036\n    for (var j = 0, m = this.length; j < m; j++) {                                                                     // 1037\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {                                                 // 1038\n        var node = group[i];                                                                                           // 1039\n        if (node) return node;                                                                                         // 1040\n      }                                                                                                                // 1041\n    }                                                                                                                  // 1042\n    return null;                                                                                                       // 1043\n  };                                                                                                                   // 1044\n  function d3_selection_enter(selection) {                                                                             // 1045\n    d3_arraySubclass(selection, d3_selection_enterPrototype);                                                          // 1046\n    return selection;                                                                                                  // 1047\n  }                                                                                                                    // 1048\n  var d3_selection_enterPrototype = [];                                                                                // 1049\n  d3.selection.enter = d3_selection_enter;                                                                             // 1050\n  d3.selection.enter.prototype = d3_selection_enterPrototype;                                                          // 1051\n  d3_selection_enterPrototype.append = d3_selectionPrototype.append;                                                   // 1052\n  d3_selection_enterPrototype.insert = d3_selectionPrototype.insert;                                                   // 1053\n  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;                                                     // 1054\n  d3_selection_enterPrototype.node = d3_selectionPrototype.node;                                                       // 1055\n  d3_selection_enterPrototype.select = function(selector) {                                                            // 1056\n    var subgroups = [], subgroup, subnode, upgroup, group, node;                                                       // 1057\n    for (var j = -1, m = this.length; ++j < m; ) {                                                                     // 1058\n      upgroup = (group = this[j]).update;                                                                              // 1059\n      subgroups.push(subgroup = []);                                                                                   // 1060\n      subgroup.parentNode = group.parentNode;                                                                          // 1061\n      for (var i = -1, n = group.length; ++i < n; ) {                                                                  // 1062\n        if (node = group[i]) {                                                                                         // 1063\n          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i));                     // 1064\n          subnode.__data__ = node.__data__;                                                                            // 1065\n        } else {                                                                                                       // 1066\n          subgroup.push(null);                                                                                         // 1067\n        }                                                                                                              // 1068\n      }                                                                                                                // 1069\n    }                                                                                                                  // 1070\n    return d3_selection(subgroups);                                                                                    // 1071\n  };                                                                                                                   // 1072\n  d3_selectionPrototype.transition = function() {                                                                      // 1073\n    var id = d3_transitionInheritId || ++d3_transitionId, subgroups = [], subgroup, node, transition = Object.create(d3_transitionInherit);\n    transition.time = Date.now();                                                                                      // 1075\n    for (var j = -1, m = this.length; ++j < m; ) {                                                                     // 1076\n      subgroups.push(subgroup = []);                                                                                   // 1077\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {                                                 // 1078\n        if (node = group[i]) d3_transitionNode(node, i, id, transition);                                               // 1079\n        subgroup.push(node);                                                                                           // 1080\n      }                                                                                                                // 1081\n    }                                                                                                                  // 1082\n    return d3_transition(subgroups, id);                                                                               // 1083\n  };                                                                                                                   // 1084\n  var d3_selectionRoot = d3_selection([ [ d3_document ] ]);                                                            // 1085\n  d3_selectionRoot[0].parentNode = d3_selectRoot;                                                                      // 1086\n  d3.select = function(selector) {                                                                                     // 1087\n    return typeof selector === \"string\" ? d3_selectionRoot.select(selector) : d3_selection([ [ selector ] ]);          // 1088\n  };                                                                                                                   // 1089\n  d3.selectAll = function(selector) {                                                                                  // 1090\n    return typeof selector === \"string\" ? d3_selectionRoot.selectAll(selector) : d3_selection([ d3_array(selector) ]); // 1091\n  };                                                                                                                   // 1092\n  d3.behavior.zoom = function() {                                                                                      // 1093\n    var translate = [ 0, 0 ], translate0, scale = 1, scale0, scaleExtent = d3_behavior_zoomInfinity, event = d3_eventDispatch(zoom, \"zoom\"), x0, x1, y0, y1, touchtime;\n    function zoom() {                                                                                                  // 1095\n      this.on(\"mousedown.zoom\", mousedown).on(\"mousemove.zoom\", mousemove).on(d3_behavior_zoomWheel + \".zoom\", mousewheel).on(\"dblclick.zoom\", dblclick).on(\"touchstart.zoom\", touchstart).on(\"touchmove.zoom\", touchmove).on(\"touchend.zoom\", touchstart);\n    }                                                                                                                  // 1097\n    zoom.translate = function(x) {                                                                                     // 1098\n      if (!arguments.length) return translate;                                                                         // 1099\n      translate = x.map(Number);                                                                                       // 1100\n      rescale();                                                                                                       // 1101\n      return zoom;                                                                                                     // 1102\n    };                                                                                                                 // 1103\n    zoom.scale = function(x) {                                                                                         // 1104\n      if (!arguments.length) return scale;                                                                             // 1105\n      scale = +x;                                                                                                      // 1106\n      rescale();                                                                                                       // 1107\n      return zoom;                                                                                                     // 1108\n    };                                                                                                                 // 1109\n    zoom.scaleExtent = function(x) {                                                                                   // 1110\n      if (!arguments.length) return scaleExtent;                                                                       // 1111\n      scaleExtent = x == null ? d3_behavior_zoomInfinity : x.map(Number);                                              // 1112\n      return zoom;                                                                                                     // 1113\n    };                                                                                                                 // 1114\n    zoom.x = function(z) {                                                                                             // 1115\n      if (!arguments.length) return x1;                                                                                // 1116\n      x1 = z;                                                                                                          // 1117\n      x0 = z.copy();                                                                                                   // 1118\n      translate = [ 0, 0 ];                                                                                            // 1119\n      scale = 1;                                                                                                       // 1120\n      return zoom;                                                                                                     // 1121\n    };                                                                                                                 // 1122\n    zoom.y = function(z) {                                                                                             // 1123\n      if (!arguments.length) return y1;                                                                                // 1124\n      y1 = z;                                                                                                          // 1125\n      y0 = z.copy();                                                                                                   // 1126\n      translate = [ 0, 0 ];                                                                                            // 1127\n      scale = 1;                                                                                                       // 1128\n      return zoom;                                                                                                     // 1129\n    };                                                                                                                 // 1130\n    function location(p) {                                                                                             // 1131\n      return [ (p[0] - translate[0]) / scale, (p[1] - translate[1]) / scale ];                                         // 1132\n    }                                                                                                                  // 1133\n    function point(l) {                                                                                                // 1134\n      return [ l[0] * scale + translate[0], l[1] * scale + translate[1] ];                                             // 1135\n    }                                                                                                                  // 1136\n    function scaleTo(s) {                                                                                              // 1137\n      scale = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));                                                   // 1138\n    }                                                                                                                  // 1139\n    function translateTo(p, l) {                                                                                       // 1140\n      l = point(l);                                                                                                    // 1141\n      translate[0] += p[0] - l[0];                                                                                     // 1142\n      translate[1] += p[1] - l[1];                                                                                     // 1143\n    }                                                                                                                  // 1144\n    function rescale() {                                                                                               // 1145\n      if (x1) x1.domain(x0.range().map(function(x) {                                                                   // 1146\n        return (x - translate[0]) / scale;                                                                             // 1147\n      }).map(x0.invert));                                                                                              // 1148\n      if (y1) y1.domain(y0.range().map(function(y) {                                                                   // 1149\n        return (y - translate[1]) / scale;                                                                             // 1150\n      }).map(y0.invert));                                                                                              // 1151\n    }                                                                                                                  // 1152\n    function dispatch(event) {                                                                                         // 1153\n      rescale();                                                                                                       // 1154\n      d3.event.preventDefault();                                                                                       // 1155\n      event({                                                                                                          // 1156\n        type: \"zoom\",                                                                                                  // 1157\n        scale: scale,                                                                                                  // 1158\n        translate: translate                                                                                           // 1159\n      });                                                                                                              // 1160\n    }                                                                                                                  // 1161\n    function mousedown() {                                                                                             // 1162\n      var target = this, event_ = event.of(target, arguments), eventTarget = d3.event.target, moved = 0, w = d3.select(d3_window).on(\"mousemove.zoom\", mousemove).on(\"mouseup.zoom\", mouseup), l = location(d3.mouse(target));\n      d3_window.focus();                                                                                               // 1164\n      d3_eventCancel();                                                                                                // 1165\n      function mousemove() {                                                                                           // 1166\n        moved = 1;                                                                                                     // 1167\n        translateTo(d3.mouse(target), l);                                                                              // 1168\n        dispatch(event_);                                                                                              // 1169\n      }                                                                                                                // 1170\n      function mouseup() {                                                                                             // 1171\n        if (moved) d3_eventCancel();                                                                                   // 1172\n        w.on(\"mousemove.zoom\", null).on(\"mouseup.zoom\", null);                                                         // 1173\n        if (moved && d3.event.target === eventTarget) w.on(\"click.zoom\", click, true);                                 // 1174\n      }                                                                                                                // 1175\n      function click() {                                                                                               // 1176\n        d3_eventCancel();                                                                                              // 1177\n        w.on(\"click.zoom\", null);                                                                                      // 1178\n      }                                                                                                                // 1179\n    }                                                                                                                  // 1180\n    function mousewheel() {                                                                                            // 1181\n      if (!translate0) translate0 = location(d3.mouse(this));                                                          // 1182\n      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * scale);                                                    // 1183\n      translateTo(d3.mouse(this), translate0);                                                                         // 1184\n      dispatch(event.of(this, arguments));                                                                             // 1185\n    }                                                                                                                  // 1186\n    function mousemove() {                                                                                             // 1187\n      translate0 = null;                                                                                               // 1188\n    }                                                                                                                  // 1189\n    function dblclick() {                                                                                              // 1190\n      var p = d3.mouse(this), l = location(p), k = Math.log(scale) / Math.LN2;                                         // 1191\n      scaleTo(Math.pow(2, d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1));                                  // 1192\n      translateTo(p, l);                                                                                               // 1193\n      dispatch(event.of(this, arguments));                                                                             // 1194\n    }                                                                                                                  // 1195\n    function touchstart() {                                                                                            // 1196\n      var touches = d3.touches(this), now = Date.now();                                                                // 1197\n      scale0 = scale;                                                                                                  // 1198\n      translate0 = {};                                                                                                 // 1199\n      touches.forEach(function(t) {                                                                                    // 1200\n        translate0[t.identifier] = location(t);                                                                        // 1201\n      });                                                                                                              // 1202\n      d3_eventCancel();                                                                                                // 1203\n      if (touches.length === 1) {                                                                                      // 1204\n        if (now - touchtime < 500) {                                                                                   // 1205\n          var p = touches[0], l = location(touches[0]);                                                                // 1206\n          scaleTo(scale * 2);                                                                                          // 1207\n          translateTo(p, l);                                                                                           // 1208\n          dispatch(event.of(this, arguments));                                                                         // 1209\n        }                                                                                                              // 1210\n        touchtime = now;                                                                                               // 1211\n      }                                                                                                                // 1212\n    }                                                                                                                  // 1213\n    function touchmove() {                                                                                             // 1214\n      var touches = d3.touches(this), p0 = touches[0], l0 = translate0[p0.identifier];                                 // 1215\n      if (p1 = touches[1]) {                                                                                           // 1216\n        var p1, l1 = translate0[p1.identifier];                                                                        // 1217\n        p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];                                                             // 1218\n        l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];                                                             // 1219\n        scaleTo(d3.event.scale * scale0);                                                                              // 1220\n      }                                                                                                                // 1221\n      translateTo(p0, l0);                                                                                             // 1222\n      touchtime = null;                                                                                                // 1223\n      dispatch(event.of(this, arguments));                                                                             // 1224\n    }                                                                                                                  // 1225\n    return d3.rebind(zoom, event, \"on\");                                                                               // 1226\n  };                                                                                                                   // 1227\n  var d3_behavior_zoomInfinity = [ 0, Infinity ];                                                                      // 1228\n  var d3_behavior_zoomDelta, d3_behavior_zoomWheel = \"onwheel\" in d3_document ? (d3_behavior_zoomDelta = function() {  // 1229\n    return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);                                                          // 1230\n  }, \"wheel\") : \"onmousewheel\" in d3_document ? (d3_behavior_zoomDelta = function() {                                  // 1231\n    return d3.event.wheelDelta;                                                                                        // 1232\n  }, \"mousewheel\") : (d3_behavior_zoomDelta = function() {                                                             // 1233\n    return -d3.event.detail;                                                                                           // 1234\n  }, \"MozMousePixelScroll\");                                                                                           // 1235\n  function d3_Color() {}                                                                                               // 1236\n  d3_Color.prototype.toString = function() {                                                                           // 1237\n    return this.rgb() + \"\";                                                                                            // 1238\n  };                                                                                                                   // 1239\n  d3.hsl = function(h, s, l) {                                                                                         // 1240\n    return arguments.length === 1 ? h instanceof d3_Hsl ? d3_hsl(h.h, h.s, h.l) : d3_rgb_parse(\"\" + h, d3_rgb_hsl, d3_hsl) : d3_hsl(+h, +s, +l);\n  };                                                                                                                   // 1242\n  function d3_hsl(h, s, l) {                                                                                           // 1243\n    return new d3_Hsl(h, s, l);                                                                                        // 1244\n  }                                                                                                                    // 1245\n  function d3_Hsl(h, s, l) {                                                                                           // 1246\n    this.h = h;                                                                                                        // 1247\n    this.s = s;                                                                                                        // 1248\n    this.l = l;                                                                                                        // 1249\n  }                                                                                                                    // 1250\n  var d3_hslPrototype = d3_Hsl.prototype = new d3_Color();                                                             // 1251\n  d3_hslPrototype.brighter = function(k) {                                                                             // 1252\n    k = Math.pow(.7, arguments.length ? k : 1);                                                                        // 1253\n    return d3_hsl(this.h, this.s, this.l / k);                                                                         // 1254\n  };                                                                                                                   // 1255\n  d3_hslPrototype.darker = function(k) {                                                                               // 1256\n    k = Math.pow(.7, arguments.length ? k : 1);                                                                        // 1257\n    return d3_hsl(this.h, this.s, k * this.l);                                                                         // 1258\n  };                                                                                                                   // 1259\n  d3_hslPrototype.rgb = function() {                                                                                   // 1260\n    return d3_hsl_rgb(this.h, this.s, this.l);                                                                         // 1261\n  };                                                                                                                   // 1262\n  function d3_hsl_rgb(h, s, l) {                                                                                       // 1263\n    var m1, m2;                                                                                                        // 1264\n    h = h % 360;                                                                                                       // 1265\n    if (h < 0) h += 360;                                                                                               // 1266\n    s = s < 0 ? 0 : s > 1 ? 1 : s;                                                                                     // 1267\n    l = l < 0 ? 0 : l > 1 ? 1 : l;                                                                                     // 1268\n    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;                                                                        // 1269\n    m1 = 2 * l - m2;                                                                                                   // 1270\n    function v(h) {                                                                                                    // 1271\n      if (h > 360) h -= 360; else if (h < 0) h += 360;                                                                 // 1272\n      if (h < 60) return m1 + (m2 - m1) * h / 60;                                                                      // 1273\n      if (h < 180) return m2;                                                                                          // 1274\n      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;                                                             // 1275\n      return m1;                                                                                                       // 1276\n    }                                                                                                                  // 1277\n    function vv(h) {                                                                                                   // 1278\n      return Math.round(v(h) * 255);                                                                                   // 1279\n    }                                                                                                                  // 1280\n    return d3_rgb(vv(h + 120), vv(h), vv(h - 120));                                                                    // 1281\n  }                                                                                                                    // 1282\n  var π = Math.PI, ε = 1e-6, d3_radians = π / 180, d3_degrees = 180 / π;                                               // 1283\n  function d3_sgn(x) {                                                                                                 // 1284\n    return x > 0 ? 1 : x < 0 ? -1 : 0;                                                                                 // 1285\n  }                                                                                                                    // 1286\n  function d3_acos(x) {                                                                                                // 1287\n    return Math.acos(Math.max(-1, Math.min(1, x)));                                                                    // 1288\n  }                                                                                                                    // 1289\n  function d3_asin(x) {                                                                                                // 1290\n    return x > 1 ? π / 2 : x < -1 ? -π / 2 : Math.asin(x);                                                             // 1291\n  }                                                                                                                    // 1292\n  function d3_sinh(x) {                                                                                                // 1293\n    return (Math.exp(x) - Math.exp(-x)) / 2;                                                                           // 1294\n  }                                                                                                                    // 1295\n  function d3_cosh(x) {                                                                                                // 1296\n    return (Math.exp(x) + Math.exp(-x)) / 2;                                                                           // 1297\n  }                                                                                                                    // 1298\n  function d3_haversin(x) {                                                                                            // 1299\n    return (x = Math.sin(x / 2)) * x;                                                                                  // 1300\n  }                                                                                                                    // 1301\n  d3.hcl = function(h, c, l) {                                                                                         // 1302\n    return arguments.length === 1 ? h instanceof d3_Hcl ? d3_hcl(h.h, h.c, h.l) : h instanceof d3_Lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : d3_hcl(+h, +c, +l);\n  };                                                                                                                   // 1304\n  function d3_hcl(h, c, l) {                                                                                           // 1305\n    return new d3_Hcl(h, c, l);                                                                                        // 1306\n  }                                                                                                                    // 1307\n  function d3_Hcl(h, c, l) {                                                                                           // 1308\n    this.h = h;                                                                                                        // 1309\n    this.c = c;                                                                                                        // 1310\n    this.l = l;                                                                                                        // 1311\n  }                                                                                                                    // 1312\n  var d3_hclPrototype = d3_Hcl.prototype = new d3_Color();                                                             // 1313\n  d3_hclPrototype.brighter = function(k) {                                                                             // 1314\n    return d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));                      // 1315\n  };                                                                                                                   // 1316\n  d3_hclPrototype.darker = function(k) {                                                                               // 1317\n    return d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));                        // 1318\n  };                                                                                                                   // 1319\n  d3_hclPrototype.rgb = function() {                                                                                   // 1320\n    return d3_hcl_lab(this.h, this.c, this.l).rgb();                                                                   // 1321\n  };                                                                                                                   // 1322\n  function d3_hcl_lab(h, c, l) {                                                                                       // 1323\n    return d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);                                                  // 1324\n  }                                                                                                                    // 1325\n  d3.lab = function(l, a, b) {                                                                                         // 1326\n    return arguments.length === 1 ? l instanceof d3_Lab ? d3_lab(l.l, l.a, l.b) : l instanceof d3_Hcl ? d3_hcl_lab(l.l, l.c, l.h) : d3_rgb_lab((l = d3.rgb(l)).r, l.g, l.b) : d3_lab(+l, +a, +b);\n  };                                                                                                                   // 1328\n  function d3_lab(l, a, b) {                                                                                           // 1329\n    return new d3_Lab(l, a, b);                                                                                        // 1330\n  }                                                                                                                    // 1331\n  function d3_Lab(l, a, b) {                                                                                           // 1332\n    this.l = l;                                                                                                        // 1333\n    this.a = a;                                                                                                        // 1334\n    this.b = b;                                                                                                        // 1335\n  }                                                                                                                    // 1336\n  var d3_lab_K = 18;                                                                                                   // 1337\n  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;                                                             // 1338\n  var d3_labPrototype = d3_Lab.prototype = new d3_Color();                                                             // 1339\n  d3_labPrototype.brighter = function(k) {                                                                             // 1340\n    return d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);                      // 1341\n  };                                                                                                                   // 1342\n  d3_labPrototype.darker = function(k) {                                                                               // 1343\n    return d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);                        // 1344\n  };                                                                                                                   // 1345\n  d3_labPrototype.rgb = function() {                                                                                   // 1346\n    return d3_lab_rgb(this.l, this.a, this.b);                                                                         // 1347\n  };                                                                                                                   // 1348\n  function d3_lab_rgb(l, a, b) {                                                                                       // 1349\n    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;                                                          // 1350\n    x = d3_lab_xyz(x) * d3_lab_X;                                                                                      // 1351\n    y = d3_lab_xyz(y) * d3_lab_Y;                                                                                      // 1352\n    z = d3_lab_xyz(z) * d3_lab_Z;                                                                                      // 1353\n    return d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));\n  }                                                                                                                    // 1355\n  function d3_lab_hcl(l, a, b) {                                                                                       // 1356\n    return d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l);                                         // 1357\n  }                                                                                                                    // 1358\n  function d3_lab_xyz(x) {                                                                                             // 1359\n    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;                                                       // 1360\n  }                                                                                                                    // 1361\n  function d3_xyz_lab(x) {                                                                                             // 1362\n    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;                                                   // 1363\n  }                                                                                                                    // 1364\n  function d3_xyz_rgb(r) {                                                                                             // 1365\n    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));                          // 1366\n  }                                                                                                                    // 1367\n  d3.rgb = function(r, g, b) {                                                                                         // 1368\n    return arguments.length === 1 ? r instanceof d3_Rgb ? d3_rgb(r.r, r.g, r.b) : d3_rgb_parse(\"\" + r, d3_rgb, d3_hsl_rgb) : d3_rgb(~~r, ~~g, ~~b);\n  };                                                                                                                   // 1370\n  function d3_rgb(r, g, b) {                                                                                           // 1371\n    return new d3_Rgb(r, g, b);                                                                                        // 1372\n  }                                                                                                                    // 1373\n  function d3_Rgb(r, g, b) {                                                                                           // 1374\n    this.r = r;                                                                                                        // 1375\n    this.g = g;                                                                                                        // 1376\n    this.b = b;                                                                                                        // 1377\n  }                                                                                                                    // 1378\n  var d3_rgbPrototype = d3_Rgb.prototype = new d3_Color();                                                             // 1379\n  d3_rgbPrototype.brighter = function(k) {                                                                             // 1380\n    k = Math.pow(.7, arguments.length ? k : 1);                                                                        // 1381\n    var r = this.r, g = this.g, b = this.b, i = 30;                                                                    // 1382\n    if (!r && !g && !b) return d3_rgb(i, i, i);                                                                        // 1383\n    if (r && r < i) r = i;                                                                                             // 1384\n    if (g && g < i) g = i;                                                                                             // 1385\n    if (b && b < i) b = i;                                                                                             // 1386\n    return d3_rgb(Math.min(255, Math.floor(r / k)), Math.min(255, Math.floor(g / k)), Math.min(255, Math.floor(b / k)));\n  };                                                                                                                   // 1388\n  d3_rgbPrototype.darker = function(k) {                                                                               // 1389\n    k = Math.pow(.7, arguments.length ? k : 1);                                                                        // 1390\n    return d3_rgb(Math.floor(k * this.r), Math.floor(k * this.g), Math.floor(k * this.b));                             // 1391\n  };                                                                                                                   // 1392\n  d3_rgbPrototype.hsl = function() {                                                                                   // 1393\n    return d3_rgb_hsl(this.r, this.g, this.b);                                                                         // 1394\n  };                                                                                                                   // 1395\n  d3_rgbPrototype.toString = function() {                                                                              // 1396\n    return \"#\" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);                                         // 1397\n  };                                                                                                                   // 1398\n  function d3_rgb_hex(v) {                                                                                             // 1399\n    return v < 16 ? \"0\" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);                                 // 1400\n  }                                                                                                                    // 1401\n  function d3_rgb_parse(format, rgb, hsl) {                                                                            // 1402\n    var r = 0, g = 0, b = 0, m1, m2, name;                                                                             // 1403\n    m1 = /([a-z]+)\\((.*)\\)/i.exec(format);                                                                             // 1404\n    if (m1) {                                                                                                          // 1405\n      m2 = m1[2].split(\",\");                                                                                           // 1406\n      switch (m1[1]) {                                                                                                 // 1407\n       case \"hsl\":                                                                                                     // 1408\n        {                                                                                                              // 1409\n          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);                             // 1410\n        }                                                                                                              // 1411\n                                                                                                                       // 1412\n       case \"rgb\":                                                                                                     // 1413\n        {                                                                                                              // 1414\n          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));                 // 1415\n        }                                                                                                              // 1416\n      }                                                                                                                // 1417\n    }                                                                                                                  // 1418\n    if (name = d3_rgb_names.get(format)) return rgb(name.r, name.g, name.b);                                           // 1419\n    if (format != null && format.charAt(0) === \"#\") {                                                                  // 1420\n      if (format.length === 4) {                                                                                       // 1421\n        r = format.charAt(1);                                                                                          // 1422\n        r += r;                                                                                                        // 1423\n        g = format.charAt(2);                                                                                          // 1424\n        g += g;                                                                                                        // 1425\n        b = format.charAt(3);                                                                                          // 1426\n        b += b;                                                                                                        // 1427\n      } else if (format.length === 7) {                                                                                // 1428\n        r = format.substring(1, 3);                                                                                    // 1429\n        g = format.substring(3, 5);                                                                                    // 1430\n        b = format.substring(5, 7);                                                                                    // 1431\n      }                                                                                                                // 1432\n      r = parseInt(r, 16);                                                                                             // 1433\n      g = parseInt(g, 16);                                                                                             // 1434\n      b = parseInt(b, 16);                                                                                             // 1435\n    }                                                                                                                  // 1436\n    return rgb(r, g, b);                                                                                               // 1437\n  }                                                                                                                    // 1438\n  function d3_rgb_hsl(r, g, b) {                                                                                       // 1439\n    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;\n    if (d) {                                                                                                           // 1441\n      s = l < .5 ? d / (max + min) : d / (2 - max - min);                                                              // 1442\n      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;\n      h *= 60;                                                                                                         // 1444\n    } else {                                                                                                           // 1445\n      s = h = 0;                                                                                                       // 1446\n    }                                                                                                                  // 1447\n    return d3_hsl(h, s, l);                                                                                            // 1448\n  }                                                                                                                    // 1449\n  function d3_rgb_lab(r, g, b) {                                                                                       // 1450\n    r = d3_rgb_xyz(r);                                                                                                 // 1451\n    g = d3_rgb_xyz(g);                                                                                                 // 1452\n    b = d3_rgb_xyz(b);                                                                                                 // 1453\n    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);\n    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));                                                         // 1455\n  }                                                                                                                    // 1456\n  function d3_rgb_xyz(r) {                                                                                             // 1457\n    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);                                       // 1458\n  }                                                                                                                    // 1459\n  function d3_rgb_parseNumber(c) {                                                                                     // 1460\n    var f = parseFloat(c);                                                                                             // 1461\n    return c.charAt(c.length - 1) === \"%\" ? Math.round(f * 2.55) : f;                                                  // 1462\n  }                                                                                                                    // 1463\n  var d3_rgb_names = d3.map({                                                                                          // 1464\n    aliceblue: \"#f0f8ff\",                                                                                              // 1465\n    antiquewhite: \"#faebd7\",                                                                                           // 1466\n    aqua: \"#00ffff\",                                                                                                   // 1467\n    aquamarine: \"#7fffd4\",                                                                                             // 1468\n    azure: \"#f0ffff\",                                                                                                  // 1469\n    beige: \"#f5f5dc\",                                                                                                  // 1470\n    bisque: \"#ffe4c4\",                                                                                                 // 1471\n    black: \"#000000\",                                                                                                  // 1472\n    blanchedalmond: \"#ffebcd\",                                                                                         // 1473\n    blue: \"#0000ff\",                                                                                                   // 1474\n    blueviolet: \"#8a2be2\",                                                                                             // 1475\n    brown: \"#a52a2a\",                                                                                                  // 1476\n    burlywood: \"#deb887\",                                                                                              // 1477\n    cadetblue: \"#5f9ea0\",                                                                                              // 1478\n    chartreuse: \"#7fff00\",                                                                                             // 1479\n    chocolate: \"#d2691e\",                                                                                              // 1480\n    coral: \"#ff7f50\",                                                                                                  // 1481\n    cornflowerblue: \"#6495ed\",                                                                                         // 1482\n    cornsilk: \"#fff8dc\",                                                                                               // 1483\n    crimson: \"#dc143c\",                                                                                                // 1484\n    cyan: \"#00ffff\",                                                                                                   // 1485\n    darkblue: \"#00008b\",                                                                                               // 1486\n    darkcyan: \"#008b8b\",                                                                                               // 1487\n    darkgoldenrod: \"#b8860b\",                                                                                          // 1488\n    darkgray: \"#a9a9a9\",                                                                                               // 1489\n    darkgreen: \"#006400\",                                                                                              // 1490\n    darkgrey: \"#a9a9a9\",                                                                                               // 1491\n    darkkhaki: \"#bdb76b\",                                                                                              // 1492\n    darkmagenta: \"#8b008b\",                                                                                            // 1493\n    darkolivegreen: \"#556b2f\",                                                                                         // 1494\n    darkorange: \"#ff8c00\",                                                                                             // 1495\n    darkorchid: \"#9932cc\",                                                                                             // 1496\n    darkred: \"#8b0000\",                                                                                                // 1497\n    darksalmon: \"#e9967a\",                                                                                             // 1498\n    darkseagreen: \"#8fbc8f\",                                                                                           // 1499\n    darkslateblue: \"#483d8b\",                                                                                          // 1500\n    darkslategray: \"#2f4f4f\",                                                                                          // 1501\n    darkslategrey: \"#2f4f4f\",                                                                                          // 1502\n    darkturquoise: \"#00ced1\",                                                                                          // 1503\n    darkviolet: \"#9400d3\",                                                                                             // 1504\n    deeppink: \"#ff1493\",                                                                                               // 1505\n    deepskyblue: \"#00bfff\",                                                                                            // 1506\n    dimgray: \"#696969\",                                                                                                // 1507\n    dimgrey: \"#696969\",                                                                                                // 1508\n    dodgerblue: \"#1e90ff\",                                                                                             // 1509\n    firebrick: \"#b22222\",                                                                                              // 1510\n    floralwhite: \"#fffaf0\",                                                                                            // 1511\n    forestgreen: \"#228b22\",                                                                                            // 1512\n    fuchsia: \"#ff00ff\",                                                                                                // 1513\n    gainsboro: \"#dcdcdc\",                                                                                              // 1514\n    ghostwhite: \"#f8f8ff\",                                                                                             // 1515\n    gold: \"#ffd700\",                                                                                                   // 1516\n    goldenrod: \"#daa520\",                                                                                              // 1517\n    gray: \"#808080\",                                                                                                   // 1518\n    green: \"#008000\",                                                                                                  // 1519\n    greenyellow: \"#adff2f\",                                                                                            // 1520\n    grey: \"#808080\",                                                                                                   // 1521\n    honeydew: \"#f0fff0\",                                                                                               // 1522\n    hotpink: \"#ff69b4\",                                                                                                // 1523\n    indianred: \"#cd5c5c\",                                                                                              // 1524\n    indigo: \"#4b0082\",                                                                                                 // 1525\n    ivory: \"#fffff0\",                                                                                                  // 1526\n    khaki: \"#f0e68c\",                                                                                                  // 1527\n    lavender: \"#e6e6fa\",                                                                                               // 1528\n    lavenderblush: \"#fff0f5\",                                                                                          // 1529\n    lawngreen: \"#7cfc00\",                                                                                              // 1530\n    lemonchiffon: \"#fffacd\",                                                                                           // 1531\n    lightblue: \"#add8e6\",                                                                                              // 1532\n    lightcoral: \"#f08080\",                                                                                             // 1533\n    lightcyan: \"#e0ffff\",                                                                                              // 1534\n    lightgoldenrodyellow: \"#fafad2\",                                                                                   // 1535\n    lightgray: \"#d3d3d3\",                                                                                              // 1536\n    lightgreen: \"#90ee90\",                                                                                             // 1537\n    lightgrey: \"#d3d3d3\",                                                                                              // 1538\n    lightpink: \"#ffb6c1\",                                                                                              // 1539\n    lightsalmon: \"#ffa07a\",                                                                                            // 1540\n    lightseagreen: \"#20b2aa\",                                                                                          // 1541\n    lightskyblue: \"#87cefa\",                                                                                           // 1542\n    lightslategray: \"#778899\",                                                                                         // 1543\n    lightslategrey: \"#778899\",                                                                                         // 1544\n    lightsteelblue: \"#b0c4de\",                                                                                         // 1545\n    lightyellow: \"#ffffe0\",                                                                                            // 1546\n    lime: \"#00ff00\",                                                                                                   // 1547\n    limegreen: \"#32cd32\",                                                                                              // 1548\n    linen: \"#faf0e6\",                                                                                                  // 1549\n    magenta: \"#ff00ff\",                                                                                                // 1550\n    maroon: \"#800000\",                                                                                                 // 1551\n    mediumaquamarine: \"#66cdaa\",                                                                                       // 1552\n    mediumblue: \"#0000cd\",                                                                                             // 1553\n    mediumorchid: \"#ba55d3\",                                                                                           // 1554\n    mediumpurple: \"#9370db\",                                                                                           // 1555\n    mediumseagreen: \"#3cb371\",                                                                                         // 1556\n    mediumslateblue: \"#7b68ee\",                                                                                        // 1557\n    mediumspringgreen: \"#00fa9a\",                                                                                      // 1558\n    mediumturquoise: \"#48d1cc\",                                                                                        // 1559\n    mediumvioletred: \"#c71585\",                                                                                        // 1560\n    midnightblue: \"#191970\",                                                                                           // 1561\n    mintcream: \"#f5fffa\",                                                                                              // 1562\n    mistyrose: \"#ffe4e1\",                                                                                              // 1563\n    moccasin: \"#ffe4b5\",                                                                                               // 1564\n    navajowhite: \"#ffdead\",                                                                                            // 1565\n    navy: \"#000080\",                                                                                                   // 1566\n    oldlace: \"#fdf5e6\",                                                                                                // 1567\n    olive: \"#808000\",                                                                                                  // 1568\n    olivedrab: \"#6b8e23\",                                                                                              // 1569\n    orange: \"#ffa500\",                                                                                                 // 1570\n    orangered: \"#ff4500\",                                                                                              // 1571\n    orchid: \"#da70d6\",                                                                                                 // 1572\n    palegoldenrod: \"#eee8aa\",                                                                                          // 1573\n    palegreen: \"#98fb98\",                                                                                              // 1574\n    paleturquoise: \"#afeeee\",                                                                                          // 1575\n    palevioletred: \"#db7093\",                                                                                          // 1576\n    papayawhip: \"#ffefd5\",                                                                                             // 1577\n    peachpuff: \"#ffdab9\",                                                                                              // 1578\n    peru: \"#cd853f\",                                                                                                   // 1579\n    pink: \"#ffc0cb\",                                                                                                   // 1580\n    plum: \"#dda0dd\",                                                                                                   // 1581\n    powderblue: \"#b0e0e6\",                                                                                             // 1582\n    purple: \"#800080\",                                                                                                 // 1583\n    red: \"#ff0000\",                                                                                                    // 1584\n    rosybrown: \"#bc8f8f\",                                                                                              // 1585\n    royalblue: \"#4169e1\",                                                                                              // 1586\n    saddlebrown: \"#8b4513\",                                                                                            // 1587\n    salmon: \"#fa8072\",                                                                                                 // 1588\n    sandybrown: \"#f4a460\",                                                                                             // 1589\n    seagreen: \"#2e8b57\",                                                                                               // 1590\n    seashell: \"#fff5ee\",                                                                                               // 1591\n    sienna: \"#a0522d\",                                                                                                 // 1592\n    silver: \"#c0c0c0\",                                                                                                 // 1593\n    skyblue: \"#87ceeb\",                                                                                                // 1594\n    slateblue: \"#6a5acd\",                                                                                              // 1595\n    slategray: \"#708090\",                                                                                              // 1596\n    slategrey: \"#708090\",                                                                                              // 1597\n    snow: \"#fffafa\",                                                                                                   // 1598\n    springgreen: \"#00ff7f\",                                                                                            // 1599\n    steelblue: \"#4682b4\",                                                                                              // 1600\n    tan: \"#d2b48c\",                                                                                                    // 1601\n    teal: \"#008080\",                                                                                                   // 1602\n    thistle: \"#d8bfd8\",                                                                                                // 1603\n    tomato: \"#ff6347\",                                                                                                 // 1604\n    turquoise: \"#40e0d0\",                                                                                              // 1605\n    violet: \"#ee82ee\",                                                                                                 // 1606\n    wheat: \"#f5deb3\",                                                                                                  // 1607\n    white: \"#ffffff\",                                                                                                  // 1608\n    whitesmoke: \"#f5f5f5\",                                                                                             // 1609\n    yellow: \"#ffff00\",                                                                                                 // 1610\n    yellowgreen: \"#9acd32\"                                                                                             // 1611\n  });                                                                                                                  // 1612\n  d3_rgb_names.forEach(function(key, value) {                                                                          // 1613\n    d3_rgb_names.set(key, d3_rgb_parse(value, d3_rgb, d3_hsl_rgb));                                                    // 1614\n  });                                                                                                                  // 1615\n  function d3_functor(v) {                                                                                             // 1616\n    return typeof v === \"function\" ? v : function() {                                                                  // 1617\n      return v;                                                                                                        // 1618\n    };                                                                                                                 // 1619\n  }                                                                                                                    // 1620\n  d3.functor = d3_functor;                                                                                             // 1621\n  function d3_identity(d) {                                                                                            // 1622\n    return d;                                                                                                          // 1623\n  }                                                                                                                    // 1624\n  d3.xhr = function(url, mimeType, callback) {                                                                         // 1625\n    var xhr = {}, dispatch = d3.dispatch(\"progress\", \"load\", \"error\"), headers = {}, response = d3_identity, request = new (d3_window.XDomainRequest && /^(http(s)?:)?\\/\\//.test(url) ? XDomainRequest : XMLHttpRequest)();\n    \"onload\" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {       // 1627\n      request.readyState > 3 && respond();                                                                             // 1628\n    };                                                                                                                 // 1629\n    function respond() {                                                                                               // 1630\n      var s = request.status;                                                                                          // 1631\n      !s && request.responseText || s >= 200 && s < 300 || s === 304 ? dispatch.load.call(xhr, response.call(xhr, request)) : dispatch.error.call(xhr, request);\n    }                                                                                                                  // 1633\n    request.onprogress = function(event) {                                                                             // 1634\n      var o = d3.event;                                                                                                // 1635\n      d3.event = event;                                                                                                // 1636\n      try {                                                                                                            // 1637\n        dispatch.progress.call(xhr, request);                                                                          // 1638\n      } finally {                                                                                                      // 1639\n        d3.event = o;                                                                                                  // 1640\n      }                                                                                                                // 1641\n    };                                                                                                                 // 1642\n    xhr.header = function(name, value) {                                                                               // 1643\n      name = (name + \"\").toLowerCase();                                                                                // 1644\n      if (arguments.length < 2) return headers[name];                                                                  // 1645\n      if (value == null) delete headers[name]; else headers[name] = value + \"\";                                        // 1646\n      return xhr;                                                                                                      // 1647\n    };                                                                                                                 // 1648\n    xhr.mimeType = function(value) {                                                                                   // 1649\n      if (!arguments.length) return mimeType;                                                                          // 1650\n      mimeType = value == null ? null : value + \"\";                                                                    // 1651\n      return xhr;                                                                                                      // 1652\n    };                                                                                                                 // 1653\n    xhr.response = function(value) {                                                                                   // 1654\n      response = value;                                                                                                // 1655\n      return xhr;                                                                                                      // 1656\n    };                                                                                                                 // 1657\n    [ \"get\", \"post\" ].forEach(function(method) {                                                                       // 1658\n      xhr[method] = function() {                                                                                       // 1659\n        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));                                            // 1660\n      };                                                                                                               // 1661\n    });                                                                                                                // 1662\n    xhr.send = function(method, data, callback) {                                                                      // 1663\n      if (arguments.length === 2 && typeof data === \"function\") callback = data, data = null;                          // 1664\n      request.open(method, url, true);                                                                                 // 1665\n      if (mimeType != null && !(\"accept\" in headers)) headers[\"accept\"] = mimeType + \",*/*\";                           // 1666\n      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);           // 1667\n      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);                            // 1668\n      if (callback != null) xhr.on(\"error\", callback).on(\"load\", function(request) {                                   // 1669\n        callback(null, request);                                                                                       // 1670\n      });                                                                                                              // 1671\n      request.send(data == null ? null : data);                                                                        // 1672\n      return xhr;                                                                                                      // 1673\n    };                                                                                                                 // 1674\n    xhr.abort = function() {                                                                                           // 1675\n      request.abort();                                                                                                 // 1676\n      return xhr;                                                                                                      // 1677\n    };                                                                                                                 // 1678\n    d3.rebind(xhr, dispatch, \"on\");                                                                                    // 1679\n    if (arguments.length === 2 && typeof mimeType === \"function\") callback = mimeType,                                 // 1680\n    mimeType = null;                                                                                                   // 1681\n    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));                                             // 1682\n  };                                                                                                                   // 1683\n  function d3_xhr_fixCallback(callback) {                                                                              // 1684\n    return callback.length === 1 ? function(error, request) {                                                          // 1685\n      callback(error == null ? request : null);                                                                        // 1686\n    } : callback;                                                                                                      // 1687\n  }                                                                                                                    // 1688\n  function d3_dsv(delimiter, mimeType) {                                                                               // 1689\n    var reFormat = new RegExp('[\"' + delimiter + \"\\n]\"), delimiterCode = delimiter.charCodeAt(0);                      // 1690\n    function dsv(url, row, callback) {                                                                                 // 1691\n      if (arguments.length < 3) callback = row, row = null;                                                            // 1692\n      var xhr = d3.xhr(url, mimeType, callback);                                                                       // 1693\n      xhr.row = function(_) {                                                                                          // 1694\n        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;                 // 1695\n      };                                                                                                               // 1696\n      return xhr.row(row);                                                                                             // 1697\n    }                                                                                                                  // 1698\n    function response(request) {                                                                                       // 1699\n      return dsv.parse(request.responseText);                                                                          // 1700\n    }                                                                                                                  // 1701\n    function typedResponse(f) {                                                                                        // 1702\n      return function(request) {                                                                                       // 1703\n        return dsv.parse(request.responseText, f);                                                                     // 1704\n      };                                                                                                               // 1705\n    }                                                                                                                  // 1706\n    dsv.parse = function(text, f) {                                                                                    // 1707\n      var o;                                                                                                           // 1708\n      return dsv.parseRows(text, function(row, i) {                                                                    // 1709\n        if (o) return o(row, i - 1);                                                                                   // 1710\n        var a = new Function(\"d\", \"return {\" + row.map(function(name, i) {                                             // 1711\n          return JSON.stringify(name) + \": d[\" + i + \"]\";                                                              // 1712\n        }).join(\",\") + \"}\");                                                                                           // 1713\n        o = f ? function(row, i) {                                                                                     // 1714\n          return f(a(row), i);                                                                                         // 1715\n        } : a;                                                                                                         // 1716\n      });                                                                                                              // 1717\n    };                                                                                                                 // 1718\n    dsv.parseRows = function(text, f) {                                                                                // 1719\n      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;                                        // 1720\n      function token() {                                                                                               // 1721\n        if (I >= N) return EOF;                                                                                        // 1722\n        if (eol) return eol = false, EOL;                                                                              // 1723\n        var j = I;                                                                                                     // 1724\n        if (text.charCodeAt(j) === 34) {                                                                               // 1725\n          var i = j;                                                                                                   // 1726\n          while (i++ < N) {                                                                                            // 1727\n            if (text.charCodeAt(i) === 34) {                                                                           // 1728\n              if (text.charCodeAt(i + 1) !== 34) break;                                                                // 1729\n              ++i;                                                                                                     // 1730\n            }                                                                                                          // 1731\n          }                                                                                                            // 1732\n          I = i + 2;                                                                                                   // 1733\n          var c = text.charCodeAt(i + 1);                                                                              // 1734\n          if (c === 13) {                                                                                              // 1735\n            eol = true;                                                                                                // 1736\n            if (text.charCodeAt(i + 2) === 10) ++I;                                                                    // 1737\n          } else if (c === 10) {                                                                                       // 1738\n            eol = true;                                                                                                // 1739\n          }                                                                                                            // 1740\n          return text.substring(j + 1, i).replace(/\"\"/g, '\"');                                                         // 1741\n        }                                                                                                              // 1742\n        while (I < N) {                                                                                                // 1743\n          var c = text.charCodeAt(I++), k = 1;                                                                         // 1744\n          if (c === 10) eol = true; else if (c === 13) {                                                               // 1745\n            eol = true;                                                                                                // 1746\n            if (text.charCodeAt(I) === 10) ++I, ++k;                                                                   // 1747\n          } else if (c !== delimiterCode) continue;                                                                    // 1748\n          return text.substring(j, I - k);                                                                             // 1749\n        }                                                                                                              // 1750\n        return text.substring(j);                                                                                      // 1751\n      }                                                                                                                // 1752\n      while ((t = token()) !== EOF) {                                                                                  // 1753\n        var a = [];                                                                                                    // 1754\n        while (t !== EOL && t !== EOF) {                                                                               // 1755\n          a.push(t);                                                                                                   // 1756\n          t = token();                                                                                                 // 1757\n        }                                                                                                              // 1758\n        if (f && !(a = f(a, n++))) continue;                                                                           // 1759\n        rows.push(a);                                                                                                  // 1760\n      }                                                                                                                // 1761\n      return rows;                                                                                                     // 1762\n    };                                                                                                                 // 1763\n    dsv.format = function(rows) {                                                                                      // 1764\n      if (Array.isArray(rows[0])) return dsv.formatRows(rows);                                                         // 1765\n      var fieldSet = new d3_Set(), fields = [];                                                                        // 1766\n      rows.forEach(function(row) {                                                                                     // 1767\n        for (var field in row) {                                                                                       // 1768\n          if (!fieldSet.has(field)) {                                                                                  // 1769\n            fields.push(fieldSet.add(field));                                                                          // 1770\n          }                                                                                                            // 1771\n        }                                                                                                              // 1772\n      });                                                                                                              // 1773\n      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {                               // 1774\n        return fields.map(function(field) {                                                                            // 1775\n          return formatValue(row[field]);                                                                              // 1776\n        }).join(delimiter);                                                                                            // 1777\n      })).join(\"\\n\");                                                                                                  // 1778\n    };                                                                                                                 // 1779\n    dsv.formatRows = function(rows) {                                                                                  // 1780\n      return rows.map(formatRow).join(\"\\n\");                                                                           // 1781\n    };                                                                                                                 // 1782\n    function formatRow(row) {                                                                                          // 1783\n      return row.map(formatValue).join(delimiter);                                                                     // 1784\n    }                                                                                                                  // 1785\n    function formatValue(text) {                                                                                       // 1786\n      return reFormat.test(text) ? '\"' + text.replace(/\\\"/g, '\"\"') + '\"' : text;                                       // 1787\n    }                                                                                                                  // 1788\n    return dsv;                                                                                                        // 1789\n  }                                                                                                                    // 1790\n  d3.csv = d3_dsv(\",\", \"text/csv\");                                                                                    // 1791\n  d3.tsv = d3_dsv(\"\\t\", \"text/tab-separated-values\");                                                                  // 1792\n  var d3_timer_id = 0, d3_timer_byId = {}, d3_timer_queue = null, d3_timer_interval, d3_timer_timeout;                 // 1793\n  d3.timer = function(callback, delay, then) {                                                                         // 1794\n    if (arguments.length < 3) {                                                                                        // 1795\n      if (arguments.length < 2) delay = 0; else if (!isFinite(delay)) return;                                          // 1796\n      then = Date.now();                                                                                               // 1797\n    }                                                                                                                  // 1798\n    var timer = d3_timer_byId[callback.id];                                                                            // 1799\n    if (timer && timer.callback === callback) {                                                                        // 1800\n      timer.then = then;                                                                                               // 1801\n      timer.delay = delay;                                                                                             // 1802\n    } else d3_timer_byId[callback.id = ++d3_timer_id] = d3_timer_queue = {                                             // 1803\n      callback: callback,                                                                                              // 1804\n      then: then,                                                                                                      // 1805\n      delay: delay,                                                                                                    // 1806\n      next: d3_timer_queue                                                                                             // 1807\n    };                                                                                                                 // 1808\n    if (!d3_timer_interval) {                                                                                          // 1809\n      d3_timer_timeout = clearTimeout(d3_timer_timeout);                                                               // 1810\n      d3_timer_interval = 1;                                                                                           // 1811\n      d3_timer_frame(d3_timer_step);                                                                                   // 1812\n    }                                                                                                                  // 1813\n  };                                                                                                                   // 1814\n  function d3_timer_step() {                                                                                           // 1815\n    var elapsed, now = Date.now(), t1 = d3_timer_queue;                                                                // 1816\n    while (t1) {                                                                                                       // 1817\n      elapsed = now - t1.then;                                                                                         // 1818\n      if (elapsed >= t1.delay) t1.flush = t1.callback(elapsed);                                                        // 1819\n      t1 = t1.next;                                                                                                    // 1820\n    }                                                                                                                  // 1821\n    var delay = d3_timer_flush() - now;                                                                                // 1822\n    if (delay > 24) {                                                                                                  // 1823\n      if (isFinite(delay)) {                                                                                           // 1824\n        clearTimeout(d3_timer_timeout);                                                                                // 1825\n        d3_timer_timeout = setTimeout(d3_timer_step, delay);                                                           // 1826\n      }                                                                                                                // 1827\n      d3_timer_interval = 0;                                                                                           // 1828\n    } else {                                                                                                           // 1829\n      d3_timer_interval = 1;                                                                                           // 1830\n      d3_timer_frame(d3_timer_step);                                                                                   // 1831\n    }                                                                                                                  // 1832\n  }                                                                                                                    // 1833\n  d3.timer.flush = function() {                                                                                        // 1834\n    var elapsed, now = Date.now(), t1 = d3_timer_queue;                                                                // 1835\n    while (t1) {                                                                                                       // 1836\n      elapsed = now - t1.then;                                                                                         // 1837\n      if (!t1.delay) t1.flush = t1.callback(elapsed);                                                                  // 1838\n      t1 = t1.next;                                                                                                    // 1839\n    }                                                                                                                  // 1840\n    d3_timer_flush();                                                                                                  // 1841\n  };                                                                                                                   // 1842\n  function d3_timer_flush() {                                                                                          // 1843\n    var t0 = null, t1 = d3_timer_queue, then = Infinity;                                                               // 1844\n    while (t1) {                                                                                                       // 1845\n      if (t1.flush) {                                                                                                  // 1846\n        delete d3_timer_byId[t1.callback.id];                                                                          // 1847\n        t1 = t0 ? t0.next = t1.next : d3_timer_queue = t1.next;                                                        // 1848\n      } else {                                                                                                         // 1849\n        then = Math.min(then, t1.then + t1.delay);                                                                     // 1850\n        t1 = (t0 = t1).next;                                                                                           // 1851\n      }                                                                                                                // 1852\n    }                                                                                                                  // 1853\n    return then;                                                                                                       // 1854\n  }                                                                                                                    // 1855\n  var d3_timer_frame = d3_window.requestAnimationFrame || d3_window.webkitRequestAnimationFrame || d3_window.mozRequestAnimationFrame || d3_window.oRequestAnimationFrame || d3_window.msRequestAnimationFrame || function(callback) {\n    setTimeout(callback, 17);                                                                                          // 1857\n  };                                                                                                                   // 1858\n  var d3_format_decimalPoint = \".\", d3_format_thousandsSeparator = \",\", d3_format_grouping = [ 3, 3 ];                 // 1859\n  var d3_formatPrefixes = [ \"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"µ\", \"m\", \"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\" ].map(d3_formatPrefix);\n  d3.formatPrefix = function(value, precision) {                                                                       // 1861\n    var i = 0;                                                                                                         // 1862\n    if (value) {                                                                                                       // 1863\n      if (value < 0) value *= -1;                                                                                      // 1864\n      if (precision) value = d3.round(value, d3_format_precision(value, precision));                                   // 1865\n      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);                                                         // 1866\n      i = Math.max(-24, Math.min(24, Math.floor((i <= 0 ? i + 1 : i - 1) / 3) * 3));                                   // 1867\n    }                                                                                                                  // 1868\n    return d3_formatPrefixes[8 + i / 3];                                                                               // 1869\n  };                                                                                                                   // 1870\n  function d3_formatPrefix(d, i) {                                                                                     // 1871\n    var k = Math.pow(10, Math.abs(8 - i) * 3);                                                                         // 1872\n    return {                                                                                                           // 1873\n      scale: i > 8 ? function(d) {                                                                                     // 1874\n        return d / k;                                                                                                  // 1875\n      } : function(d) {                                                                                                // 1876\n        return d * k;                                                                                                  // 1877\n      },                                                                                                               // 1878\n      symbol: d                                                                                                        // 1879\n    };                                                                                                                 // 1880\n  }                                                                                                                    // 1881\n  d3.round = function(x, n) {                                                                                          // 1882\n    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);                                              // 1883\n  };                                                                                                                   // 1884\n  d3.format = function(specifier) {                                                                                    // 1885\n    var match = d3_format_re.exec(specifier), fill = match[1] || \" \", align = match[2] || \">\", sign = match[3] || \"\", basePrefix = match[4] || \"\", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, suffix = \"\", integer = false;\n    if (precision) precision = +precision.substring(1);                                                                // 1887\n    if (zfill || fill === \"0\" && align === \"=\") {                                                                      // 1888\n      zfill = fill = \"0\";                                                                                              // 1889\n      align = \"=\";                                                                                                     // 1890\n      if (comma) width -= Math.floor((width - 1) / 4);                                                                 // 1891\n    }                                                                                                                  // 1892\n    switch (type) {                                                                                                    // 1893\n     case \"n\":                                                                                                         // 1894\n      comma = true;                                                                                                    // 1895\n      type = \"g\";                                                                                                      // 1896\n      break;                                                                                                           // 1897\n                                                                                                                       // 1898\n     case \"%\":                                                                                                         // 1899\n      scale = 100;                                                                                                     // 1900\n      suffix = \"%\";                                                                                                    // 1901\n      type = \"f\";                                                                                                      // 1902\n      break;                                                                                                           // 1903\n                                                                                                                       // 1904\n     case \"p\":                                                                                                         // 1905\n      scale = 100;                                                                                                     // 1906\n      suffix = \"%\";                                                                                                    // 1907\n      type = \"r\";                                                                                                      // 1908\n      break;                                                                                                           // 1909\n                                                                                                                       // 1910\n     case \"b\":                                                                                                         // 1911\n     case \"o\":                                                                                                         // 1912\n     case \"x\":                                                                                                         // 1913\n     case \"X\":                                                                                                         // 1914\n      if (basePrefix) basePrefix = \"0\" + type.toLowerCase();                                                           // 1915\n                                                                                                                       // 1916\n     case \"c\":                                                                                                         // 1917\n     case \"d\":                                                                                                         // 1918\n      integer = true;                                                                                                  // 1919\n      precision = 0;                                                                                                   // 1920\n      break;                                                                                                           // 1921\n                                                                                                                       // 1922\n     case \"s\":                                                                                                         // 1923\n      scale = -1;                                                                                                      // 1924\n      type = \"r\";                                                                                                      // 1925\n      break;                                                                                                           // 1926\n    }                                                                                                                  // 1927\n    if (basePrefix === \"#\") basePrefix = \"\";                                                                           // 1928\n    if (type == \"r\" && !precision) type = \"g\";                                                                         // 1929\n    if (precision != null) {                                                                                           // 1930\n      if (type == \"g\") precision = Math.max(1, Math.min(21, precision)); else if (type == \"e\" || type == \"f\") precision = Math.max(0, Math.min(20, precision));\n    }                                                                                                                  // 1932\n    type = d3_format_types.get(type) || d3_format_typeDefault;                                                         // 1933\n    var zcomma = zfill && comma;                                                                                       // 1934\n    return function(value) {                                                                                           // 1935\n      if (integer && value % 1) return \"\";                                                                             // 1936\n      var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, \"-\") : sign;                         // 1937\n      if (scale < 0) {                                                                                                 // 1938\n        var prefix = d3.formatPrefix(value, precision);                                                                // 1939\n        value = prefix.scale(value);                                                                                   // 1940\n        suffix = prefix.symbol;                                                                                        // 1941\n      } else {                                                                                                         // 1942\n        value *= scale;                                                                                                // 1943\n      }                                                                                                                // 1944\n      value = type(value, precision);                                                                                  // 1945\n      if (!zfill && comma) value = d3_format_group(value);                                                             // 1946\n      var length = basePrefix.length + value.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : \"\";\n      if (zcomma) value = d3_format_group(padding + value);                                                            // 1948\n      if (d3_format_decimalPoint) value.replace(\".\", d3_format_decimalPoint);                                          // 1949\n      negative += basePrefix;                                                                                          // 1950\n      return (align === \"<\" ? negative + value + padding : align === \">\" ? padding + negative + value : align === \"^\" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + suffix;\n    };                                                                                                                 // 1952\n  };                                                                                                                   // 1953\n  var d3_format_re = /(?:([^{])?([<>=^]))?([+\\- ])?(#)?(0)?(\\d+)?(,)?(\\.-?\\d+)?([a-z%])?/i;                            // 1954\n  var d3_format_types = d3.map({                                                                                       // 1955\n    b: function(x) {                                                                                                   // 1956\n      return x.toString(2);                                                                                            // 1957\n    },                                                                                                                 // 1958\n    c: function(x) {                                                                                                   // 1959\n      return String.fromCharCode(x);                                                                                   // 1960\n    },                                                                                                                 // 1961\n    o: function(x) {                                                                                                   // 1962\n      return x.toString(8);                                                                                            // 1963\n    },                                                                                                                 // 1964\n    x: function(x) {                                                                                                   // 1965\n      return x.toString(16);                                                                                           // 1966\n    },                                                                                                                 // 1967\n    X: function(x) {                                                                                                   // 1968\n      return x.toString(16).toUpperCase();                                                                             // 1969\n    },                                                                                                                 // 1970\n    g: function(x, p) {                                                                                                // 1971\n      return x.toPrecision(p);                                                                                         // 1972\n    },                                                                                                                 // 1973\n    e: function(x, p) {                                                                                                // 1974\n      return x.toExponential(p);                                                                                       // 1975\n    },                                                                                                                 // 1976\n    f: function(x, p) {                                                                                                // 1977\n      return x.toFixed(p);                                                                                             // 1978\n    },                                                                                                                 // 1979\n    r: function(x, p) {                                                                                                // 1980\n      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));\n    }                                                                                                                  // 1982\n  });                                                                                                                  // 1983\n  function d3_format_precision(x, p) {                                                                                 // 1984\n    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);                                                           // 1985\n  }                                                                                                                    // 1986\n  function d3_format_typeDefault(x) {                                                                                  // 1987\n    return x + \"\";                                                                                                     // 1988\n  }                                                                                                                    // 1989\n  var d3_format_group = d3_identity;                                                                                   // 1990\n  if (d3_format_grouping) {                                                                                            // 1991\n    var d3_format_groupingLength = d3_format_grouping.length;                                                          // 1992\n    d3_format_group = function(value) {                                                                                // 1993\n      var i = value.lastIndexOf(\".\"), f = i >= 0 ? \".\" + value.substring(i + 1) : (i = value.length,                   // 1994\n      \"\"), t = [], j = 0, g = d3_format_grouping[0];                                                                   // 1995\n      while (i > 0 && g > 0) {                                                                                         // 1996\n        t.push(value.substring(i -= g, i + g));                                                                        // 1997\n        g = d3_format_grouping[j = (j + 1) % d3_format_groupingLength];                                                // 1998\n      }                                                                                                                // 1999\n      return t.reverse().join(d3_format_thousandsSeparator || \"\") + f;                                                 // 2000\n    };                                                                                                                 // 2001\n  }                                                                                                                    // 2002\n  d3.geo = {};                                                                                                         // 2003\n  d3.geo.stream = function(object, listener) {                                                                         // 2004\n    if (d3_geo_streamObjectType.hasOwnProperty(object.type)) {                                                         // 2005\n      d3_geo_streamObjectType[object.type](object, listener);                                                          // 2006\n    } else {                                                                                                           // 2007\n      d3_geo_streamGeometry(object, listener);                                                                         // 2008\n    }                                                                                                                  // 2009\n  };                                                                                                                   // 2010\n  function d3_geo_streamGeometry(geometry, listener) {                                                                 // 2011\n    if (d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {                                                     // 2012\n      d3_geo_streamGeometryType[geometry.type](geometry, listener);                                                    // 2013\n    }                                                                                                                  // 2014\n  }                                                                                                                    // 2015\n  var d3_geo_streamObjectType = {                                                                                      // 2016\n    Feature: function(feature, listener) {                                                                             // 2017\n      d3_geo_streamGeometry(feature.geometry, listener);                                                               // 2018\n    },                                                                                                                 // 2019\n    FeatureCollection: function(object, listener) {                                                                    // 2020\n      var features = object.features, i = -1, n = features.length;                                                     // 2021\n      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);                                           // 2022\n    }                                                                                                                  // 2023\n  };                                                                                                                   // 2024\n  var d3_geo_streamGeometryType = {                                                                                    // 2025\n    Sphere: function(object, listener) {                                                                               // 2026\n      listener.sphere();                                                                                               // 2027\n    },                                                                                                                 // 2028\n    Point: function(object, listener) {                                                                                // 2029\n      var coordinate = object.coordinates;                                                                             // 2030\n      listener.point(coordinate[0], coordinate[1]);                                                                    // 2031\n    },                                                                                                                 // 2032\n    MultiPoint: function(object, listener) {                                                                           // 2033\n      var coordinates = object.coordinates, i = -1, n = coordinates.length, coordinate;                                // 2034\n      while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1]);                       // 2035\n    },                                                                                                                 // 2036\n    LineString: function(object, listener) {                                                                           // 2037\n      d3_geo_streamLine(object.coordinates, listener, 0);                                                              // 2038\n    },                                                                                                                 // 2039\n    MultiLineString: function(object, listener) {                                                                      // 2040\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;                                            // 2041\n      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);                                                  // 2042\n    },                                                                                                                 // 2043\n    Polygon: function(object, listener) {                                                                              // 2044\n      d3_geo_streamPolygon(object.coordinates, listener);                                                              // 2045\n    },                                                                                                                 // 2046\n    MultiPolygon: function(object, listener) {                                                                         // 2047\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;                                            // 2048\n      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);                                                  // 2049\n    },                                                                                                                 // 2050\n    GeometryCollection: function(object, listener) {                                                                   // 2051\n      var geometries = object.geometries, i = -1, n = geometries.length;                                               // 2052\n      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);                                                  // 2053\n    }                                                                                                                  // 2054\n  };                                                                                                                   // 2055\n  function d3_geo_streamLine(coordinates, listener, closed) {                                                          // 2056\n    var i = -1, n = coordinates.length - closed, coordinate;                                                           // 2057\n    listener.lineStart();                                                                                              // 2058\n    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1]);                         // 2059\n    listener.lineEnd();                                                                                                // 2060\n  }                                                                                                                    // 2061\n  function d3_geo_streamPolygon(coordinates, listener) {                                                               // 2062\n    var i = -1, n = coordinates.length;                                                                                // 2063\n    listener.polygonStart();                                                                                           // 2064\n    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);                                                    // 2065\n    listener.polygonEnd();                                                                                             // 2066\n  }                                                                                                                    // 2067\n  d3.geo.area = function(object) {                                                                                     // 2068\n    d3_geo_areaSum = 0;                                                                                                // 2069\n    d3.geo.stream(object, d3_geo_area);                                                                                // 2070\n    return d3_geo_areaSum;                                                                                             // 2071\n  };                                                                                                                   // 2072\n  var d3_geo_areaSum, d3_geo_areaRingU, d3_geo_areaRingV;                                                              // 2073\n  var d3_geo_area = {                                                                                                  // 2074\n    sphere: function() {                                                                                               // 2075\n      d3_geo_areaSum += 4 * π;                                                                                         // 2076\n    },                                                                                                                 // 2077\n    point: d3_noop,                                                                                                    // 2078\n    lineStart: d3_noop,                                                                                                // 2079\n    lineEnd: d3_noop,                                                                                                  // 2080\n    polygonStart: function() {                                                                                         // 2081\n      d3_geo_areaRingU = 1, d3_geo_areaRingV = 0;                                                                      // 2082\n      d3_geo_area.lineStart = d3_geo_areaRingStart;                                                                    // 2083\n    },                                                                                                                 // 2084\n    polygonEnd: function() {                                                                                           // 2085\n      var area = 2 * Math.atan2(d3_geo_areaRingV, d3_geo_areaRingU);                                                   // 2086\n      d3_geo_areaSum += area < 0 ? 4 * π + area : area;                                                                // 2087\n      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;                                       // 2088\n    }                                                                                                                  // 2089\n  };                                                                                                                   // 2090\n  function d3_geo_areaRingStart() {                                                                                    // 2091\n    var λ00, φ00, λ0, cosφ0, sinφ0;                                                                                    // 2092\n    d3_geo_area.point = function(λ, φ) {                                                                               // 2093\n      d3_geo_area.point = nextPoint;                                                                                   // 2094\n      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4),                           // 2095\n      sinφ0 = Math.sin(φ);                                                                                             // 2096\n    };                                                                                                                 // 2097\n    function nextPoint(λ, φ) {                                                                                         // 2098\n      λ *= d3_radians;                                                                                                 // 2099\n      φ = φ * d3_radians / 2 + π / 4;                                                                                  // 2100\n      var dλ = λ - λ0, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u0 = d3_geo_areaRingU, v0 = d3_geo_areaRingV, u = cosφ0 * cosφ + k * Math.cos(dλ), v = k * Math.sin(dλ);\n      d3_geo_areaRingU = u0 * u - v0 * v;                                                                              // 2102\n      d3_geo_areaRingV = v0 * u + u0 * v;                                                                              // 2103\n      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;                                                                              // 2104\n    }                                                                                                                  // 2105\n    d3_geo_area.lineEnd = function() {                                                                                 // 2106\n      nextPoint(λ00, φ00);                                                                                             // 2107\n    };                                                                                                                 // 2108\n  }                                                                                                                    // 2109\n  d3.geo.bounds = d3_geo_bounds(d3_identity);                                                                          // 2110\n  function d3_geo_bounds(projectStream) {                                                                              // 2111\n    var x0, y0, x1, y1;                                                                                                // 2112\n    var bound = {                                                                                                      // 2113\n      point: boundPoint,                                                                                               // 2114\n      lineStart: d3_noop,                                                                                              // 2115\n      lineEnd: d3_noop,                                                                                                // 2116\n      polygonStart: function() {                                                                                       // 2117\n        bound.lineEnd = boundPolygonLineEnd;                                                                           // 2118\n      },                                                                                                               // 2119\n      polygonEnd: function() {                                                                                         // 2120\n        bound.point = boundPoint;                                                                                      // 2121\n      }                                                                                                                // 2122\n    };                                                                                                                 // 2123\n    function boundPoint(x, y) {                                                                                        // 2124\n      if (x < x0) x0 = x;                                                                                              // 2125\n      if (x > x1) x1 = x;                                                                                              // 2126\n      if (y < y0) y0 = y;                                                                                              // 2127\n      if (y > y1) y1 = y;                                                                                              // 2128\n    }                                                                                                                  // 2129\n    function boundPolygonLineEnd() {                                                                                   // 2130\n      bound.point = bound.lineEnd = d3_noop;                                                                           // 2131\n    }                                                                                                                  // 2132\n    return function(feature) {                                                                                         // 2133\n      y1 = x1 = -(x0 = y0 = Infinity);                                                                                 // 2134\n      d3.geo.stream(feature, projectStream(bound));                                                                    // 2135\n      return [ [ x0, y0 ], [ x1, y1 ] ];                                                                               // 2136\n    };                                                                                                                 // 2137\n  }                                                                                                                    // 2138\n  d3.geo.centroid = function(object) {                                                                                 // 2139\n    d3_geo_centroidDimension = d3_geo_centroidW = d3_geo_centroidX = d3_geo_centroidY = d3_geo_centroidZ = 0;          // 2140\n    d3.geo.stream(object, d3_geo_centroid);                                                                            // 2141\n    var m;                                                                                                             // 2142\n    if (d3_geo_centroidW && Math.abs(m = Math.sqrt(d3_geo_centroidX * d3_geo_centroidX + d3_geo_centroidY * d3_geo_centroidY + d3_geo_centroidZ * d3_geo_centroidZ)) > ε) {\n      return [ Math.atan2(d3_geo_centroidY, d3_geo_centroidX) * d3_degrees, Math.asin(Math.max(-1, Math.min(1, d3_geo_centroidZ / m))) * d3_degrees ];\n    }                                                                                                                  // 2145\n  };                                                                                                                   // 2146\n  var d3_geo_centroidDimension, d3_geo_centroidW, d3_geo_centroidX, d3_geo_centroidY, d3_geo_centroidZ;                // 2147\n  var d3_geo_centroid = {                                                                                              // 2148\n    sphere: function() {                                                                                               // 2149\n      if (d3_geo_centroidDimension < 2) {                                                                              // 2150\n        d3_geo_centroidDimension = 2;                                                                                  // 2151\n        d3_geo_centroidW = d3_geo_centroidX = d3_geo_centroidY = d3_geo_centroidZ = 0;                                 // 2152\n      }                                                                                                                // 2153\n    },                                                                                                                 // 2154\n    point: d3_geo_centroidPoint,                                                                                       // 2155\n    lineStart: d3_geo_centroidLineStart,                                                                               // 2156\n    lineEnd: d3_geo_centroidLineEnd,                                                                                   // 2157\n    polygonStart: function() {                                                                                         // 2158\n      if (d3_geo_centroidDimension < 2) {                                                                              // 2159\n        d3_geo_centroidDimension = 2;                                                                                  // 2160\n        d3_geo_centroidW = d3_geo_centroidX = d3_geo_centroidY = d3_geo_centroidZ = 0;                                 // 2161\n      }                                                                                                                // 2162\n      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;                                                            // 2163\n    },                                                                                                                 // 2164\n    polygonEnd: function() {                                                                                           // 2165\n      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;                                                            // 2166\n    }                                                                                                                  // 2167\n  };                                                                                                                   // 2168\n  function d3_geo_centroidPoint(λ, φ) {                                                                                // 2169\n    if (d3_geo_centroidDimension) return;                                                                              // 2170\n    ++d3_geo_centroidW;                                                                                                // 2171\n    λ *= d3_radians;                                                                                                   // 2172\n    var cosφ = Math.cos(φ *= d3_radians);                                                                              // 2173\n    d3_geo_centroidX += (cosφ * Math.cos(λ) - d3_geo_centroidX) / d3_geo_centroidW;                                    // 2174\n    d3_geo_centroidY += (cosφ * Math.sin(λ) - d3_geo_centroidY) / d3_geo_centroidW;                                    // 2175\n    d3_geo_centroidZ += (Math.sin(φ) - d3_geo_centroidZ) / d3_geo_centroidW;                                           // 2176\n  }                                                                                                                    // 2177\n  function d3_geo_centroidRingStart() {                                                                                // 2178\n    var λ00, φ00;                                                                                                      // 2179\n    d3_geo_centroidDimension = 1;                                                                                      // 2180\n    d3_geo_centroidLineStart();                                                                                        // 2181\n    d3_geo_centroidDimension = 2;                                                                                      // 2182\n    var linePoint = d3_geo_centroid.point;                                                                             // 2183\n    d3_geo_centroid.point = function(λ, φ) {                                                                           // 2184\n      linePoint(λ00 = λ, φ00 = φ);                                                                                     // 2185\n    };                                                                                                                 // 2186\n    d3_geo_centroid.lineEnd = function() {                                                                             // 2187\n      d3_geo_centroid.point(λ00, φ00);                                                                                 // 2188\n      d3_geo_centroidLineEnd();                                                                                        // 2189\n      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;                                                                // 2190\n    };                                                                                                                 // 2191\n  }                                                                                                                    // 2192\n  function d3_geo_centroidLineStart() {                                                                                // 2193\n    var x0, y0, z0;                                                                                                    // 2194\n    if (d3_geo_centroidDimension > 1) return;                                                                          // 2195\n    if (d3_geo_centroidDimension < 1) {                                                                                // 2196\n      d3_geo_centroidDimension = 1;                                                                                    // 2197\n      d3_geo_centroidW = d3_geo_centroidX = d3_geo_centroidY = d3_geo_centroidZ = 0;                                   // 2198\n    }                                                                                                                  // 2199\n    d3_geo_centroid.point = function(λ, φ) {                                                                           // 2200\n      λ *= d3_radians;                                                                                                 // 2201\n      var cosφ = Math.cos(φ *= d3_radians);                                                                            // 2202\n      x0 = cosφ * Math.cos(λ);                                                                                         // 2203\n      y0 = cosφ * Math.sin(λ);                                                                                         // 2204\n      z0 = Math.sin(φ);                                                                                                // 2205\n      d3_geo_centroid.point = nextPoint;                                                                               // 2206\n    };                                                                                                                 // 2207\n    function nextPoint(λ, φ) {                                                                                         // 2208\n      λ *= d3_radians;                                                                                                 // 2209\n      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n      d3_geo_centroidW += w;                                                                                           // 2211\n      d3_geo_centroidX += w * (x0 + (x0 = x));                                                                         // 2212\n      d3_geo_centroidY += w * (y0 + (y0 = y));                                                                         // 2213\n      d3_geo_centroidZ += w * (z0 + (z0 = z));                                                                         // 2214\n    }                                                                                                                  // 2215\n  }                                                                                                                    // 2216\n  function d3_geo_centroidLineEnd() {                                                                                  // 2217\n    d3_geo_centroid.point = d3_geo_centroidPoint;                                                                      // 2218\n  }                                                                                                                    // 2219\n  function d3_geo_cartesian(spherical) {                                                                               // 2220\n    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);                                                        // 2221\n    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];                                                    // 2222\n  }                                                                                                                    // 2223\n  function d3_geo_cartesianDot(a, b) {                                                                                 // 2224\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];                                                                    // 2225\n  }                                                                                                                    // 2226\n  function d3_geo_cartesianCross(a, b) {                                                                               // 2227\n    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];                        // 2228\n  }                                                                                                                    // 2229\n  function d3_geo_cartesianAdd(a, b) {                                                                                 // 2230\n    a[0] += b[0];                                                                                                      // 2231\n    a[1] += b[1];                                                                                                      // 2232\n    a[2] += b[2];                                                                                                      // 2233\n  }                                                                                                                    // 2234\n  function d3_geo_cartesianScale(vector, k) {                                                                          // 2235\n    return [ vector[0] * k, vector[1] * k, vector[2] * k ];                                                            // 2236\n  }                                                                                                                    // 2237\n  function d3_geo_cartesianNormalize(d) {                                                                              // 2238\n    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);                                                        // 2239\n    d[0] /= l;                                                                                                         // 2240\n    d[1] /= l;                                                                                                         // 2241\n    d[2] /= l;                                                                                                         // 2242\n  }                                                                                                                    // 2243\n  function d3_true() {                                                                                                 // 2244\n    return true;                                                                                                       // 2245\n  }                                                                                                                    // 2246\n  function d3_geo_spherical(cartesian) {                                                                               // 2247\n    return [ Math.atan2(cartesian[1], cartesian[0]), Math.asin(Math.max(-1, Math.min(1, cartesian[2]))) ];             // 2248\n  }                                                                                                                    // 2249\n  function d3_geo_sphericalEqual(a, b) {                                                                               // 2250\n    return Math.abs(a[0] - b[0]) < ε && Math.abs(a[1] - b[1]) < ε;                                                     // 2251\n  }                                                                                                                    // 2252\n  function d3_geo_clipPolygon(segments, compare, inside, interpolate, listener) {                                      // 2253\n    var subject = [], clip = [];                                                                                       // 2254\n    segments.forEach(function(segment) {                                                                               // 2255\n      if ((n = segment.length - 1) <= 0) return;                                                                       // 2256\n      var n, p0 = segment[0], p1 = segment[n];                                                                         // 2257\n      if (d3_geo_sphericalEqual(p0, p1)) {                                                                             // 2258\n        listener.lineStart();                                                                                          // 2259\n        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);                                       // 2260\n        listener.lineEnd();                                                                                            // 2261\n        return;                                                                                                        // 2262\n      }                                                                                                                // 2263\n      var a = {                                                                                                        // 2264\n        point: p0,                                                                                                     // 2265\n        points: segment,                                                                                               // 2266\n        other: null,                                                                                                   // 2267\n        visited: false,                                                                                                // 2268\n        entry: true,                                                                                                   // 2269\n        subject: true                                                                                                  // 2270\n      }, b = {                                                                                                         // 2271\n        point: p0,                                                                                                     // 2272\n        points: [ p0 ],                                                                                                // 2273\n        other: a,                                                                                                      // 2274\n        visited: false,                                                                                                // 2275\n        entry: false,                                                                                                  // 2276\n        subject: false                                                                                                 // 2277\n      };                                                                                                               // 2278\n      a.other = b;                                                                                                     // 2279\n      subject.push(a);                                                                                                 // 2280\n      clip.push(b);                                                                                                    // 2281\n      a = {                                                                                                            // 2282\n        point: p1,                                                                                                     // 2283\n        points: [ p1 ],                                                                                                // 2284\n        other: null,                                                                                                   // 2285\n        visited: false,                                                                                                // 2286\n        entry: false,                                                                                                  // 2287\n        subject: true                                                                                                  // 2288\n      };                                                                                                               // 2289\n      b = {                                                                                                            // 2290\n        point: p1,                                                                                                     // 2291\n        points: [ p1 ],                                                                                                // 2292\n        other: a,                                                                                                      // 2293\n        visited: false,                                                                                                // 2294\n        entry: true,                                                                                                   // 2295\n        subject: false                                                                                                 // 2296\n      };                                                                                                               // 2297\n      a.other = b;                                                                                                     // 2298\n      subject.push(a);                                                                                                 // 2299\n      clip.push(b);                                                                                                    // 2300\n    });                                                                                                                // 2301\n    clip.sort(compare);                                                                                                // 2302\n    d3_geo_clipPolygonLinkCircular(subject);                                                                           // 2303\n    d3_geo_clipPolygonLinkCircular(clip);                                                                              // 2304\n    if (!subject.length) return;                                                                                       // 2305\n    if (inside) for (var i = 1, e = !inside(clip[0].point), n = clip.length; i < n; ++i) {                             // 2306\n      clip[i].entry = e = !e;                                                                                          // 2307\n    }                                                                                                                  // 2308\n    var start = subject[0], current, points, point;                                                                    // 2309\n    while (1) {                                                                                                        // 2310\n      current = start;                                                                                                 // 2311\n      while (current.visited) if ((current = current.next) === start) return;                                          // 2312\n      points = current.points;                                                                                         // 2313\n      listener.lineStart();                                                                                            // 2314\n      do {                                                                                                             // 2315\n        current.visited = current.other.visited = true;                                                                // 2316\n        if (current.entry) {                                                                                           // 2317\n          if (current.subject) {                                                                                       // 2318\n            for (var i = 0; i < points.length; i++) listener.point((point = points[i])[0], point[1]);                  // 2319\n          } else {                                                                                                     // 2320\n            interpolate(current.point, current.next.point, 1, listener);                                               // 2321\n          }                                                                                                            // 2322\n          current = current.next;                                                                                      // 2323\n        } else {                                                                                                       // 2324\n          if (current.subject) {                                                                                       // 2325\n            points = current.prev.points;                                                                              // 2326\n            for (var i = points.length; --i >= 0; ) listener.point((point = points[i])[0], point[1]);                  // 2327\n          } else {                                                                                                     // 2328\n            interpolate(current.point, current.prev.point, -1, listener);                                              // 2329\n          }                                                                                                            // 2330\n          current = current.prev;                                                                                      // 2331\n        }                                                                                                              // 2332\n        current = current.other;                                                                                       // 2333\n        points = current.points;                                                                                       // 2334\n      } while (!current.visited);                                                                                      // 2335\n      listener.lineEnd();                                                                                              // 2336\n    }                                                                                                                  // 2337\n  }                                                                                                                    // 2338\n  function d3_geo_clipPolygonLinkCircular(array) {                                                                     // 2339\n    if (!(n = array.length)) return;                                                                                   // 2340\n    var n, i = 0, a = array[0], b;                                                                                     // 2341\n    while (++i < n) {                                                                                                  // 2342\n      a.next = b = array[i];                                                                                           // 2343\n      b.prev = a;                                                                                                      // 2344\n      a = b;                                                                                                           // 2345\n    }                                                                                                                  // 2346\n    a.next = b = array[0];                                                                                             // 2347\n    b.prev = a;                                                                                                        // 2348\n  }                                                                                                                    // 2349\n  function d3_geo_clip(pointVisible, clipLine, interpolate) {                                                          // 2350\n    return function(listener) {                                                                                        // 2351\n      var line = clipLine(listener);                                                                                   // 2352\n      var clip = {                                                                                                     // 2353\n        point: point,                                                                                                  // 2354\n        lineStart: lineStart,                                                                                          // 2355\n        lineEnd: lineEnd,                                                                                              // 2356\n        polygonStart: function() {                                                                                     // 2357\n          clip.point = pointRing;                                                                                      // 2358\n          clip.lineStart = ringStart;                                                                                  // 2359\n          clip.lineEnd = ringEnd;                                                                                      // 2360\n          invisible = false;                                                                                           // 2361\n          invisibleArea = visibleArea = 0;                                                                             // 2362\n          segments = [];                                                                                               // 2363\n          listener.polygonStart();                                                                                     // 2364\n        },                                                                                                             // 2365\n        polygonEnd: function() {                                                                                       // 2366\n          clip.point = point;                                                                                          // 2367\n          clip.lineStart = lineStart;                                                                                  // 2368\n          clip.lineEnd = lineEnd;                                                                                      // 2369\n          segments = d3.merge(segments);                                                                               // 2370\n          if (segments.length) {                                                                                       // 2371\n            d3_geo_clipPolygon(segments, d3_geo_clipSort, null, interpolate, listener);                                // 2372\n          } else if (visibleArea < -ε || invisible && invisibleArea < -ε) {                                            // 2373\n            listener.lineStart();                                                                                      // 2374\n            interpolate(null, null, 1, listener);                                                                      // 2375\n            listener.lineEnd();                                                                                        // 2376\n          }                                                                                                            // 2377\n          listener.polygonEnd();                                                                                       // 2378\n          segments = null;                                                                                             // 2379\n        },                                                                                                             // 2380\n        sphere: function() {                                                                                           // 2381\n          listener.polygonStart();                                                                                     // 2382\n          listener.lineStart();                                                                                        // 2383\n          interpolate(null, null, 1, listener);                                                                        // 2384\n          listener.lineEnd();                                                                                          // 2385\n          listener.polygonEnd();                                                                                       // 2386\n        }                                                                                                              // 2387\n      };                                                                                                               // 2388\n      function point(λ, φ) {                                                                                           // 2389\n        if (pointVisible(λ, φ)) listener.point(λ, φ);                                                                  // 2390\n      }                                                                                                                // 2391\n      function pointLine(λ, φ) {                                                                                       // 2392\n        line.point(λ, φ);                                                                                              // 2393\n      }                                                                                                                // 2394\n      function lineStart() {                                                                                           // 2395\n        clip.point = pointLine;                                                                                        // 2396\n        line.lineStart();                                                                                              // 2397\n      }                                                                                                                // 2398\n      function lineEnd() {                                                                                             // 2399\n        clip.point = point;                                                                                            // 2400\n        line.lineEnd();                                                                                                // 2401\n      }                                                                                                                // 2402\n      var segments, visibleArea, invisibleArea, invisible;                                                             // 2403\n      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), ring;                                 // 2404\n      function pointRing(λ, φ) {                                                                                       // 2405\n        ringListener.point(λ, φ);                                                                                      // 2406\n        ring.push([ λ, φ ]);                                                                                           // 2407\n      }                                                                                                                // 2408\n      function ringStart() {                                                                                           // 2409\n        ringListener.lineStart();                                                                                      // 2410\n        ring = [];                                                                                                     // 2411\n      }                                                                                                                // 2412\n      function ringEnd() {                                                                                             // 2413\n        pointRing(ring[0][0], ring[0][1]);                                                                             // 2414\n        ringListener.lineEnd();                                                                                        // 2415\n        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;            // 2416\n        if (!n) {                                                                                                      // 2417\n          invisible = true;                                                                                            // 2418\n          invisibleArea += d3_geo_clipAreaRing(ring, -1);                                                              // 2419\n          ring = null;                                                                                                 // 2420\n          return;                                                                                                      // 2421\n        }                                                                                                              // 2422\n        ring = null;                                                                                                   // 2423\n        if (clean & 1) {                                                                                               // 2424\n          segment = ringSegments[0];                                                                                   // 2425\n          visibleArea += d3_geo_clipAreaRing(segment, 1);                                                              // 2426\n          var n = segment.length - 1, i = -1, point;                                                                   // 2427\n          listener.lineStart();                                                                                        // 2428\n          while (++i < n) listener.point((point = segment[i])[0], point[1]);                                           // 2429\n          listener.lineEnd();                                                                                          // 2430\n          return;                                                                                                      // 2431\n        }                                                                                                              // 2432\n        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));                    // 2433\n        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));                                                 // 2434\n      }                                                                                                                // 2435\n      return clip;                                                                                                     // 2436\n    };                                                                                                                 // 2437\n  }                                                                                                                    // 2438\n  function d3_geo_clipSegmentLength1(segment) {                                                                        // 2439\n    return segment.length > 1;                                                                                         // 2440\n  }                                                                                                                    // 2441\n  function d3_geo_clipBufferListener() {                                                                               // 2442\n    var lines = [], line;                                                                                              // 2443\n    return {                                                                                                           // 2444\n      lineStart: function() {                                                                                          // 2445\n        lines.push(line = []);                                                                                         // 2446\n      },                                                                                                               // 2447\n      point: function(λ, φ) {                                                                                          // 2448\n        line.push([ λ, φ ]);                                                                                           // 2449\n      },                                                                                                               // 2450\n      lineEnd: d3_noop,                                                                                                // 2451\n      buffer: function() {                                                                                             // 2452\n        var buffer = lines;                                                                                            // 2453\n        lines = [];                                                                                                    // 2454\n        line = null;                                                                                                   // 2455\n        return buffer;                                                                                                 // 2456\n      },                                                                                                               // 2457\n      rejoin: function() {                                                                                             // 2458\n        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));                                           // 2459\n      }                                                                                                                // 2460\n    };                                                                                                                 // 2461\n  }                                                                                                                    // 2462\n  function d3_geo_clipAreaRing(ring, invisible) {                                                                      // 2463\n    if (!(n = ring.length)) return 0;                                                                                  // 2464\n    var n, i = 0, area = 0, p = ring[0], λ = p[0], φ = p[1], cosφ = Math.cos(φ), x0 = Math.atan2(invisible * Math.sin(λ) * cosφ, Math.sin(φ)), y0 = 1 - invisible * Math.cos(λ) * cosφ, x1 = x0, x, y;\n    while (++i < n) {                                                                                                  // 2466\n      p = ring[i];                                                                                                     // 2467\n      cosφ = Math.cos(φ = p[1]);                                                                                       // 2468\n      x = Math.atan2(invisible * Math.sin(λ = p[0]) * cosφ, Math.sin(φ));                                              // 2469\n      y = 1 - invisible * Math.cos(λ) * cosφ;                                                                          // 2470\n      if (Math.abs(y0 - 2) < ε && Math.abs(y - 2) < ε) continue;                                                       // 2471\n      if (Math.abs(y) < ε || Math.abs(y0) < ε) {} else if (Math.abs(Math.abs(x - x0) - π) < ε) {                       // 2472\n        if (y + y0 > 2) area += 4 * (x - x0);                                                                          // 2473\n      } else if (Math.abs(y0 - 2) < ε) area += 4 * (x - x1); else area += ((3 * π + x - x0) % (2 * π) - π) * (y0 + y); // 2474\n      x1 = x0, x0 = x, y0 = y;                                                                                         // 2475\n    }                                                                                                                  // 2476\n    return area;                                                                                                       // 2477\n  }                                                                                                                    // 2478\n  function d3_geo_clipSort(a, b) {                                                                                     // 2479\n    return ((a = a.point)[0] < 0 ? a[1] - π / 2 - ε : π / 2 - a[1]) - ((b = b.point)[0] < 0 ? b[1] - π / 2 - ε : π / 2 - b[1]);\n  }                                                                                                                    // 2481\n  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate); // 2482\n  function d3_geo_clipAntimeridianLine(listener) {                                                                     // 2483\n    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;                                                                          // 2484\n    return {                                                                                                           // 2485\n      lineStart: function() {                                                                                          // 2486\n        listener.lineStart();                                                                                          // 2487\n        clean = 1;                                                                                                     // 2488\n      },                                                                                                               // 2489\n      point: function(λ1, φ1) {                                                                                        // 2490\n        var sλ1 = λ1 > 0 ? π : -π, dλ = Math.abs(λ1 - λ0);                                                             // 2491\n        if (Math.abs(dλ - π) < ε) {                                                                                    // 2492\n          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? π / 2 : -π / 2);                                                 // 2493\n          listener.point(sλ0, φ0);                                                                                     // 2494\n          listener.lineEnd();                                                                                          // 2495\n          listener.lineStart();                                                                                        // 2496\n          listener.point(sλ1, φ0);                                                                                     // 2497\n          listener.point(λ1, φ0);                                                                                      // 2498\n          clean = 0;                                                                                                   // 2499\n        } else if (sλ0 !== sλ1 && dλ >= π) {                                                                           // 2500\n          if (Math.abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;                                                                   // 2501\n          if (Math.abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;                                                                   // 2502\n          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);                                                       // 2503\n          listener.point(sλ0, φ0);                                                                                     // 2504\n          listener.lineEnd();                                                                                          // 2505\n          listener.lineStart();                                                                                        // 2506\n          listener.point(sλ1, φ0);                                                                                     // 2507\n          clean = 0;                                                                                                   // 2508\n        }                                                                                                              // 2509\n        listener.point(λ0 = λ1, φ0 = φ1);                                                                              // 2510\n        sλ0 = sλ1;                                                                                                     // 2511\n      },                                                                                                               // 2512\n      lineEnd: function() {                                                                                            // 2513\n        listener.lineEnd();                                                                                            // 2514\n        λ0 = φ0 = NaN;                                                                                                 // 2515\n      },                                                                                                               // 2516\n      clean: function() {                                                                                              // 2517\n        return 2 - clean;                                                                                              // 2518\n      }                                                                                                                // 2519\n    };                                                                                                                 // 2520\n  }                                                                                                                    // 2521\n  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {                                                          // 2522\n    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);                                                                    // 2523\n    return Math.abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;\n  }                                                                                                                    // 2525\n  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {                                         // 2526\n    var φ;                                                                                                             // 2527\n    if (from == null) {                                                                                                // 2528\n      φ = direction * π / 2;                                                                                           // 2529\n      listener.point(-π, φ);                                                                                           // 2530\n      listener.point(0, φ);                                                                                            // 2531\n      listener.point(π, φ);                                                                                            // 2532\n      listener.point(π, 0);                                                                                            // 2533\n      listener.point(π, -φ);                                                                                           // 2534\n      listener.point(0, -φ);                                                                                           // 2535\n      listener.point(-π, -φ);                                                                                          // 2536\n      listener.point(-π, 0);                                                                                           // 2537\n      listener.point(-π, φ);                                                                                           // 2538\n    } else if (Math.abs(from[0] - to[0]) > ε) {                                                                        // 2539\n      var s = (from[0] < to[0] ? 1 : -1) * π;                                                                          // 2540\n      φ = direction * s / 2;                                                                                           // 2541\n      listener.point(-s, φ);                                                                                           // 2542\n      listener.point(0, φ);                                                                                            // 2543\n      listener.point(s, φ);                                                                                            // 2544\n    } else {                                                                                                           // 2545\n      listener.point(to[0], to[1]);                                                                                    // 2546\n    }                                                                                                                  // 2547\n  }                                                                                                                    // 2548\n  function d3_geo_clipCircle(radius) {                                                                                 // 2549\n    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = Math.abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);\n    return d3_geo_clip(visible, clipLine, interpolate);                                                                // 2551\n    function visible(λ, φ) {                                                                                           // 2552\n      return Math.cos(λ) * Math.cos(φ) > cr;                                                                           // 2553\n    }                                                                                                                  // 2554\n    function clipLine(listener) {                                                                                      // 2555\n      var point0, c0, v0, v00, clean;                                                                                  // 2556\n      return {                                                                                                         // 2557\n        lineStart: function() {                                                                                        // 2558\n          v00 = v0 = false;                                                                                            // 2559\n          clean = 1;                                                                                                   // 2560\n        },                                                                                                             // 2561\n        point: function(λ, φ) {                                                                                        // 2562\n          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;\n          if (!point0 && (v00 = v0 = v)) listener.lineStart();                                                         // 2564\n          if (v !== v0) {                                                                                              // 2565\n            point2 = intersect(point0, point1);                                                                        // 2566\n            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {                      // 2567\n              point1[0] += ε;                                                                                          // 2568\n              point1[1] += ε;                                                                                          // 2569\n              v = visible(point1[0], point1[1]);                                                                       // 2570\n            }                                                                                                          // 2571\n          }                                                                                                            // 2572\n          if (v !== v0) {                                                                                              // 2573\n            clean = 0;                                                                                                 // 2574\n            if (v) {                                                                                                   // 2575\n              listener.lineStart();                                                                                    // 2576\n              point2 = intersect(point1, point0);                                                                      // 2577\n              listener.point(point2[0], point2[1]);                                                                    // 2578\n            } else {                                                                                                   // 2579\n              point2 = intersect(point0, point1);                                                                      // 2580\n              listener.point(point2[0], point2[1]);                                                                    // 2581\n              listener.lineEnd();                                                                                      // 2582\n            }                                                                                                          // 2583\n            point0 = point2;                                                                                           // 2584\n          } else if (notHemisphere && point0 && smallRadius ^ v) {                                                     // 2585\n            var t;                                                                                                     // 2586\n            if (!(c & c0) && (t = intersect(point1, point0, true))) {                                                  // 2587\n              clean = 0;                                                                                               // 2588\n              if (smallRadius) {                                                                                       // 2589\n                listener.lineStart();                                                                                  // 2590\n                listener.point(t[0][0], t[0][1]);                                                                      // 2591\n                listener.point(t[1][0], t[1][1]);                                                                      // 2592\n                listener.lineEnd();                                                                                    // 2593\n              } else {                                                                                                 // 2594\n                listener.point(t[1][0], t[1][1]);                                                                      // 2595\n                listener.lineEnd();                                                                                    // 2596\n                listener.lineStart();                                                                                  // 2597\n                listener.point(t[0][0], t[0][1]);                                                                      // 2598\n              }                                                                                                        // 2599\n            }                                                                                                          // 2600\n          }                                                                                                            // 2601\n          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {                                              // 2602\n            listener.point(point1[0], point1[1]);                                                                      // 2603\n          }                                                                                                            // 2604\n          point0 = point1, v0 = v, c0 = c;                                                                             // 2605\n        },                                                                                                             // 2606\n        lineEnd: function() {                                                                                          // 2607\n          if (v0) listener.lineEnd();                                                                                  // 2608\n          point0 = null;                                                                                               // 2609\n        },                                                                                                             // 2610\n        clean: function() {                                                                                            // 2611\n          return clean | (v00 && v0) << 1;                                                                             // 2612\n        }                                                                                                              // 2613\n      };                                                                                                               // 2614\n    }                                                                                                                  // 2615\n    function intersect(a, b, two) {                                                                                    // 2616\n      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);                                                          // 2617\n      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;\n      if (!determinant) return !two && a;                                                                              // 2619\n      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);\n      d3_geo_cartesianAdd(A, B);                                                                                       // 2621\n      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);\n      if (t2 < 0) return;                                                                                              // 2623\n      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);                                              // 2624\n      d3_geo_cartesianAdd(q, A);                                                                                       // 2625\n      q = d3_geo_spherical(q);                                                                                         // 2626\n      if (!two) return q;                                                                                              // 2627\n      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;                                                               // 2628\n      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;                                                                            // 2629\n      var δλ = λ1 - λ0, polar = Math.abs(δλ - π) < ε, meridian = polar || δλ < ε;                                      // 2630\n      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;                                                                  // 2631\n      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (Math.abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {\n        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);                                                              // 2633\n        d3_geo_cartesianAdd(q1, A);                                                                                    // 2634\n        return [ q, d3_geo_spherical(q1) ];                                                                            // 2635\n      }                                                                                                                // 2636\n    }                                                                                                                  // 2637\n    function code(λ, φ) {                                                                                              // 2638\n      var r = smallRadius ? radius : π - radius, code = 0;                                                             // 2639\n      if (λ < -r) code |= 1; else if (λ > r) code |= 2;                                                                // 2640\n      if (φ < -r) code |= 4; else if (φ > r) code |= 8;                                                                // 2641\n      return code;                                                                                                     // 2642\n    }                                                                                                                  // 2643\n  }                                                                                                                    // 2644\n  var d3_geo_clipViewMAX = 1e9;                                                                                        // 2645\n  function d3_geo_clipView(x0, y0, x1, y1) {                                                                           // 2646\n    return function(listener) {                                                                                        // 2647\n      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), segments, polygon, ring;                 // 2648\n      var clip = {                                                                                                     // 2649\n        point: point,                                                                                                  // 2650\n        lineStart: lineStart,                                                                                          // 2651\n        lineEnd: lineEnd,                                                                                              // 2652\n        polygonStart: function() {                                                                                     // 2653\n          listener = bufferListener;                                                                                   // 2654\n          segments = [];                                                                                               // 2655\n          polygon = [];                                                                                                // 2656\n        },                                                                                                             // 2657\n        polygonEnd: function() {                                                                                       // 2658\n          listener = listener_;                                                                                        // 2659\n          if ((segments = d3.merge(segments)).length) {                                                                // 2660\n            listener.polygonStart();                                                                                   // 2661\n            d3_geo_clipPolygon(segments, compare, inside, interpolate, listener);                                      // 2662\n            listener.polygonEnd();                                                                                     // 2663\n          } else if (insidePolygon([ x0, y0 ])) {                                                                      // 2664\n            listener.polygonStart(), listener.lineStart();                                                             // 2665\n            interpolate(null, null, 1, listener);                                                                      // 2666\n            listener.lineEnd(), listener.polygonEnd();                                                                 // 2667\n          }                                                                                                            // 2668\n          segments = polygon = ring = null;                                                                            // 2669\n        }                                                                                                              // 2670\n      };                                                                                                               // 2671\n      function inside(point) {                                                                                         // 2672\n        var a = corner(point, -1), i = insidePolygon([ a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0 ]);               // 2673\n        return i;                                                                                                      // 2674\n      }                                                                                                                // 2675\n      function insidePolygon(p) {                                                                                      // 2676\n        var wn = 0, n = polygon.length, y = p[1];                                                                      // 2677\n        for (var i = 0; i < n; ++i) {                                                                                  // 2678\n          for (var j = 1, v = polygon[i], m = v.length, a = v[0]; j < m; ++j) {                                        // 2679\n            b = v[j];                                                                                                  // 2680\n            if (a[1] <= y) {                                                                                           // 2681\n              if (b[1] > y && isLeft(a, b, p) > 0) ++wn;                                                               // 2682\n            } else {                                                                                                   // 2683\n              if (b[1] <= y && isLeft(a, b, p) < 0) --wn;                                                              // 2684\n            }                                                                                                          // 2685\n            a = b;                                                                                                     // 2686\n          }                                                                                                            // 2687\n        }                                                                                                              // 2688\n        return wn !== 0;                                                                                               // 2689\n      }                                                                                                                // 2690\n      function isLeft(a, b, c) {                                                                                       // 2691\n        return (b[0] - a[0]) * (c[1] - a[1]) - (c[0] - a[0]) * (b[1] - a[1]);                                          // 2692\n      }                                                                                                                // 2693\n      function interpolate(from, to, direction, listener) {                                                            // 2694\n        var a = 0, a1 = 0;                                                                                             // 2695\n        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {\n          do {                                                                                                         // 2697\n            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);                                             // 2698\n          } while ((a = (a + direction + 4) % 4) !== a1);                                                              // 2699\n        } else {                                                                                                       // 2700\n          listener.point(to[0], to[1]);                                                                                // 2701\n        }                                                                                                              // 2702\n      }                                                                                                                // 2703\n      function visible(x, y) {                                                                                         // 2704\n        return x0 <= x && x <= x1 && y0 <= y && y <= y1;                                                               // 2705\n      }                                                                                                                // 2706\n      function point(x, y) {                                                                                           // 2707\n        if (visible(x, y)) listener.point(x, y);                                                                       // 2708\n      }                                                                                                                // 2709\n      var x__, y__, v__, x_, y_, v_, first;                                                                            // 2710\n      function lineStart() {                                                                                           // 2711\n        clip.point = linePoint;                                                                                        // 2712\n        if (polygon) polygon.push(ring = []);                                                                          // 2713\n        first = true;                                                                                                  // 2714\n        v_ = false;                                                                                                    // 2715\n        x_ = y_ = NaN;                                                                                                 // 2716\n      }                                                                                                                // 2717\n      function lineEnd() {                                                                                             // 2718\n        if (segments) {                                                                                                // 2719\n          linePoint(x__, y__);                                                                                         // 2720\n          if (v__ && v_) bufferListener.rejoin();                                                                      // 2721\n          segments.push(bufferListener.buffer());                                                                      // 2722\n        }                                                                                                              // 2723\n        clip.point = point;                                                                                            // 2724\n        if (v_) listener.lineEnd();                                                                                    // 2725\n      }                                                                                                                // 2726\n      function linePoint(x, y) {                                                                                       // 2727\n        x = Math.max(-d3_geo_clipViewMAX, Math.min(d3_geo_clipViewMAX, x));                                            // 2728\n        y = Math.max(-d3_geo_clipViewMAX, Math.min(d3_geo_clipViewMAX, y));                                            // 2729\n        var v = visible(x, y);                                                                                         // 2730\n        if (polygon) ring.push([ x, y ]);                                                                              // 2731\n        if (first) {                                                                                                   // 2732\n          x__ = x, y__ = y, v__ = v;                                                                                   // 2733\n          first = false;                                                                                               // 2734\n          if (v) {                                                                                                     // 2735\n            listener.lineStart();                                                                                      // 2736\n            listener.point(x, y);                                                                                      // 2737\n          }                                                                                                            // 2738\n        } else {                                                                                                       // 2739\n          if (v && v_) listener.point(x, y); else {                                                                    // 2740\n            var a = [ x_, y_ ], b = [ x, y ];                                                                          // 2741\n            if (clipLine(a, b)) {                                                                                      // 2742\n              if (!v_) {                                                                                               // 2743\n                listener.lineStart();                                                                                  // 2744\n                listener.point(a[0], a[1]);                                                                            // 2745\n              }                                                                                                        // 2746\n              listener.point(b[0], b[1]);                                                                              // 2747\n              if (!v) listener.lineEnd();                                                                              // 2748\n            } else {                                                                                                   // 2749\n              listener.lineStart();                                                                                    // 2750\n              listener.point(x, y);                                                                                    // 2751\n            }                                                                                                          // 2752\n          }                                                                                                            // 2753\n        }                                                                                                              // 2754\n        x_ = x, y_ = y, v_ = v;                                                                                        // 2755\n      }                                                                                                                // 2756\n      return clip;                                                                                                     // 2757\n    };                                                                                                                 // 2758\n    function corner(p, direction) {                                                                                    // 2759\n      return Math.abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : Math.abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : Math.abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;\n    }                                                                                                                  // 2761\n    function compare(a, b) {                                                                                           // 2762\n      return comparePoints(a.point, b.point);                                                                          // 2763\n    }                                                                                                                  // 2764\n    function comparePoints(a, b) {                                                                                     // 2765\n      var ca = corner(a, 1), cb = corner(b, 1);                                                                        // 2766\n      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];\n    }                                                                                                                  // 2768\n    function clipLine(a, b) {                                                                                          // 2769\n      var dx = b[0] - a[0], dy = b[1] - a[1], t = [ 0, 1 ];                                                            // 2770\n      if (Math.abs(dx) < ε && Math.abs(dy) < ε) return x0 <= a[0] && a[0] <= x1 && y0 <= a[1] && a[1] <= y1;           // 2771\n      if (d3_geo_clipViewT(x0 - a[0], dx, t) && d3_geo_clipViewT(a[0] - x1, -dx, t) && d3_geo_clipViewT(y0 - a[1], dy, t) && d3_geo_clipViewT(a[1] - y1, -dy, t)) {\n        if (t[1] < 1) {                                                                                                // 2773\n          b[0] = a[0] + t[1] * dx;                                                                                     // 2774\n          b[1] = a[1] + t[1] * dy;                                                                                     // 2775\n        }                                                                                                              // 2776\n        if (t[0] > 0) {                                                                                                // 2777\n          a[0] += t[0] * dx;                                                                                           // 2778\n          a[1] += t[0] * dy;                                                                                           // 2779\n        }                                                                                                              // 2780\n        return true;                                                                                                   // 2781\n      }                                                                                                                // 2782\n      return false;                                                                                                    // 2783\n    }                                                                                                                  // 2784\n  }                                                                                                                    // 2785\n  function d3_geo_clipViewT(num, denominator, t) {                                                                     // 2786\n    if (Math.abs(denominator) < ε) return num <= 0;                                                                    // 2787\n    var u = num / denominator;                                                                                         // 2788\n    if (denominator > 0) {                                                                                             // 2789\n      if (u > t[1]) return false;                                                                                      // 2790\n      if (u > t[0]) t[0] = u;                                                                                          // 2791\n    } else {                                                                                                           // 2792\n      if (u < t[0]) return false;                                                                                      // 2793\n      if (u < t[1]) t[1] = u;                                                                                          // 2794\n    }                                                                                                                  // 2795\n    return true;                                                                                                       // 2796\n  }                                                                                                                    // 2797\n  function d3_geo_compose(a, b) {                                                                                      // 2798\n    function compose(x, y) {                                                                                           // 2799\n      return x = a(x, y), b(x[0], x[1]);                                                                               // 2800\n    }                                                                                                                  // 2801\n    if (a.invert && b.invert) compose.invert = function(x, y) {                                                        // 2802\n      return x = b.invert(x, y), x && a.invert(x[0], x[1]);                                                            // 2803\n    };                                                                                                                 // 2804\n    return compose;                                                                                                    // 2805\n  }                                                                                                                    // 2806\n  function d3_geo_resample(project) {                                                                                  // 2807\n    var δ2 = .5, maxDepth = 16;                                                                                        // 2808\n    function resample(stream) {                                                                                        // 2809\n      var λ0, x0, y0, a0, b0, c0;                                                                                      // 2810\n      var resample = {                                                                                                 // 2811\n        point: point,                                                                                                  // 2812\n        lineStart: lineStart,                                                                                          // 2813\n        lineEnd: lineEnd,                                                                                              // 2814\n        polygonStart: function() {                                                                                     // 2815\n          stream.polygonStart();                                                                                       // 2816\n          resample.lineStart = polygonLineStart;                                                                       // 2817\n        },                                                                                                             // 2818\n        polygonEnd: function() {                                                                                       // 2819\n          stream.polygonEnd();                                                                                         // 2820\n          resample.lineStart = lineStart;                                                                              // 2821\n        }                                                                                                              // 2822\n      };                                                                                                               // 2823\n      function point(x, y) {                                                                                           // 2824\n        x = project(x, y);                                                                                             // 2825\n        stream.point(x[0], x[1]);                                                                                      // 2826\n      }                                                                                                                // 2827\n      function lineStart() {                                                                                           // 2828\n        x0 = NaN;                                                                                                      // 2829\n        resample.point = linePoint;                                                                                    // 2830\n        stream.lineStart();                                                                                            // 2831\n      }                                                                                                                // 2832\n      function linePoint(λ, φ) {                                                                                       // 2833\n        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);                                                         // 2834\n        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n        stream.point(x0, y0);                                                                                          // 2836\n      }                                                                                                                // 2837\n      function lineEnd() {                                                                                             // 2838\n        resample.point = point;                                                                                        // 2839\n        stream.lineEnd();                                                                                              // 2840\n      }                                                                                                                // 2841\n      function polygonLineStart() {                                                                                    // 2842\n        var λ00, φ00, x00, y00, a00, b00, c00;                                                                         // 2843\n        lineStart();                                                                                                   // 2844\n        resample.point = function(λ, φ) {                                                                              // 2845\n          linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;                               // 2846\n          resample.point = linePoint;                                                                                  // 2847\n        };                                                                                                             // 2848\n        resample.lineEnd = function() {                                                                                // 2849\n          resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);                      // 2850\n          resample.lineEnd = lineEnd;                                                                                  // 2851\n          lineEnd();                                                                                                   // 2852\n        };                                                                                                             // 2853\n      }                                                                                                                // 2854\n      return resample;                                                                                                 // 2855\n    }                                                                                                                  // 2856\n    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {                           // 2857\n      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;                                                          // 2858\n      if (d2 > 4 * δ2 && depth--) {                                                                                    // 2859\n        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = Math.abs(Math.abs(c) - 1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;\n        if (dz * dz / d2 > δ2 || Math.abs((dx * dx2 + dy * dy2) / d2 - .5) > .3) {                                     // 2861\n          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);                        // 2862\n          stream.point(x2, y2);                                                                                        // 2863\n          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);                                  // 2864\n        }                                                                                                              // 2865\n      }                                                                                                                // 2866\n    }                                                                                                                  // 2867\n    resample.precision = function(_) {                                                                                 // 2868\n      if (!arguments.length) return Math.sqrt(δ2);                                                                     // 2869\n      maxDepth = (δ2 = _ * _) > 0 && 16;                                                                               // 2870\n      return resample;                                                                                                 // 2871\n    };                                                                                                                 // 2872\n    return resample;                                                                                                   // 2873\n  }                                                                                                                    // 2874\n  d3.geo.projection = d3_geo_projection;                                                                               // 2875\n  d3.geo.projectionMutator = d3_geo_projectionMutator;                                                                 // 2876\n  function d3_geo_projection(project) {                                                                                // 2877\n    return d3_geo_projectionMutator(function() {                                                                       // 2878\n      return project;                                                                                                  // 2879\n    })();                                                                                                              // 2880\n  }                                                                                                                    // 2881\n  function d3_geo_projectionMutator(projectAt) {                                                                       // 2882\n    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {                             // 2883\n      x = project(x, y);                                                                                               // 2884\n      return [ x[0] * k + δx, δy - x[1] * k ];                                                                         // 2885\n    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null;\n    function projection(point) {                                                                                       // 2887\n      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);                                             // 2888\n      return [ point[0] * k + δx, δy - point[1] * k ];                                                                 // 2889\n    }                                                                                                                  // 2890\n    function invert(point) {                                                                                           // 2891\n      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);                                          // 2892\n      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];                                                // 2893\n    }                                                                                                                  // 2894\n    projection.stream = function(stream) {                                                                             // 2895\n      return d3_geo_projectionRadiansRotate(rotate, preclip(projectResample(postclip(stream))));                       // 2896\n    };                                                                                                                 // 2897\n    projection.clipAngle = function(_) {                                                                               // 2898\n      if (!arguments.length) return clipAngle;                                                                         // 2899\n      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);\n      return projection;                                                                                               // 2901\n    };                                                                                                                 // 2902\n    projection.clipExtent = function(_) {                                                                              // 2903\n      if (!arguments.length) return clipExtent;                                                                        // 2904\n      clipExtent = _;                                                                                                  // 2905\n      postclip = _ == null ? d3_identity : d3_geo_clipView(_[0][0], _[0][1], _[1][0], _[1][1]);                        // 2906\n      return projection;                                                                                               // 2907\n    };                                                                                                                 // 2908\n    projection.scale = function(_) {                                                                                   // 2909\n      if (!arguments.length) return k;                                                                                 // 2910\n      k = +_;                                                                                                          // 2911\n      return reset();                                                                                                  // 2912\n    };                                                                                                                 // 2913\n    projection.translate = function(_) {                                                                               // 2914\n      if (!arguments.length) return [ x, y ];                                                                          // 2915\n      x = +_[0];                                                                                                       // 2916\n      y = +_[1];                                                                                                       // 2917\n      return reset();                                                                                                  // 2918\n    };                                                                                                                 // 2919\n    projection.center = function(_) {                                                                                  // 2920\n      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];                                                // 2921\n      λ = _[0] % 360 * d3_radians;                                                                                     // 2922\n      φ = _[1] % 360 * d3_radians;                                                                                     // 2923\n      return reset();                                                                                                  // 2924\n    };                                                                                                                 // 2925\n    projection.rotate = function(_) {                                                                                  // 2926\n      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];                             // 2927\n      δλ = _[0] % 360 * d3_radians;                                                                                    // 2928\n      δφ = _[1] % 360 * d3_radians;                                                                                    // 2929\n      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;                                                                 // 2930\n      return reset();                                                                                                  // 2931\n    };                                                                                                                 // 2932\n    d3.rebind(projection, projectResample, \"precision\");                                                               // 2933\n    function reset() {                                                                                                 // 2934\n      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);                                   // 2935\n      var center = project(λ, φ);                                                                                      // 2936\n      δx = x - center[0] * k;                                                                                          // 2937\n      δy = y + center[1] * k;                                                                                          // 2938\n      return projection;                                                                                               // 2939\n    }                                                                                                                  // 2940\n    return function() {                                                                                                // 2941\n      project = projectAt.apply(this, arguments);                                                                      // 2942\n      projection.invert = project.invert && invert;                                                                    // 2943\n      return reset();                                                                                                  // 2944\n    };                                                                                                                 // 2945\n  }                                                                                                                    // 2946\n  function d3_geo_projectionRadiansRotate(rotate, stream) {                                                            // 2947\n    return {                                                                                                           // 2948\n      point: function(x, y) {                                                                                          // 2949\n        y = rotate(x * d3_radians, y * d3_radians), x = y[0];                                                          // 2950\n        stream.point(x > π ? x - 2 * π : x < -π ? x + 2 * π : x, y[1]);                                                // 2951\n      },                                                                                                               // 2952\n      sphere: function() {                                                                                             // 2953\n        stream.sphere();                                                                                               // 2954\n      },                                                                                                               // 2955\n      lineStart: function() {                                                                                          // 2956\n        stream.lineStart();                                                                                            // 2957\n      },                                                                                                               // 2958\n      lineEnd: function() {                                                                                            // 2959\n        stream.lineEnd();                                                                                              // 2960\n      },                                                                                                               // 2961\n      polygonStart: function() {                                                                                       // 2962\n        stream.polygonStart();                                                                                         // 2963\n      },                                                                                                               // 2964\n      polygonEnd: function() {                                                                                         // 2965\n        stream.polygonEnd();                                                                                           // 2966\n      }                                                                                                                // 2967\n    };                                                                                                                 // 2968\n  }                                                                                                                    // 2969\n  function d3_geo_equirectangular(λ, φ) {                                                                              // 2970\n    return [ λ, φ ];                                                                                                   // 2971\n  }                                                                                                                    // 2972\n  (d3.geo.equirectangular = function() {                                                                               // 2973\n    return d3_geo_projection(d3_geo_equirectangular);                                                                  // 2974\n  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;                                                     // 2975\n  d3.geo.rotation = function(rotate) {                                                                                 // 2976\n    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);\n    function forward(coordinates) {                                                                                    // 2978\n      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);                                  // 2979\n      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;                                  // 2980\n    }                                                                                                                  // 2981\n    forward.invert = function(coordinates) {                                                                           // 2982\n      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);                           // 2983\n      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;                                  // 2984\n    };                                                                                                                 // 2985\n    return forward;                                                                                                    // 2986\n  };                                                                                                                   // 2987\n  function d3_geo_rotation(δλ, δφ, δγ) {                                                                               // 2988\n    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_equirectangular;\n  }                                                                                                                    // 2990\n  function d3_geo_forwardRotationλ(δλ) {                                                                               // 2991\n    return function(λ, φ) {                                                                                            // 2992\n      return λ += δλ, [ λ > π ? λ - 2 * π : λ < -π ? λ + 2 * π : λ, φ ];                                               // 2993\n    };                                                                                                                 // 2994\n  }                                                                                                                    // 2995\n  function d3_geo_rotationλ(δλ) {                                                                                      // 2996\n    var rotation = d3_geo_forwardRotationλ(δλ);                                                                        // 2997\n    rotation.invert = d3_geo_forwardRotationλ(-δλ);                                                                    // 2998\n    return rotation;                                                                                                   // 2999\n  }                                                                                                                    // 3000\n  function d3_geo_rotationφγ(δφ, δγ) {                                                                                 // 3001\n    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);                        // 3002\n    function rotation(λ, φ) {                                                                                          // 3003\n      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;\n      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), Math.asin(Math.max(-1, Math.min(1, k * cosδγ + y * sinδγ))) ];\n    }                                                                                                                  // 3006\n    rotation.invert = function(λ, φ) {                                                                                 // 3007\n      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;\n      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), Math.asin(Math.max(-1, Math.min(1, k * cosδφ - x * sinδφ))) ];\n    };                                                                                                                 // 3010\n    return rotation;                                                                                                   // 3011\n  }                                                                                                                    // 3012\n  d3.geo.circle = function() {                                                                                         // 3013\n    var origin = [ 0, 0 ], angle, precision = 6, interpolate;                                                          // 3014\n    function circle() {                                                                                                // 3015\n      var center = typeof origin === \"function\" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];\n      interpolate(null, null, 1, {                                                                                     // 3017\n        point: function(x, y) {                                                                                        // 3018\n          ring.push(x = rotate(x, y));                                                                                 // 3019\n          x[0] *= d3_degrees, x[1] *= d3_degrees;                                                                      // 3020\n        }                                                                                                              // 3021\n      });                                                                                                              // 3022\n      return {                                                                                                         // 3023\n        type: \"Polygon\",                                                                                               // 3024\n        coordinates: [ ring ]                                                                                          // 3025\n      };                                                                                                               // 3026\n    }                                                                                                                  // 3027\n    circle.origin = function(x) {                                                                                      // 3028\n      if (!arguments.length) return origin;                                                                            // 3029\n      origin = x;                                                                                                      // 3030\n      return circle;                                                                                                   // 3031\n    };                                                                                                                 // 3032\n    circle.angle = function(x) {                                                                                       // 3033\n      if (!arguments.length) return angle;                                                                             // 3034\n      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);                       // 3035\n      return circle;                                                                                                   // 3036\n    };                                                                                                                 // 3037\n    circle.precision = function(_) {                                                                                   // 3038\n      if (!arguments.length) return precision;                                                                         // 3039\n      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);                       // 3040\n      return circle;                                                                                                   // 3041\n    };                                                                                                                 // 3042\n    return circle.angle(90);                                                                                           // 3043\n  };                                                                                                                   // 3044\n  function d3_geo_circleInterpolate(radius, precision) {                                                               // 3045\n    var cr = Math.cos(radius), sr = Math.sin(radius);                                                                  // 3046\n    return function(from, to, direction, listener) {                                                                   // 3047\n      if (from != null) {                                                                                              // 3048\n        from = d3_geo_circleAngle(cr, from);                                                                           // 3049\n        to = d3_geo_circleAngle(cr, to);                                                                               // 3050\n        if (direction > 0 ? from < to : from > to) from += direction * 2 * π;                                          // 3051\n      } else {                                                                                                         // 3052\n        from = radius + direction * 2 * π;                                                                             // 3053\n        to = radius;                                                                                                   // 3054\n      }                                                                                                                // 3055\n      var point;                                                                                                       // 3056\n      for (var step = direction * precision, t = from; direction > 0 ? t > to : t < to; t -= step) {                   // 3057\n        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);         // 3058\n      }                                                                                                                // 3059\n    };                                                                                                                 // 3060\n  }                                                                                                                    // 3061\n  function d3_geo_circleAngle(cr, point) {                                                                             // 3062\n    var a = d3_geo_cartesian(point);                                                                                   // 3063\n    a[0] -= cr;                                                                                                        // 3064\n    d3_geo_cartesianNormalize(a);                                                                                      // 3065\n    var angle = d3_acos(-a[1]);                                                                                        // 3066\n    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);                                           // 3067\n  }                                                                                                                    // 3068\n  d3.geo.distance = function(a, b) {                                                                                   // 3069\n    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;\n    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);\n  };                                                                                                                   // 3072\n  d3.geo.graticule = function() {                                                                                      // 3073\n    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;              // 3074\n    function graticule() {                                                                                             // 3075\n      return {                                                                                                         // 3076\n        type: \"MultiLineString\",                                                                                       // 3077\n        coordinates: lines()                                                                                           // 3078\n      };                                                                                                               // 3079\n    }                                                                                                                  // 3080\n    function lines() {                                                                                                 // 3081\n      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {\n        return Math.abs(x % DX) > ε;                                                                                   // 3083\n      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {                                 // 3084\n        return Math.abs(y % DY) > ε;                                                                                   // 3085\n      }).map(y));                                                                                                      // 3086\n    }                                                                                                                  // 3087\n    graticule.lines = function() {                                                                                     // 3088\n      return lines().map(function(coordinates) {                                                                       // 3089\n        return {                                                                                                       // 3090\n          type: \"LineString\",                                                                                          // 3091\n          coordinates: coordinates                                                                                     // 3092\n        };                                                                                                             // 3093\n      });                                                                                                              // 3094\n    };                                                                                                                 // 3095\n    graticule.outline = function() {                                                                                   // 3096\n      return {                                                                                                         // 3097\n        type: \"Polygon\",                                                                                               // 3098\n        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]              // 3099\n      };                                                                                                               // 3100\n    };                                                                                                                 // 3101\n    graticule.extent = function(_) {                                                                                   // 3102\n      if (!arguments.length) return graticule.minorExtent();                                                           // 3103\n      return graticule.majorExtent(_).minorExtent(_);                                                                  // 3104\n    };                                                                                                                 // 3105\n    graticule.majorExtent = function(_) {                                                                              // 3106\n      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];                                                        // 3107\n      X0 = +_[0][0], X1 = +_[1][0];                                                                                    // 3108\n      Y0 = +_[0][1], Y1 = +_[1][1];                                                                                    // 3109\n      if (X0 > X1) _ = X0, X0 = X1, X1 = _;                                                                            // 3110\n      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;                                                                            // 3111\n      return graticule.precision(precision);                                                                           // 3112\n    };                                                                                                                 // 3113\n    graticule.minorExtent = function(_) {                                                                              // 3114\n      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];                                                        // 3115\n      x0 = +_[0][0], x1 = +_[1][0];                                                                                    // 3116\n      y0 = +_[0][1], y1 = +_[1][1];                                                                                    // 3117\n      if (x0 > x1) _ = x0, x0 = x1, x1 = _;                                                                            // 3118\n      if (y0 > y1) _ = y0, y0 = y1, y1 = _;                                                                            // 3119\n      return graticule.precision(precision);                                                                           // 3120\n    };                                                                                                                 // 3121\n    graticule.step = function(_) {                                                                                     // 3122\n      if (!arguments.length) return graticule.minorStep();                                                             // 3123\n      return graticule.majorStep(_).minorStep(_);                                                                      // 3124\n    };                                                                                                                 // 3125\n    graticule.majorStep = function(_) {                                                                                // 3126\n      if (!arguments.length) return [ DX, DY ];                                                                        // 3127\n      DX = +_[0], DY = +_[1];                                                                                          // 3128\n      return graticule;                                                                                                // 3129\n    };                                                                                                                 // 3130\n    graticule.minorStep = function(_) {                                                                                // 3131\n      if (!arguments.length) return [ dx, dy ];                                                                        // 3132\n      dx = +_[0], dy = +_[1];                                                                                          // 3133\n      return graticule;                                                                                                // 3134\n    };                                                                                                                 // 3135\n    graticule.precision = function(_) {                                                                                // 3136\n      if (!arguments.length) return precision;                                                                         // 3137\n      precision = +_;                                                                                                  // 3138\n      x = d3_geo_graticuleX(y0, y1, 90);                                                                               // 3139\n      y = d3_geo_graticuleY(x0, x1, precision);                                                                        // 3140\n      X = d3_geo_graticuleX(Y0, Y1, 90);                                                                               // 3141\n      Y = d3_geo_graticuleY(X0, X1, precision);                                                                        // 3142\n      return graticule;                                                                                                // 3143\n    };                                                                                                                 // 3144\n    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);\n  };                                                                                                                   // 3146\n  function d3_geo_graticuleX(y0, y1, dy) {                                                                             // 3147\n    var y = d3.range(y0, y1 - ε, dy).concat(y1);                                                                       // 3148\n    return function(x) {                                                                                               // 3149\n      return y.map(function(y) {                                                                                       // 3150\n        return [ x, y ];                                                                                               // 3151\n      });                                                                                                              // 3152\n    };                                                                                                                 // 3153\n  }                                                                                                                    // 3154\n  function d3_geo_graticuleY(x0, x1, dx) {                                                                             // 3155\n    var x = d3.range(x0, x1 - ε, dx).concat(x1);                                                                       // 3156\n    return function(y) {                                                                                               // 3157\n      return x.map(function(x) {                                                                                       // 3158\n        return [ x, y ];                                                                                               // 3159\n      });                                                                                                              // 3160\n    };                                                                                                                 // 3161\n  }                                                                                                                    // 3162\n  function d3_source(d) {                                                                                              // 3163\n    return d.source;                                                                                                   // 3164\n  }                                                                                                                    // 3165\n  function d3_target(d) {                                                                                              // 3166\n    return d.target;                                                                                                   // 3167\n  }                                                                                                                    // 3168\n  d3.geo.greatArc = function() {                                                                                       // 3169\n    var source = d3_source, source_, target = d3_target, target_;                                                      // 3170\n    function greatArc() {                                                                                              // 3171\n      return {                                                                                                         // 3172\n        type: \"LineString\",                                                                                            // 3173\n        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]            // 3174\n      };                                                                                                               // 3175\n    }                                                                                                                  // 3176\n    greatArc.distance = function() {                                                                                   // 3177\n      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));      // 3178\n    };                                                                                                                 // 3179\n    greatArc.source = function(_) {                                                                                    // 3180\n      if (!arguments.length) return source;                                                                            // 3181\n      source = _, source_ = typeof _ === \"function\" ? null : _;                                                        // 3182\n      return greatArc;                                                                                                 // 3183\n    };                                                                                                                 // 3184\n    greatArc.target = function(_) {                                                                                    // 3185\n      if (!arguments.length) return target;                                                                            // 3186\n      target = _, target_ = typeof _ === \"function\" ? null : _;                                                        // 3187\n      return greatArc;                                                                                                 // 3188\n    };                                                                                                                 // 3189\n    greatArc.precision = function() {                                                                                  // 3190\n      return arguments.length ? greatArc : 0;                                                                          // 3191\n    };                                                                                                                 // 3192\n    return greatArc;                                                                                                   // 3193\n  };                                                                                                                   // 3194\n  d3.geo.interpolate = function(source, target) {                                                                      // 3195\n    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);\n  };                                                                                                                   // 3197\n  function d3_geo_interpolate(x0, y0, x1, y1) {                                                                        // 3198\n    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);\n    var interpolate = d ? function(t) {                                                                                // 3200\n      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;\n      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];                  // 3202\n    } : function() {                                                                                                   // 3203\n      return [ x0 * d3_degrees, y0 * d3_degrees ];                                                                     // 3204\n    };                                                                                                                 // 3205\n    interpolate.distance = d;                                                                                          // 3206\n    return interpolate;                                                                                                // 3207\n  }                                                                                                                    // 3208\n  d3.geo.length = function(object) {                                                                                   // 3209\n    d3_geo_lengthSum = 0;                                                                                              // 3210\n    d3.geo.stream(object, d3_geo_length);                                                                              // 3211\n    return d3_geo_lengthSum;                                                                                           // 3212\n  };                                                                                                                   // 3213\n  var d3_geo_lengthSum;                                                                                                // 3214\n  var d3_geo_length = {                                                                                                // 3215\n    sphere: d3_noop,                                                                                                   // 3216\n    point: d3_noop,                                                                                                    // 3217\n    lineStart: d3_geo_lengthLineStart,                                                                                 // 3218\n    lineEnd: d3_noop,                                                                                                  // 3219\n    polygonStart: d3_noop,                                                                                             // 3220\n    polygonEnd: d3_noop                                                                                                // 3221\n  };                                                                                                                   // 3222\n  function d3_geo_lengthLineStart() {                                                                                  // 3223\n    var λ0, sinφ0, cosφ0;                                                                                              // 3224\n    d3_geo_length.point = function(λ, φ) {                                                                             // 3225\n      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);                                     // 3226\n      d3_geo_length.point = nextPoint;                                                                                 // 3227\n    };                                                                                                                 // 3228\n    d3_geo_length.lineEnd = function() {                                                                               // 3229\n      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;                                                           // 3230\n    };                                                                                                                 // 3231\n    function nextPoint(λ, φ) {                                                                                         // 3232\n      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = Math.abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);\n      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);\n      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;                                                                              // 3235\n    }                                                                                                                  // 3236\n  }                                                                                                                    // 3237\n  function d3_geo_conic(projectAt) {                                                                                   // 3238\n    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);                                    // 3239\n    p.parallels = function(_) {                                                                                        // 3240\n      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];                                                    // 3241\n      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);                                                              // 3242\n    };                                                                                                                 // 3243\n    return p;                                                                                                          // 3244\n  }                                                                                                                    // 3245\n  function d3_geo_conicEqualArea(φ0, φ1) {                                                                             // 3246\n    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;  // 3247\n    function forward(λ, φ) {                                                                                           // 3248\n      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;                                                                  // 3249\n      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];                                                           // 3250\n    }                                                                                                                  // 3251\n    forward.invert = function(x, y) {                                                                                  // 3252\n      var ρ0_y = ρ0 - y;                                                                                               // 3253\n      return [ Math.atan2(x, ρ0_y) / n, Math.asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];                    // 3254\n    };                                                                                                                 // 3255\n    return forward;                                                                                                    // 3256\n  }                                                                                                                    // 3257\n  (d3.geo.conicEqualArea = function() {                                                                                // 3258\n    return d3_geo_conic(d3_geo_conicEqualArea);                                                                        // 3259\n  }).raw = d3_geo_conicEqualArea;                                                                                      // 3260\n  d3.geo.albersUsa = function() {                                                                                      // 3261\n    var lower48 = d3.geo.conicEqualArea().rotate([ 98, 0 ]).center([ 0, 38 ]).parallels([ 29.5, 45.5 ]);               // 3262\n    var alaska = d3.geo.conicEqualArea().rotate([ 160, 0 ]).center([ 0, 60 ]).parallels([ 55, 65 ]);                   // 3263\n    var hawaii = d3.geo.conicEqualArea().rotate([ 160, 0 ]).center([ 0, 20 ]).parallels([ 8, 18 ]);                    // 3264\n    var puertoRico = d3.geo.conicEqualArea().rotate([ 60, 0 ]).center([ 0, 10 ]).parallels([ 8, 18 ]);                 // 3265\n    var alaskaInvert, hawaiiInvert, puertoRicoInvert;                                                                  // 3266\n    function albersUsa(coordinates) {                                                                                  // 3267\n      return projection(coordinates)(coordinates);                                                                     // 3268\n    }                                                                                                                  // 3269\n    function projection(point) {                                                                                       // 3270\n      var lon = point[0], lat = point[1];                                                                              // 3271\n      return lat > 50 ? alaska : lon < -140 ? hawaii : lat < 21 ? puertoRico : lower48;                                // 3272\n    }                                                                                                                  // 3273\n    albersUsa.invert = function(coordinates) {                                                                         // 3274\n      return alaskaInvert(coordinates) || hawaiiInvert(coordinates) || puertoRicoInvert(coordinates) || lower48.invert(coordinates);\n    };                                                                                                                 // 3276\n    albersUsa.scale = function(x) {                                                                                    // 3277\n      if (!arguments.length) return lower48.scale();                                                                   // 3278\n      lower48.scale(x);                                                                                                // 3279\n      alaska.scale(x * .6);                                                                                            // 3280\n      hawaii.scale(x);                                                                                                 // 3281\n      puertoRico.scale(x * 1.5);                                                                                       // 3282\n      return albersUsa.translate(lower48.translate());                                                                 // 3283\n    };                                                                                                                 // 3284\n    albersUsa.translate = function(x) {                                                                                // 3285\n      if (!arguments.length) return lower48.translate();                                                               // 3286\n      var dz = lower48.scale(), dx = x[0], dy = x[1];                                                                  // 3287\n      lower48.translate(x);                                                                                            // 3288\n      alaska.translate([ dx - .4 * dz, dy + .17 * dz ]);                                                               // 3289\n      hawaii.translate([ dx - .19 * dz, dy + .2 * dz ]);                                                               // 3290\n      puertoRico.translate([ dx + .58 * dz, dy + .43 * dz ]);                                                          // 3291\n      alaskaInvert = d3_geo_albersUsaInvert(alaska, [ [ -180, 50 ], [ -130, 72 ] ]);                                   // 3292\n      hawaiiInvert = d3_geo_albersUsaInvert(hawaii, [ [ -164, 18 ], [ -154, 24 ] ]);                                   // 3293\n      puertoRicoInvert = d3_geo_albersUsaInvert(puertoRico, [ [ -67.5, 17.5 ], [ -65, 19 ] ]);                         // 3294\n      return albersUsa;                                                                                                // 3295\n    };                                                                                                                 // 3296\n    return albersUsa.scale(1e3);                                                                                       // 3297\n  };                                                                                                                   // 3298\n  function d3_geo_albersUsaInvert(projection, extent) {                                                                // 3299\n    var a = projection(extent[0]), b = projection([ .5 * (extent[0][0] + extent[1][0]), extent[0][1] ]), c = projection([ extent[1][0], extent[0][1] ]), d = projection(extent[1]);\n    var dya = b[1] - a[1], dxa = b[0] - a[0], dyb = c[1] - b[1], dxb = c[0] - b[0];                                    // 3301\n    var ma = dya / dxa, mb = dyb / dxb;                                                                                // 3302\n    var cx = .5 * (ma * mb * (a[1] - c[1]) + mb * (a[0] + b[0]) - ma * (b[0] + c[0])) / (mb - ma), cy = (.5 * (a[0] + b[0]) - cx) / ma + .5 * (a[1] + b[1]);\n    var dx0 = d[0] - cx, dy0 = d[1] - cy, dx1 = a[0] - cx, dy1 = a[1] - cy, r0 = dx0 * dx0 + dy0 * dy0, r1 = dx1 * dx1 + dy1 * dy1;\n    var a0 = Math.atan2(dy0, dx0), a1 = Math.atan2(dy1, dx1);                                                          // 3305\n    return function(coordinates) {                                                                                     // 3306\n      var dx = coordinates[0] - cx, dy = coordinates[1] - cy, r = dx * dx + dy * dy, a = Math.atan2(dy, dx);           // 3307\n      if (r0 < r && r < r1 && a0 < a && a < a1) return projection.invert(coordinates);                                 // 3308\n    };                                                                                                                 // 3309\n  }                                                                                                                    // 3310\n  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {                                                  // 3311\n    point: d3_noop,                                                                                                    // 3312\n    lineStart: d3_noop,                                                                                                // 3313\n    lineEnd: d3_noop,                                                                                                  // 3314\n    polygonStart: function() {                                                                                         // 3315\n      d3_geo_pathAreaPolygon = 0;                                                                                      // 3316\n      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;                                                            // 3317\n    },                                                                                                                 // 3318\n    polygonEnd: function() {                                                                                           // 3319\n      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;                           // 3320\n      d3_geo_pathAreaSum += Math.abs(d3_geo_pathAreaPolygon / 2);                                                      // 3321\n    }                                                                                                                  // 3322\n  };                                                                                                                   // 3323\n  function d3_geo_pathAreaRingStart() {                                                                                // 3324\n    var x00, y00, x0, y0;                                                                                              // 3325\n    d3_geo_pathArea.point = function(x, y) {                                                                           // 3326\n      d3_geo_pathArea.point = nextPoint;                                                                               // 3327\n      x00 = x0 = x, y00 = y0 = y;                                                                                      // 3328\n    };                                                                                                                 // 3329\n    function nextPoint(x, y) {                                                                                         // 3330\n      d3_geo_pathAreaPolygon += y0 * x - x0 * y;                                                                       // 3331\n      x0 = x, y0 = y;                                                                                                  // 3332\n    }                                                                                                                  // 3333\n    d3_geo_pathArea.lineEnd = function() {                                                                             // 3334\n      nextPoint(x00, y00);                                                                                             // 3335\n    };                                                                                                                 // 3336\n  }                                                                                                                    // 3337\n  function d3_geo_pathBuffer() {                                                                                       // 3338\n    var pointCircle = d3_geo_pathCircle(4.5), buffer = [];                                                             // 3339\n    var stream = {                                                                                                     // 3340\n      point: point,                                                                                                    // 3341\n      lineStart: function() {                                                                                          // 3342\n        stream.point = pointLineStart;                                                                                 // 3343\n      },                                                                                                               // 3344\n      lineEnd: lineEnd,                                                                                                // 3345\n      polygonStart: function() {                                                                                       // 3346\n        stream.lineEnd = lineEndPolygon;                                                                               // 3347\n      },                                                                                                               // 3348\n      polygonEnd: function() {                                                                                         // 3349\n        stream.lineEnd = lineEnd;                                                                                      // 3350\n        stream.point = point;                                                                                          // 3351\n      },                                                                                                               // 3352\n      pointRadius: function(_) {                                                                                       // 3353\n        pointCircle = d3_geo_pathCircle(_);                                                                            // 3354\n        return stream;                                                                                                 // 3355\n      },                                                                                                               // 3356\n      result: function() {                                                                                             // 3357\n        if (buffer.length) {                                                                                           // 3358\n          var result = buffer.join(\"\");                                                                                // 3359\n          buffer = [];                                                                                                 // 3360\n          return result;                                                                                               // 3361\n        }                                                                                                              // 3362\n      }                                                                                                                // 3363\n    };                                                                                                                 // 3364\n    function point(x, y) {                                                                                             // 3365\n      buffer.push(\"M\", x, \",\", y, pointCircle);                                                                        // 3366\n    }                                                                                                                  // 3367\n    function pointLineStart(x, y) {                                                                                    // 3368\n      buffer.push(\"M\", x, \",\", y);                                                                                     // 3369\n      stream.point = pointLine;                                                                                        // 3370\n    }                                                                                                                  // 3371\n    function pointLine(x, y) {                                                                                         // 3372\n      buffer.push(\"L\", x, \",\", y);                                                                                     // 3373\n    }                                                                                                                  // 3374\n    function lineEnd() {                                                                                               // 3375\n      stream.point = point;                                                                                            // 3376\n    }                                                                                                                  // 3377\n    function lineEndPolygon() {                                                                                        // 3378\n      buffer.push(\"Z\");                                                                                                // 3379\n    }                                                                                                                  // 3380\n    return stream;                                                                                                     // 3381\n  }                                                                                                                    // 3382\n  var d3_geo_pathCentroid = {                                                                                          // 3383\n    point: d3_geo_pathCentroidPoint,                                                                                   // 3384\n    lineStart: d3_geo_pathCentroidLineStart,                                                                           // 3385\n    lineEnd: d3_geo_pathCentroidLineEnd,                                                                               // 3386\n    polygonStart: function() {                                                                                         // 3387\n      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;                                                    // 3388\n    },                                                                                                                 // 3389\n    polygonEnd: function() {                                                                                           // 3390\n      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;                                                            // 3391\n      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;                                                    // 3392\n      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;                                                        // 3393\n    }                                                                                                                  // 3394\n  };                                                                                                                   // 3395\n  function d3_geo_pathCentroidPoint(x, y) {                                                                            // 3396\n    if (d3_geo_centroidDimension) return;                                                                              // 3397\n    d3_geo_centroidX += x;                                                                                             // 3398\n    d3_geo_centroidY += y;                                                                                             // 3399\n    ++d3_geo_centroidZ;                                                                                                // 3400\n  }                                                                                                                    // 3401\n  function d3_geo_pathCentroidLineStart() {                                                                            // 3402\n    var x0, y0;                                                                                                        // 3403\n    if (d3_geo_centroidDimension !== 1) {                                                                              // 3404\n      if (d3_geo_centroidDimension < 1) {                                                                              // 3405\n        d3_geo_centroidDimension = 1;                                                                                  // 3406\n        d3_geo_centroidX = d3_geo_centroidY = d3_geo_centroidZ = 0;                                                    // 3407\n      } else return;                                                                                                   // 3408\n    }                                                                                                                  // 3409\n    d3_geo_pathCentroid.point = function(x, y) {                                                                       // 3410\n      d3_geo_pathCentroid.point = nextPoint;                                                                           // 3411\n      x0 = x, y0 = y;                                                                                                  // 3412\n    };                                                                                                                 // 3413\n    function nextPoint(x, y) {                                                                                         // 3414\n      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);                                                  // 3415\n      d3_geo_centroidX += z * (x0 + x) / 2;                                                                            // 3416\n      d3_geo_centroidY += z * (y0 + y) / 2;                                                                            // 3417\n      d3_geo_centroidZ += z;                                                                                           // 3418\n      x0 = x, y0 = y;                                                                                                  // 3419\n    }                                                                                                                  // 3420\n  }                                                                                                                    // 3421\n  function d3_geo_pathCentroidLineEnd() {                                                                              // 3422\n    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;                                                              // 3423\n  }                                                                                                                    // 3424\n  function d3_geo_pathCentroidRingStart() {                                                                            // 3425\n    var x00, y00, x0, y0;                                                                                              // 3426\n    if (d3_geo_centroidDimension < 2) {                                                                                // 3427\n      d3_geo_centroidDimension = 2;                                                                                    // 3428\n      d3_geo_centroidX = d3_geo_centroidY = d3_geo_centroidZ = 0;                                                      // 3429\n    }                                                                                                                  // 3430\n    d3_geo_pathCentroid.point = function(x, y) {                                                                       // 3431\n      d3_geo_pathCentroid.point = nextPoint;                                                                           // 3432\n      x00 = x0 = x, y00 = y0 = y;                                                                                      // 3433\n    };                                                                                                                 // 3434\n    function nextPoint(x, y) {                                                                                         // 3435\n      var z = y0 * x - x0 * y;                                                                                         // 3436\n      d3_geo_centroidX += z * (x0 + x);                                                                                // 3437\n      d3_geo_centroidY += z * (y0 + y);                                                                                // 3438\n      d3_geo_centroidZ += z * 3;                                                                                       // 3439\n      x0 = x, y0 = y;                                                                                                  // 3440\n    }                                                                                                                  // 3441\n    d3_geo_pathCentroid.lineEnd = function() {                                                                         // 3442\n      nextPoint(x00, y00);                                                                                             // 3443\n    };                                                                                                                 // 3444\n  }                                                                                                                    // 3445\n  function d3_geo_pathContext(context) {                                                                               // 3446\n    var pointRadius = 4.5;                                                                                             // 3447\n    var stream = {                                                                                                     // 3448\n      point: point,                                                                                                    // 3449\n      lineStart: function() {                                                                                          // 3450\n        stream.point = pointLineStart;                                                                                 // 3451\n      },                                                                                                               // 3452\n      lineEnd: lineEnd,                                                                                                // 3453\n      polygonStart: function() {                                                                                       // 3454\n        stream.lineEnd = lineEndPolygon;                                                                               // 3455\n      },                                                                                                               // 3456\n      polygonEnd: function() {                                                                                         // 3457\n        stream.lineEnd = lineEnd;                                                                                      // 3458\n        stream.point = point;                                                                                          // 3459\n      },                                                                                                               // 3460\n      pointRadius: function(_) {                                                                                       // 3461\n        pointRadius = _;                                                                                               // 3462\n        return stream;                                                                                                 // 3463\n      },                                                                                                               // 3464\n      result: d3_noop                                                                                                  // 3465\n    };                                                                                                                 // 3466\n    function point(x, y) {                                                                                             // 3467\n      context.moveTo(x, y);                                                                                            // 3468\n      context.arc(x, y, pointRadius, 0, 2 * π);                                                                        // 3469\n    }                                                                                                                  // 3470\n    function pointLineStart(x, y) {                                                                                    // 3471\n      context.moveTo(x, y);                                                                                            // 3472\n      stream.point = pointLine;                                                                                        // 3473\n    }                                                                                                                  // 3474\n    function pointLine(x, y) {                                                                                         // 3475\n      context.lineTo(x, y);                                                                                            // 3476\n    }                                                                                                                  // 3477\n    function lineEnd() {                                                                                               // 3478\n      stream.point = point;                                                                                            // 3479\n    }                                                                                                                  // 3480\n    function lineEndPolygon() {                                                                                        // 3481\n      context.closePath();                                                                                             // 3482\n    }                                                                                                                  // 3483\n    return stream;                                                                                                     // 3484\n  }                                                                                                                    // 3485\n  d3.geo.path = function() {                                                                                           // 3486\n    var pointRadius = 4.5, projection, context, projectStream, contextStream;                                          // 3487\n    function path(object) {                                                                                            // 3488\n      if (object) d3.geo.stream(object, projectStream(contextStream.pointRadius(typeof pointRadius === \"function\" ? +pointRadius.apply(this, arguments) : pointRadius)));\n      return contextStream.result();                                                                                   // 3490\n    }                                                                                                                  // 3491\n    path.area = function(object) {                                                                                     // 3492\n      d3_geo_pathAreaSum = 0;                                                                                          // 3493\n      d3.geo.stream(object, projectStream(d3_geo_pathArea));                                                           // 3494\n      return d3_geo_pathAreaSum;                                                                                       // 3495\n    };                                                                                                                 // 3496\n    path.centroid = function(object) {                                                                                 // 3497\n      d3_geo_centroidDimension = d3_geo_centroidX = d3_geo_centroidY = d3_geo_centroidZ = 0;                           // 3498\n      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));                                                       // 3499\n      return d3_geo_centroidZ ? [ d3_geo_centroidX / d3_geo_centroidZ, d3_geo_centroidY / d3_geo_centroidZ ] : undefined;\n    };                                                                                                                 // 3501\n    path.bounds = function(object) {                                                                                   // 3502\n      return d3_geo_bounds(projectStream)(object);                                                                     // 3503\n    };                                                                                                                 // 3504\n    path.projection = function(_) {                                                                                    // 3505\n      if (!arguments.length) return projection;                                                                        // 3506\n      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;                        // 3507\n      return path;                                                                                                     // 3508\n    };                                                                                                                 // 3509\n    path.context = function(_) {                                                                                       // 3510\n      if (!arguments.length) return context;                                                                           // 3511\n      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);                     // 3512\n      return path;                                                                                                     // 3513\n    };                                                                                                                 // 3514\n    path.pointRadius = function(_) {                                                                                   // 3515\n      if (!arguments.length) return pointRadius;                                                                       // 3516\n      pointRadius = typeof _ === \"function\" ? _ : +_;                                                                  // 3517\n      return path;                                                                                                     // 3518\n    };                                                                                                                 // 3519\n    return path.projection(d3.geo.albersUsa()).context(null);                                                          // 3520\n  };                                                                                                                   // 3521\n  function d3_geo_pathCircle(radius) {                                                                                 // 3522\n    return \"m0,\" + radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + +2 * radius + \"z\";\n  }                                                                                                                    // 3524\n  function d3_geo_pathProjectStream(project) {                                                                         // 3525\n    var resample = d3_geo_resample(function(λ, φ) {                                                                    // 3526\n      return project([ λ * d3_degrees, φ * d3_degrees ]);                                                              // 3527\n    });                                                                                                                // 3528\n    return function(stream) {                                                                                          // 3529\n      stream = resample(stream);                                                                                       // 3530\n      return {                                                                                                         // 3531\n        point: function(λ, φ) {                                                                                        // 3532\n          stream.point(λ * d3_radians, φ * d3_radians);                                                                // 3533\n        },                                                                                                             // 3534\n        sphere: function() {                                                                                           // 3535\n          stream.sphere();                                                                                             // 3536\n        },                                                                                                             // 3537\n        lineStart: function() {                                                                                        // 3538\n          stream.lineStart();                                                                                          // 3539\n        },                                                                                                             // 3540\n        lineEnd: function() {                                                                                          // 3541\n          stream.lineEnd();                                                                                            // 3542\n        },                                                                                                             // 3543\n        polygonStart: function() {                                                                                     // 3544\n          stream.polygonStart();                                                                                       // 3545\n        },                                                                                                             // 3546\n        polygonEnd: function() {                                                                                       // 3547\n          stream.polygonEnd();                                                                                         // 3548\n        }                                                                                                              // 3549\n      };                                                                                                               // 3550\n    };                                                                                                                 // 3551\n  }                                                                                                                    // 3552\n  d3.geo.albers = function() {                                                                                         // 3553\n    return d3.geo.conicEqualArea().parallels([ 29.5, 45.5 ]).rotate([ 98, 0 ]).center([ 0, 38 ]).scale(1e3);           // 3554\n  };                                                                                                                   // 3555\n  function d3_geo_azimuthal(scale, angle) {                                                                            // 3556\n    function azimuthal(λ, φ) {                                                                                         // 3557\n      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);                                              // 3558\n      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];                                                              // 3559\n    }                                                                                                                  // 3560\n    azimuthal.invert = function(x, y) {                                                                                // 3561\n      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);                          // 3562\n      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];                                         // 3563\n    };                                                                                                                 // 3564\n    return azimuthal;                                                                                                  // 3565\n  }                                                                                                                    // 3566\n  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {                                                // 3567\n    return Math.sqrt(2 / (1 + cosλcosφ));                                                                              // 3568\n  }, function(ρ) {                                                                                                     // 3569\n    return 2 * Math.asin(ρ / 2);                                                                                       // 3570\n  });                                                                                                                  // 3571\n  (d3.geo.azimuthalEqualArea = function() {                                                                            // 3572\n    return d3_geo_projection(d3_geo_azimuthalEqualArea);                                                               // 3573\n  }).raw = d3_geo_azimuthalEqualArea;                                                                                  // 3574\n  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {                                              // 3575\n    var c = Math.acos(cosλcosφ);                                                                                       // 3576\n    return c && c / Math.sin(c);                                                                                       // 3577\n  }, d3_identity);                                                                                                     // 3578\n  (d3.geo.azimuthalEquidistant = function() {                                                                          // 3579\n    return d3_geo_projection(d3_geo_azimuthalEquidistant);                                                             // 3580\n  }).raw = d3_geo_azimuthalEquidistant;                                                                                // 3581\n  function d3_geo_conicConformal(φ0, φ1) {                                                                             // 3582\n    var cosφ0 = Math.cos(φ0), t = function(φ) {                                                                        // 3583\n      return Math.tan(π / 4 + φ / 2);                                                                                  // 3584\n    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;\n    if (!n) return d3_geo_mercator;                                                                                    // 3586\n    function forward(λ, φ) {                                                                                           // 3587\n      var ρ = Math.abs(Math.abs(φ) - π / 2) < ε ? 0 : F / Math.pow(t(φ), n);                                           // 3588\n      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];                                                         // 3589\n    }                                                                                                                  // 3590\n    forward.invert = function(x, y) {                                                                                  // 3591\n      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);                                                // 3592\n      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - π / 2 ];                               // 3593\n    };                                                                                                                 // 3594\n    return forward;                                                                                                    // 3595\n  }                                                                                                                    // 3596\n  (d3.geo.conicConformal = function() {                                                                                // 3597\n    return d3_geo_conic(d3_geo_conicConformal);                                                                        // 3598\n  }).raw = d3_geo_conicConformal;                                                                                      // 3599\n  function d3_geo_conicEquidistant(φ0, φ1) {                                                                           // 3600\n    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;   // 3601\n    if (Math.abs(n) < ε) return d3_geo_equirectangular;                                                                // 3602\n    function forward(λ, φ) {                                                                                           // 3603\n      var ρ = G - φ;                                                                                                   // 3604\n      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];                                                         // 3605\n    }                                                                                                                  // 3606\n    forward.invert = function(x, y) {                                                                                  // 3607\n      var ρ0_y = G - y;                                                                                                // 3608\n      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];                              // 3609\n    };                                                                                                                 // 3610\n    return forward;                                                                                                    // 3611\n  }                                                                                                                    // 3612\n  (d3.geo.conicEquidistant = function() {                                                                              // 3613\n    return d3_geo_conic(d3_geo_conicEquidistant);                                                                      // 3614\n  }).raw = d3_geo_conicEquidistant;                                                                                    // 3615\n  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {                                                          // 3616\n    return 1 / cosλcosφ;                                                                                               // 3617\n  }, Math.atan);                                                                                                       // 3618\n  (d3.geo.gnomonic = function() {                                                                                      // 3619\n    return d3_geo_projection(d3_geo_gnomonic);                                                                         // 3620\n  }).raw = d3_geo_gnomonic;                                                                                            // 3621\n  function d3_geo_mercator(λ, φ) {                                                                                     // 3622\n    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];                                                                   // 3623\n  }                                                                                                                    // 3624\n  d3_geo_mercator.invert = function(x, y) {                                                                            // 3625\n    return [ x, 2 * Math.atan(Math.exp(y)) - π / 2 ];                                                                  // 3626\n  };                                                                                                                   // 3627\n  function d3_geo_mercatorProjection(project) {                                                                        // 3628\n    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto; // 3629\n    m.scale = function() {                                                                                             // 3630\n      var v = scale.apply(m, arguments);                                                                               // 3631\n      return v === m ? clipAuto ? m.clipExtent(null) : m : v;                                                          // 3632\n    };                                                                                                                 // 3633\n    m.translate = function() {                                                                                         // 3634\n      var v = translate.apply(m, arguments);                                                                           // 3635\n      return v === m ? clipAuto ? m.clipExtent(null) : m : v;                                                          // 3636\n    };                                                                                                                 // 3637\n    m.clipExtent = function(_) {                                                                                       // 3638\n      var v = clipExtent.apply(m, arguments);                                                                          // 3639\n      if (v === m) {                                                                                                   // 3640\n        if (clipAuto = _ == null) {                                                                                    // 3641\n          var k = π * scale(), t = translate();                                                                        // 3642\n          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);                                              // 3643\n        }                                                                                                              // 3644\n      } else if (clipAuto) {                                                                                           // 3645\n        v = null;                                                                                                      // 3646\n      }                                                                                                                // 3647\n      return v;                                                                                                        // 3648\n    };                                                                                                                 // 3649\n    return m.clipExtent(null);                                                                                         // 3650\n  }                                                                                                                    // 3651\n  (d3.geo.mercator = function() {                                                                                      // 3652\n    return d3_geo_mercatorProjection(d3_geo_mercator);                                                                 // 3653\n  }).raw = d3_geo_mercator;                                                                                            // 3654\n  var d3_geo_orthographic = d3_geo_azimuthal(function() {                                                              // 3655\n    return 1;                                                                                                          // 3656\n  }, Math.asin);                                                                                                       // 3657\n  (d3.geo.orthographic = function() {                                                                                  // 3658\n    return d3_geo_projection(d3_geo_orthographic);                                                                     // 3659\n  }).raw = d3_geo_orthographic;                                                                                        // 3660\n  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {                                                     // 3661\n    return 1 / (1 + cosλcosφ);                                                                                         // 3662\n  }, function(ρ) {                                                                                                     // 3663\n    return 2 * Math.atan(ρ);                                                                                           // 3664\n  });                                                                                                                  // 3665\n  (d3.geo.stereographic = function() {                                                                                 // 3666\n    return d3_geo_projection(d3_geo_stereographic);                                                                    // 3667\n  }).raw = d3_geo_stereographic;                                                                                       // 3668\n  function d3_geo_transverseMercator(λ, φ) {                                                                           // 3669\n    var B = Math.cos(φ) * Math.sin(λ);                                                                                 // 3670\n    return [ Math.log((1 + B) / (1 - B)) / 2, Math.atan2(Math.tan(φ), Math.cos(λ)) ];                                  // 3671\n  }                                                                                                                    // 3672\n  d3_geo_transverseMercator.invert = function(x, y) {                                                                  // 3673\n    return [ Math.atan2(d3_sinh(x), Math.cos(y)), d3_asin(Math.sin(y) / d3_cosh(x)) ];                                 // 3674\n  };                                                                                                                   // 3675\n  (d3.geo.transverseMercator = function() {                                                                            // 3676\n    return d3_geo_mercatorProjection(d3_geo_transverseMercator);                                                       // 3677\n  }).raw = d3_geo_transverseMercator;                                                                                  // 3678\n  d3.geom = {};                                                                                                        // 3679\n  d3.svg = {};                                                                                                         // 3680\n  function d3_svg_line(projection) {                                                                                   // 3681\n    var x = d3_svg_lineX, y = d3_svg_lineY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;\n    function line(data) {                                                                                              // 3683\n      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);              // 3684\n      function segment() {                                                                                             // 3685\n        segments.push(\"M\", interpolate(projection(points), tension));                                                  // 3686\n      }                                                                                                                // 3687\n      while (++i < n) {                                                                                                // 3688\n        if (defined.call(this, d = data[i], i)) {                                                                      // 3689\n          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);                                                 // 3690\n        } else if (points.length) {                                                                                    // 3691\n          segment();                                                                                                   // 3692\n          points = [];                                                                                                 // 3693\n        }                                                                                                              // 3694\n      }                                                                                                                // 3695\n      if (points.length) segment();                                                                                    // 3696\n      return segments.length ? segments.join(\"\") : null;                                                               // 3697\n    }                                                                                                                  // 3698\n    line.x = function(_) {                                                                                             // 3699\n      if (!arguments.length) return x;                                                                                 // 3700\n      x = _;                                                                                                           // 3701\n      return line;                                                                                                     // 3702\n    };                                                                                                                 // 3703\n    line.y = function(_) {                                                                                             // 3704\n      if (!arguments.length) return y;                                                                                 // 3705\n      y = _;                                                                                                           // 3706\n      return line;                                                                                                     // 3707\n    };                                                                                                                 // 3708\n    line.defined = function(_) {                                                                                       // 3709\n      if (!arguments.length) return defined;                                                                           // 3710\n      defined = _;                                                                                                     // 3711\n      return line;                                                                                                     // 3712\n    };                                                                                                                 // 3713\n    line.interpolate = function(_) {                                                                                   // 3714\n      if (!arguments.length) return interpolateKey;                                                                    // 3715\n      if (typeof _ === \"function\") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n      return line;                                                                                                     // 3717\n    };                                                                                                                 // 3718\n    line.tension = function(_) {                                                                                       // 3719\n      if (!arguments.length) return tension;                                                                           // 3720\n      tension = _;                                                                                                     // 3721\n      return line;                                                                                                     // 3722\n    };                                                                                                                 // 3723\n    return line;                                                                                                       // 3724\n  }                                                                                                                    // 3725\n  d3.svg.line = function() {                                                                                           // 3726\n    return d3_svg_line(d3_identity);                                                                                   // 3727\n  };                                                                                                                   // 3728\n  function d3_svg_lineX(d) {                                                                                           // 3729\n    return d[0];                                                                                                       // 3730\n  }                                                                                                                    // 3731\n  function d3_svg_lineY(d) {                                                                                           // 3732\n    return d[1];                                                                                                       // 3733\n  }                                                                                                                    // 3734\n  var d3_svg_lineInterpolators = d3.map({                                                                              // 3735\n    linear: d3_svg_lineLinear,                                                                                         // 3736\n    \"linear-closed\": d3_svg_lineLinearClosed,                                                                          // 3737\n    \"step-before\": d3_svg_lineStepBefore,                                                                              // 3738\n    \"step-after\": d3_svg_lineStepAfter,                                                                                // 3739\n    basis: d3_svg_lineBasis,                                                                                           // 3740\n    \"basis-open\": d3_svg_lineBasisOpen,                                                                                // 3741\n    \"basis-closed\": d3_svg_lineBasisClosed,                                                                            // 3742\n    bundle: d3_svg_lineBundle,                                                                                         // 3743\n    cardinal: d3_svg_lineCardinal,                                                                                     // 3744\n    \"cardinal-open\": d3_svg_lineCardinalOpen,                                                                          // 3745\n    \"cardinal-closed\": d3_svg_lineCardinalClosed,                                                                      // 3746\n    monotone: d3_svg_lineMonotone                                                                                      // 3747\n  });                                                                                                                  // 3748\n  d3_svg_lineInterpolators.forEach(function(key, value) {                                                              // 3749\n    value.key = key;                                                                                                   // 3750\n    value.closed = /-closed$/.test(key);                                                                               // 3751\n  });                                                                                                                  // 3752\n  function d3_svg_lineLinear(points) {                                                                                 // 3753\n    return points.join(\"L\");                                                                                           // 3754\n  }                                                                                                                    // 3755\n  function d3_svg_lineLinearClosed(points) {                                                                           // 3756\n    return d3_svg_lineLinear(points) + \"Z\";                                                                            // 3757\n  }                                                                                                                    // 3758\n  function d3_svg_lineStepBefore(points) {                                                                             // 3759\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];                                           // 3760\n    while (++i < n) path.push(\"V\", (p = points[i])[1], \"H\", p[0]);                                                     // 3761\n    return path.join(\"\");                                                                                              // 3762\n  }                                                                                                                    // 3763\n  function d3_svg_lineStepAfter(points) {                                                                              // 3764\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];                                           // 3765\n    while (++i < n) path.push(\"H\", (p = points[i])[0], \"V\", p[1]);                                                     // 3766\n    return path.join(\"\");                                                                                              // 3767\n  }                                                                                                                    // 3768\n  function d3_svg_lineCardinalOpen(points, tension) {                                                                  // 3769\n    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, points.length - 1), d3_svg_lineCardinalTangents(points, tension));\n  }                                                                                                                    // 3771\n  function d3_svg_lineCardinalClosed(points, tension) {                                                                // 3772\n    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite((points.push(points[0]),     // 3773\n    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));       // 3774\n  }                                                                                                                    // 3775\n  function d3_svg_lineCardinal(points, tension) {                                                                      // 3776\n    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));\n  }                                                                                                                    // 3778\n  function d3_svg_lineHermite(points, tangents) {                                                                      // 3779\n    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {             // 3780\n      return d3_svg_lineLinear(points);                                                                                // 3781\n    }                                                                                                                  // 3782\n    var quad = points.length != tangents.length, path = \"\", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;\n    if (quad) {                                                                                                        // 3784\n      path += \"Q\" + (p[0] - t0[0] * 2 / 3) + \",\" + (p[1] - t0[1] * 2 / 3) + \",\" + p[0] + \",\" + p[1];                   // 3785\n      p0 = points[1];                                                                                                  // 3786\n      pi = 2;                                                                                                          // 3787\n    }                                                                                                                  // 3788\n    if (tangents.length > 1) {                                                                                         // 3789\n      t = tangents[1];                                                                                                 // 3790\n      p = points[pi];                                                                                                  // 3791\n      pi++;                                                                                                            // 3792\n      path += \"C\" + (p0[0] + t0[0]) + \",\" + (p0[1] + t0[1]) + \",\" + (p[0] - t[0]) + \",\" + (p[1] - t[1]) + \",\" + p[0] + \",\" + p[1];\n      for (var i = 2; i < tangents.length; i++, pi++) {                                                                // 3794\n        p = points[pi];                                                                                                // 3795\n        t = tangents[i];                                                                                               // 3796\n        path += \"S\" + (p[0] - t[0]) + \",\" + (p[1] - t[1]) + \",\" + p[0] + \",\" + p[1];                                   // 3797\n      }                                                                                                                // 3798\n    }                                                                                                                  // 3799\n    if (quad) {                                                                                                        // 3800\n      var lp = points[pi];                                                                                             // 3801\n      path += \"Q\" + (p[0] + t[0] * 2 / 3) + \",\" + (p[1] + t[1] * 2 / 3) + \",\" + lp[0] + \",\" + lp[1];                   // 3802\n    }                                                                                                                  // 3803\n    return path;                                                                                                       // 3804\n  }                                                                                                                    // 3805\n  function d3_svg_lineCardinalTangents(points, tension) {                                                              // 3806\n    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;            // 3807\n    while (++i < n) {                                                                                                  // 3808\n      p0 = p1;                                                                                                         // 3809\n      p1 = p2;                                                                                                         // 3810\n      p2 = points[i];                                                                                                  // 3811\n      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);                                                     // 3812\n    }                                                                                                                  // 3813\n    return tangents;                                                                                                   // 3814\n  }                                                                                                                    // 3815\n  function d3_svg_lineBasis(points) {                                                                                  // 3816\n    if (points.length < 3) return d3_svg_lineLinear(points);                                                           // 3817\n    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, \",\", y0 ];\n    d3_svg_lineBasisBezier(path, px, py);                                                                              // 3819\n    while (++i < n) {                                                                                                  // 3820\n      pi = points[i];                                                                                                  // 3821\n      px.shift();                                                                                                      // 3822\n      px.push(pi[0]);                                                                                                  // 3823\n      py.shift();                                                                                                      // 3824\n      py.push(pi[1]);                                                                                                  // 3825\n      d3_svg_lineBasisBezier(path, px, py);                                                                            // 3826\n    }                                                                                                                  // 3827\n    i = -1;                                                                                                            // 3828\n    while (++i < 2) {                                                                                                  // 3829\n      px.shift();                                                                                                      // 3830\n      px.push(pi[0]);                                                                                                  // 3831\n      py.shift();                                                                                                      // 3832\n      py.push(pi[1]);                                                                                                  // 3833\n      d3_svg_lineBasisBezier(path, px, py);                                                                            // 3834\n    }                                                                                                                  // 3835\n    return path.join(\"\");                                                                                              // 3836\n  }                                                                                                                    // 3837\n  function d3_svg_lineBasisOpen(points) {                                                                              // 3838\n    if (points.length < 4) return d3_svg_lineLinear(points);                                                           // 3839\n    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];                                              // 3840\n    while (++i < 3) {                                                                                                  // 3841\n      pi = points[i];                                                                                                  // 3842\n      px.push(pi[0]);                                                                                                  // 3843\n      py.push(pi[1]);                                                                                                  // 3844\n    }                                                                                                                  // 3845\n    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + \",\" + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));      // 3846\n    --i;                                                                                                               // 3847\n    while (++i < n) {                                                                                                  // 3848\n      pi = points[i];                                                                                                  // 3849\n      px.shift();                                                                                                      // 3850\n      px.push(pi[0]);                                                                                                  // 3851\n      py.shift();                                                                                                      // 3852\n      py.push(pi[1]);                                                                                                  // 3853\n      d3_svg_lineBasisBezier(path, px, py);                                                                            // 3854\n    }                                                                                                                  // 3855\n    return path.join(\"\");                                                                                              // 3856\n  }                                                                                                                    // 3857\n  function d3_svg_lineBasisClosed(points) {                                                                            // 3858\n    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];                                              // 3859\n    while (++i < 4) {                                                                                                  // 3860\n      pi = points[i % n];                                                                                              // 3861\n      px.push(pi[0]);                                                                                                  // 3862\n      py.push(pi[1]);                                                                                                  // 3863\n    }                                                                                                                  // 3864\n    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];        // 3865\n    --i;                                                                                                               // 3866\n    while (++i < m) {                                                                                                  // 3867\n      pi = points[i % n];                                                                                              // 3868\n      px.shift();                                                                                                      // 3869\n      px.push(pi[0]);                                                                                                  // 3870\n      py.shift();                                                                                                      // 3871\n      py.push(pi[1]);                                                                                                  // 3872\n      d3_svg_lineBasisBezier(path, px, py);                                                                            // 3873\n    }                                                                                                                  // 3874\n    return path.join(\"\");                                                                                              // 3875\n  }                                                                                                                    // 3876\n  function d3_svg_lineBundle(points, tension) {                                                                        // 3877\n    var n = points.length - 1;                                                                                         // 3878\n    if (n) {                                                                                                           // 3879\n      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;          // 3880\n      while (++i <= n) {                                                                                               // 3881\n        p = points[i];                                                                                                 // 3882\n        t = i / n;                                                                                                     // 3883\n        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);                                                         // 3884\n        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);                                                         // 3885\n      }                                                                                                                // 3886\n    }                                                                                                                  // 3887\n    return d3_svg_lineBasis(points);                                                                                   // 3888\n  }                                                                                                                    // 3889\n  function d3_svg_lineDot4(a, b) {                                                                                     // 3890\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];                                                      // 3891\n  }                                                                                                                    // 3892\n  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];\n  function d3_svg_lineBasisBezier(path, x, y) {                                                                        // 3894\n    path.push(\"C\", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));\n  }                                                                                                                    // 3896\n  function d3_svg_lineSlope(p0, p1) {                                                                                  // 3897\n    return (p1[1] - p0[1]) / (p1[0] - p0[0]);                                                                          // 3898\n  }                                                                                                                    // 3899\n  function d3_svg_lineFiniteDifferences(points) {                                                                      // 3900\n    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);     // 3901\n    while (++i < j) {                                                                                                  // 3902\n      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;                                            // 3903\n    }                                                                                                                  // 3904\n    m[i] = d;                                                                                                          // 3905\n    return m;                                                                                                          // 3906\n  }                                                                                                                    // 3907\n  function d3_svg_lineMonotoneTangents(points) {                                                                       // 3908\n    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;            // 3909\n    while (++i < j) {                                                                                                  // 3910\n      d = d3_svg_lineSlope(points[i], points[i + 1]);                                                                  // 3911\n      if (Math.abs(d) < 1e-6) {                                                                                        // 3912\n        m[i] = m[i + 1] = 0;                                                                                           // 3913\n      } else {                                                                                                         // 3914\n        a = m[i] / d;                                                                                                  // 3915\n        b = m[i + 1] / d;                                                                                              // 3916\n        s = a * a + b * b;                                                                                             // 3917\n        if (s > 9) {                                                                                                   // 3918\n          s = d * 3 / Math.sqrt(s);                                                                                    // 3919\n          m[i] = s * a;                                                                                                // 3920\n          m[i + 1] = s * b;                                                                                            // 3921\n        }                                                                                                              // 3922\n      }                                                                                                                // 3923\n    }                                                                                                                  // 3924\n    i = -1;                                                                                                            // 3925\n    while (++i <= j) {                                                                                                 // 3926\n      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));                   // 3927\n      tangents.push([ s || 0, m[i] * s || 0 ]);                                                                        // 3928\n    }                                                                                                                  // 3929\n    return tangents;                                                                                                   // 3930\n  }                                                                                                                    // 3931\n  function d3_svg_lineMonotone(points) {                                                                               // 3932\n    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));\n  }                                                                                                                    // 3934\n  d3.geom.hull = function(vertices) {                                                                                  // 3935\n    var x = d3_svg_lineX, y = d3_svg_lineY;                                                                            // 3936\n    if (arguments.length) return hull(vertices);                                                                       // 3937\n    function hull(data) {                                                                                              // 3938\n      if (data.length < 3) return [];                                                                                  // 3939\n      var fx = d3_functor(x), fy = d3_functor(y), n = data.length, vertices, plen = n - 1, points = [], stack = [], d, i, j, h = 0, x1, y1, x2, y2, u, v, a, sp;\n      if (fx === d3_svg_lineX && y === d3_svg_lineY) vertices = data; else for (i = 0,                                 // 3941\n      vertices = []; i < n; ++i) {                                                                                     // 3942\n        vertices.push([ +fx.call(this, d = data[i], i), +fy.call(this, d, i) ]);                                       // 3943\n      }                                                                                                                // 3944\n      for (i = 1; i < n; ++i) {                                                                                        // 3945\n        if (vertices[i][1] < vertices[h][1]) {                                                                         // 3946\n          h = i;                                                                                                       // 3947\n        } else if (vertices[i][1] == vertices[h][1]) {                                                                 // 3948\n          h = vertices[i][0] < vertices[h][0] ? i : h;                                                                 // 3949\n        }                                                                                                              // 3950\n      }                                                                                                                // 3951\n      for (i = 0; i < n; ++i) {                                                                                        // 3952\n        if (i === h) continue;                                                                                         // 3953\n        y1 = vertices[i][1] - vertices[h][1];                                                                          // 3954\n        x1 = vertices[i][0] - vertices[h][0];                                                                          // 3955\n        points.push({                                                                                                  // 3956\n          angle: Math.atan2(y1, x1),                                                                                   // 3957\n          index: i                                                                                                     // 3958\n        });                                                                                                            // 3959\n      }                                                                                                                // 3960\n      points.sort(function(a, b) {                                                                                     // 3961\n        return a.angle - b.angle;                                                                                      // 3962\n      });                                                                                                              // 3963\n      a = points[0].angle;                                                                                             // 3964\n      v = points[0].index;                                                                                             // 3965\n      u = 0;                                                                                                           // 3966\n      for (i = 1; i < plen; ++i) {                                                                                     // 3967\n        j = points[i].index;                                                                                           // 3968\n        if (a == points[i].angle) {                                                                                    // 3969\n          x1 = vertices[v][0] - vertices[h][0];                                                                        // 3970\n          y1 = vertices[v][1] - vertices[h][1];                                                                        // 3971\n          x2 = vertices[j][0] - vertices[h][0];                                                                        // 3972\n          y2 = vertices[j][1] - vertices[h][1];                                                                        // 3973\n          if (x1 * x1 + y1 * y1 >= x2 * x2 + y2 * y2) {                                                                // 3974\n            points[i].index = -1;                                                                                      // 3975\n          } else {                                                                                                     // 3976\n            points[u].index = -1;                                                                                      // 3977\n            a = points[i].angle;                                                                                       // 3978\n            u = i;                                                                                                     // 3979\n            v = j;                                                                                                     // 3980\n          }                                                                                                            // 3981\n        } else {                                                                                                       // 3982\n          a = points[i].angle;                                                                                         // 3983\n          u = i;                                                                                                       // 3984\n          v = j;                                                                                                       // 3985\n        }                                                                                                              // 3986\n      }                                                                                                                // 3987\n      stack.push(h);                                                                                                   // 3988\n      for (i = 0, j = 0; i < 2; ++j) {                                                                                 // 3989\n        if (points[j].index !== -1) {                                                                                  // 3990\n          stack.push(points[j].index);                                                                                 // 3991\n          i++;                                                                                                         // 3992\n        }                                                                                                              // 3993\n      }                                                                                                                // 3994\n      sp = stack.length;                                                                                               // 3995\n      for (;j < plen; ++j) {                                                                                           // 3996\n        if (points[j].index === -1) continue;                                                                          // 3997\n        while (!d3_geom_hullCCW(stack[sp - 2], stack[sp - 1], points[j].index, vertices)) {                            // 3998\n          --sp;                                                                                                        // 3999\n        }                                                                                                              // 4000\n        stack[sp++] = points[j].index;                                                                                 // 4001\n      }                                                                                                                // 4002\n      var poly = [];                                                                                                   // 4003\n      for (i = 0; i < sp; ++i) {                                                                                       // 4004\n        poly.push(data[stack[i]]);                                                                                     // 4005\n      }                                                                                                                // 4006\n      return poly;                                                                                                     // 4007\n    }                                                                                                                  // 4008\n    hull.x = function(_) {                                                                                             // 4009\n      return arguments.length ? (x = _, hull) : x;                                                                     // 4010\n    };                                                                                                                 // 4011\n    hull.y = function(_) {                                                                                             // 4012\n      return arguments.length ? (y = _, hull) : y;                                                                     // 4013\n    };                                                                                                                 // 4014\n    return hull;                                                                                                       // 4015\n  };                                                                                                                   // 4016\n  function d3_geom_hullCCW(i1, i2, i3, v) {                                                                            // 4017\n    var t, a, b, c, d, e, f;                                                                                           // 4018\n    t = v[i1];                                                                                                         // 4019\n    a = t[0];                                                                                                          // 4020\n    b = t[1];                                                                                                          // 4021\n    t = v[i2];                                                                                                         // 4022\n    c = t[0];                                                                                                          // 4023\n    d = t[1];                                                                                                          // 4024\n    t = v[i3];                                                                                                         // 4025\n    e = t[0];                                                                                                          // 4026\n    f = t[1];                                                                                                          // 4027\n    return (f - b) * (c - a) - (d - b) * (e - a) > 0;                                                                  // 4028\n  }                                                                                                                    // 4029\n  d3.geom.polygon = function(coordinates) {                                                                            // 4030\n    coordinates.area = function() {                                                                                    // 4031\n      var i = 0, n = coordinates.length, area = coordinates[n - 1][1] * coordinates[0][0] - coordinates[n - 1][0] * coordinates[0][1];\n      while (++i < n) {                                                                                                // 4033\n        area += coordinates[i - 1][1] * coordinates[i][0] - coordinates[i - 1][0] * coordinates[i][1];                 // 4034\n      }                                                                                                                // 4035\n      return area * .5;                                                                                                // 4036\n    };                                                                                                                 // 4037\n    coordinates.centroid = function(k) {                                                                               // 4038\n      var i = -1, n = coordinates.length, x = 0, y = 0, a, b = coordinates[n - 1], c;                                  // 4039\n      if (!arguments.length) k = -1 / (6 * coordinates.area());                                                        // 4040\n      while (++i < n) {                                                                                                // 4041\n        a = b;                                                                                                         // 4042\n        b = coordinates[i];                                                                                            // 4043\n        c = a[0] * b[1] - b[0] * a[1];                                                                                 // 4044\n        x += (a[0] + b[0]) * c;                                                                                        // 4045\n        y += (a[1] + b[1]) * c;                                                                                        // 4046\n      }                                                                                                                // 4047\n      return [ x * k, y * k ];                                                                                         // 4048\n    };                                                                                                                 // 4049\n    coordinates.clip = function(subject) {                                                                             // 4050\n      var input, i = -1, n = coordinates.length, j, m, a = coordinates[n - 1], b, c, d;                                // 4051\n      while (++i < n) {                                                                                                // 4052\n        input = subject.slice();                                                                                       // 4053\n        subject.length = 0;                                                                                            // 4054\n        b = coordinates[i];                                                                                            // 4055\n        c = input[(m = input.length) - 1];                                                                             // 4056\n        j = -1;                                                                                                        // 4057\n        while (++j < m) {                                                                                              // 4058\n          d = input[j];                                                                                                // 4059\n          if (d3_geom_polygonInside(d, a, b)) {                                                                        // 4060\n            if (!d3_geom_polygonInside(c, a, b)) {                                                                     // 4061\n              subject.push(d3_geom_polygonIntersect(c, d, a, b));                                                      // 4062\n            }                                                                                                          // 4063\n            subject.push(d);                                                                                           // 4064\n          } else if (d3_geom_polygonInside(c, a, b)) {                                                                 // 4065\n            subject.push(d3_geom_polygonIntersect(c, d, a, b));                                                        // 4066\n          }                                                                                                            // 4067\n          c = d;                                                                                                       // 4068\n        }                                                                                                              // 4069\n        a = b;                                                                                                         // 4070\n      }                                                                                                                // 4071\n      return subject;                                                                                                  // 4072\n    };                                                                                                                 // 4073\n    return coordinates;                                                                                                // 4074\n  };                                                                                                                   // 4075\n  function d3_geom_polygonInside(p, a, b) {                                                                            // 4076\n    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);                                              // 4077\n  }                                                                                                                    // 4078\n  function d3_geom_polygonIntersect(c, d, a, b) {                                                                      // 4079\n    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);\n    return [ x1 + ua * x21, y1 + ua * y21 ];                                                                           // 4081\n  }                                                                                                                    // 4082\n  d3.geom.delaunay = function(vertices) {                                                                              // 4083\n    var edges = vertices.map(function() {                                                                              // 4084\n      return [];                                                                                                       // 4085\n    }), triangles = [];                                                                                                // 4086\n    d3_geom_voronoiTessellate(vertices, function(e) {                                                                  // 4087\n      edges[e.region.l.index].push(vertices[e.region.r.index]);                                                        // 4088\n    });                                                                                                                // 4089\n    edges.forEach(function(edge, i) {                                                                                  // 4090\n      var v = vertices[i], cx = v[0], cy = v[1];                                                                       // 4091\n      edge.forEach(function(v) {                                                                                       // 4092\n        v.angle = Math.atan2(v[0] - cx, v[1] - cy);                                                                    // 4093\n      });                                                                                                              // 4094\n      edge.sort(function(a, b) {                                                                                       // 4095\n        return a.angle - b.angle;                                                                                      // 4096\n      });                                                                                                              // 4097\n      for (var j = 0, m = edge.length - 1; j < m; j++) {                                                               // 4098\n        triangles.push([ v, edge[j], edge[j + 1] ]);                                                                   // 4099\n      }                                                                                                                // 4100\n    });                                                                                                                // 4101\n    return triangles;                                                                                                  // 4102\n  };                                                                                                                   // 4103\n  d3.geom.voronoi = function(points) {                                                                                 // 4104\n    var size = null, x = d3_svg_lineX, y = d3_svg_lineY, clip;                                                         // 4105\n    if (arguments.length) return voronoi(points);                                                                      // 4106\n    function voronoi(data) {                                                                                           // 4107\n      var points, polygons = data.map(function() {                                                                     // 4108\n        return [];                                                                                                     // 4109\n      }), fx = d3_functor(x), fy = d3_functor(y), d, i, n = data.length, Z = 1e6;                                      // 4110\n      if (fx === d3_svg_lineX && fy === d3_svg_lineY) points = data; else for (points = [],                            // 4111\n      i = 0; i < n; ++i) {                                                                                             // 4112\n        points.push([ +fx.call(this, d = data[i], i), +fy.call(this, d, i) ]);                                         // 4113\n      }                                                                                                                // 4114\n      d3_geom_voronoiTessellate(points, function(e) {                                                                  // 4115\n        var s1, s2, x1, x2, y1, y2;                                                                                    // 4116\n        if (e.a === 1 && e.b >= 0) {                                                                                   // 4117\n          s1 = e.ep.r;                                                                                                 // 4118\n          s2 = e.ep.l;                                                                                                 // 4119\n        } else {                                                                                                       // 4120\n          s1 = e.ep.l;                                                                                                 // 4121\n          s2 = e.ep.r;                                                                                                 // 4122\n        }                                                                                                              // 4123\n        if (e.a === 1) {                                                                                               // 4124\n          y1 = s1 ? s1.y : -Z;                                                                                         // 4125\n          x1 = e.c - e.b * y1;                                                                                         // 4126\n          y2 = s2 ? s2.y : Z;                                                                                          // 4127\n          x2 = e.c - e.b * y2;                                                                                         // 4128\n        } else {                                                                                                       // 4129\n          x1 = s1 ? s1.x : -Z;                                                                                         // 4130\n          y1 = e.c - e.a * x1;                                                                                         // 4131\n          x2 = s2 ? s2.x : Z;                                                                                          // 4132\n          y2 = e.c - e.a * x2;                                                                                         // 4133\n        }                                                                                                              // 4134\n        var v1 = [ x1, y1 ], v2 = [ x2, y2 ];                                                                          // 4135\n        polygons[e.region.l.index].push(v1, v2);                                                                       // 4136\n        polygons[e.region.r.index].push(v1, v2);                                                                       // 4137\n      });                                                                                                              // 4138\n      polygons = polygons.map(function(polygon, i) {                                                                   // 4139\n        var cx = points[i][0], cy = points[i][1], angle = polygon.map(function(v) {                                    // 4140\n          return Math.atan2(v[0] - cx, v[1] - cy);                                                                     // 4141\n        }), order = d3.range(polygon.length).sort(function(a, b) {                                                     // 4142\n          return angle[a] - angle[b];                                                                                  // 4143\n        });                                                                                                            // 4144\n        return order.filter(function(d, i) {                                                                           // 4145\n          return !i || angle[d] - angle[order[i - 1]] > ε;                                                             // 4146\n        }).map(function(d) {                                                                                           // 4147\n          return polygon[d];                                                                                           // 4148\n        });                                                                                                            // 4149\n      });                                                                                                              // 4150\n      polygons.forEach(function(polygon, i) {                                                                          // 4151\n        var n = polygon.length;                                                                                        // 4152\n        if (!n) return polygon.push([ -Z, -Z ], [ -Z, Z ], [ Z, Z ], [ Z, -Z ]);                                       // 4153\n        if (n > 2) return;                                                                                             // 4154\n        var p0 = points[i], p1 = polygon[0], p2 = polygon[1], x0 = p0[0], y0 = p0[1], x1 = p1[0], y1 = p1[1], x2 = p2[0], y2 = p2[1], dx = Math.abs(x2 - x1), dy = y2 - y1;\n        if (Math.abs(dy) < ε) {                                                                                        // 4156\n          var y = y0 < y1 ? -Z : Z;                                                                                    // 4157\n          polygon.push([ -Z, y ], [ Z, y ]);                                                                           // 4158\n        } else if (dx < ε) {                                                                                           // 4159\n          var x = x0 < x1 ? -Z : Z;                                                                                    // 4160\n          polygon.push([ x, -Z ], [ x, Z ]);                                                                           // 4161\n        } else {                                                                                                       // 4162\n          var y = (x2 - x1) * (y1 - y0) < (x1 - x0) * (y2 - y1) ? Z : -Z, z = Math.abs(dy) - dx;                       // 4163\n          if (Math.abs(z) < ε) {                                                                                       // 4164\n            polygon.push([ dy < 0 ? y : -y, y ]);                                                                      // 4165\n          } else {                                                                                                     // 4166\n            if (z > 0) y *= -1;                                                                                        // 4167\n            polygon.push([ -Z, y ], [ Z, y ]);                                                                         // 4168\n          }                                                                                                            // 4169\n        }                                                                                                              // 4170\n      });                                                                                                              // 4171\n      if (clip) for (i = 0; i < n; ++i) clip(polygons[i]);                                                             // 4172\n      for (i = 0; i < n; ++i) polygons[i].point = data[i];                                                             // 4173\n      return polygons;                                                                                                 // 4174\n    }                                                                                                                  // 4175\n    voronoi.x = function(_) {                                                                                          // 4176\n      return arguments.length ? (x = _, voronoi) : x;                                                                  // 4177\n    };                                                                                                                 // 4178\n    voronoi.y = function(_) {                                                                                          // 4179\n      return arguments.length ? (y = _, voronoi) : y;                                                                  // 4180\n    };                                                                                                                 // 4181\n    voronoi.size = function(_) {                                                                                       // 4182\n      if (!arguments.length) return size;                                                                              // 4183\n      if (_ == null) {                                                                                                 // 4184\n        clip = null;                                                                                                   // 4185\n      } else {                                                                                                         // 4186\n        size = [ +_[0], +_[1] ];                                                                                       // 4187\n        clip = d3.geom.polygon([ [ 0, 0 ], [ 0, size[1] ], size, [ size[0], 0 ] ]).clip;                               // 4188\n      }                                                                                                                // 4189\n      return voronoi;                                                                                                  // 4190\n    };                                                                                                                 // 4191\n    voronoi.links = function(data) {                                                                                   // 4192\n      var points, graph = data.map(function() {                                                                        // 4193\n        return [];                                                                                                     // 4194\n      }), links = [], fx = d3_functor(x), fy = d3_functor(y), d, i, n = data.length;                                   // 4195\n      if (fx === d3_svg_lineX && fy === d3_svg_lineY) points = data; else for (i = 0; i < n; ++i) {                    // 4196\n        points.push([ +fx.call(this, d = data[i], i), +fy.call(this, d, i) ]);                                         // 4197\n      }                                                                                                                // 4198\n      d3_geom_voronoiTessellate(points, function(e) {                                                                  // 4199\n        var l = e.region.l.index, r = e.region.r.index;                                                                // 4200\n        if (graph[l][r]) return;                                                                                       // 4201\n        graph[l][r] = graph[r][l] = true;                                                                              // 4202\n        links.push({                                                                                                   // 4203\n          source: data[l],                                                                                             // 4204\n          target: data[r]                                                                                              // 4205\n        });                                                                                                            // 4206\n      });                                                                                                              // 4207\n      return links;                                                                                                    // 4208\n    };                                                                                                                 // 4209\n    voronoi.triangles = function(data) {                                                                               // 4210\n      if (x === d3_svg_lineX && y === d3_svg_lineY) return d3.geom.delaunay(data);                                     // 4211\n      var points, point, fx = d3_functor(x), fy = d3_functor(y), d, i, n;                                              // 4212\n      for (i = 0, points = [], n = data.length; i < n; ++i) {                                                          // 4213\n        point = [ +fx.call(this, d = data[i], i), +fy.call(this, d, i) ];                                              // 4214\n        point.data = d;                                                                                                // 4215\n        points.push(point);                                                                                            // 4216\n      }                                                                                                                // 4217\n      return d3.geom.delaunay(points).map(function(triangle) {                                                         // 4218\n        return triangle.map(function(point) {                                                                          // 4219\n          return point.data;                                                                                           // 4220\n        });                                                                                                            // 4221\n      });                                                                                                              // 4222\n    };                                                                                                                 // 4223\n    return voronoi;                                                                                                    // 4224\n  };                                                                                                                   // 4225\n  var d3_geom_voronoiOpposite = {                                                                                      // 4226\n    l: \"r\",                                                                                                            // 4227\n    r: \"l\"                                                                                                             // 4228\n  };                                                                                                                   // 4229\n  function d3_geom_voronoiTessellate(points, callback) {                                                               // 4230\n    var Sites = {                                                                                                      // 4231\n      list: points.map(function(v, i) {                                                                                // 4232\n        return {                                                                                                       // 4233\n          index: i,                                                                                                    // 4234\n          x: v[0],                                                                                                     // 4235\n          y: v[1]                                                                                                      // 4236\n        };                                                                                                             // 4237\n      }).sort(function(a, b) {                                                                                         // 4238\n        return a.y < b.y ? -1 : a.y > b.y ? 1 : a.x < b.x ? -1 : a.x > b.x ? 1 : 0;                                    // 4239\n      }),                                                                                                              // 4240\n      bottomSite: null                                                                                                 // 4241\n    };                                                                                                                 // 4242\n    var EdgeList = {                                                                                                   // 4243\n      list: [],                                                                                                        // 4244\n      leftEnd: null,                                                                                                   // 4245\n      rightEnd: null,                                                                                                  // 4246\n      init: function() {                                                                                               // 4247\n        EdgeList.leftEnd = EdgeList.createHalfEdge(null, \"l\");                                                         // 4248\n        EdgeList.rightEnd = EdgeList.createHalfEdge(null, \"l\");                                                        // 4249\n        EdgeList.leftEnd.r = EdgeList.rightEnd;                                                                        // 4250\n        EdgeList.rightEnd.l = EdgeList.leftEnd;                                                                        // 4251\n        EdgeList.list.unshift(EdgeList.leftEnd, EdgeList.rightEnd);                                                    // 4252\n      },                                                                                                               // 4253\n      createHalfEdge: function(edge, side) {                                                                           // 4254\n        return {                                                                                                       // 4255\n          edge: edge,                                                                                                  // 4256\n          side: side,                                                                                                  // 4257\n          vertex: null,                                                                                                // 4258\n          l: null,                                                                                                     // 4259\n          r: null                                                                                                      // 4260\n        };                                                                                                             // 4261\n      },                                                                                                               // 4262\n      insert: function(lb, he) {                                                                                       // 4263\n        he.l = lb;                                                                                                     // 4264\n        he.r = lb.r;                                                                                                   // 4265\n        lb.r.l = he;                                                                                                   // 4266\n        lb.r = he;                                                                                                     // 4267\n      },                                                                                                               // 4268\n      leftBound: function(p) {                                                                                         // 4269\n        var he = EdgeList.leftEnd;                                                                                     // 4270\n        do {                                                                                                           // 4271\n          he = he.r;                                                                                                   // 4272\n        } while (he != EdgeList.rightEnd && Geom.rightOf(he, p));                                                      // 4273\n        he = he.l;                                                                                                     // 4274\n        return he;                                                                                                     // 4275\n      },                                                                                                               // 4276\n      del: function(he) {                                                                                              // 4277\n        he.l.r = he.r;                                                                                                 // 4278\n        he.r.l = he.l;                                                                                                 // 4279\n        he.edge = null;                                                                                                // 4280\n      },                                                                                                               // 4281\n      right: function(he) {                                                                                            // 4282\n        return he.r;                                                                                                   // 4283\n      },                                                                                                               // 4284\n      left: function(he) {                                                                                             // 4285\n        return he.l;                                                                                                   // 4286\n      },                                                                                                               // 4287\n      leftRegion: function(he) {                                                                                       // 4288\n        return he.edge == null ? Sites.bottomSite : he.edge.region[he.side];                                           // 4289\n      },                                                                                                               // 4290\n      rightRegion: function(he) {                                                                                      // 4291\n        return he.edge == null ? Sites.bottomSite : he.edge.region[d3_geom_voronoiOpposite[he.side]];                  // 4292\n      }                                                                                                                // 4293\n    };                                                                                                                 // 4294\n    var Geom = {                                                                                                       // 4295\n      bisect: function(s1, s2) {                                                                                       // 4296\n        var newEdge = {                                                                                                // 4297\n          region: {                                                                                                    // 4298\n            l: s1,                                                                                                     // 4299\n            r: s2                                                                                                      // 4300\n          },                                                                                                           // 4301\n          ep: {                                                                                                        // 4302\n            l: null,                                                                                                   // 4303\n            r: null                                                                                                    // 4304\n          }                                                                                                            // 4305\n        };                                                                                                             // 4306\n        var dx = s2.x - s1.x, dy = s2.y - s1.y, adx = dx > 0 ? dx : -dx, ady = dy > 0 ? dy : -dy;                      // 4307\n        newEdge.c = s1.x * dx + s1.y * dy + (dx * dx + dy * dy) * .5;                                                  // 4308\n        if (adx > ady) {                                                                                               // 4309\n          newEdge.a = 1;                                                                                               // 4310\n          newEdge.b = dy / dx;                                                                                         // 4311\n          newEdge.c /= dx;                                                                                             // 4312\n        } else {                                                                                                       // 4313\n          newEdge.b = 1;                                                                                               // 4314\n          newEdge.a = dx / dy;                                                                                         // 4315\n          newEdge.c /= dy;                                                                                             // 4316\n        }                                                                                                              // 4317\n        return newEdge;                                                                                                // 4318\n      },                                                                                                               // 4319\n      intersect: function(el1, el2) {                                                                                  // 4320\n        var e1 = el1.edge, e2 = el2.edge;                                                                              // 4321\n        if (!e1 || !e2 || e1.region.r == e2.region.r) {                                                                // 4322\n          return null;                                                                                                 // 4323\n        }                                                                                                              // 4324\n        var d = e1.a * e2.b - e1.b * e2.a;                                                                             // 4325\n        if (Math.abs(d) < 1e-10) {                                                                                     // 4326\n          return null;                                                                                                 // 4327\n        }                                                                                                              // 4328\n        var xint = (e1.c * e2.b - e2.c * e1.b) / d, yint = (e2.c * e1.a - e1.c * e2.a) / d, e1r = e1.region.r, e2r = e2.region.r, el, e;\n        if (e1r.y < e2r.y || e1r.y == e2r.y && e1r.x < e2r.x) {                                                        // 4330\n          el = el1;                                                                                                    // 4331\n          e = e1;                                                                                                      // 4332\n        } else {                                                                                                       // 4333\n          el = el2;                                                                                                    // 4334\n          e = e2;                                                                                                      // 4335\n        }                                                                                                              // 4336\n        var rightOfSite = xint >= e.region.r.x;                                                                        // 4337\n        if (rightOfSite && el.side === \"l\" || !rightOfSite && el.side === \"r\") {                                       // 4338\n          return null;                                                                                                 // 4339\n        }                                                                                                              // 4340\n        return {                                                                                                       // 4341\n          x: xint,                                                                                                     // 4342\n          y: yint                                                                                                      // 4343\n        };                                                                                                             // 4344\n      },                                                                                                               // 4345\n      rightOf: function(he, p) {                                                                                       // 4346\n        var e = he.edge, topsite = e.region.r, rightOfSite = p.x > topsite.x;                                          // 4347\n        if (rightOfSite && he.side === \"l\") {                                                                          // 4348\n          return 1;                                                                                                    // 4349\n        }                                                                                                              // 4350\n        if (!rightOfSite && he.side === \"r\") {                                                                         // 4351\n          return 0;                                                                                                    // 4352\n        }                                                                                                              // 4353\n        if (e.a === 1) {                                                                                               // 4354\n          var dyp = p.y - topsite.y, dxp = p.x - topsite.x, fast = 0, above = 0;                                       // 4355\n          if (!rightOfSite && e.b < 0 || rightOfSite && e.b >= 0) {                                                    // 4356\n            above = fast = dyp >= e.b * dxp;                                                                           // 4357\n          } else {                                                                                                     // 4358\n            above = p.x + p.y * e.b > e.c;                                                                             // 4359\n            if (e.b < 0) {                                                                                             // 4360\n              above = !above;                                                                                          // 4361\n            }                                                                                                          // 4362\n            if (!above) {                                                                                              // 4363\n              fast = 1;                                                                                                // 4364\n            }                                                                                                          // 4365\n          }                                                                                                            // 4366\n          if (!fast) {                                                                                                 // 4367\n            var dxs = topsite.x - e.region.l.x;                                                                        // 4368\n            above = e.b * (dxp * dxp - dyp * dyp) < dxs * dyp * (1 + 2 * dxp / dxs + e.b * e.b);                       // 4369\n            if (e.b < 0) {                                                                                             // 4370\n              above = !above;                                                                                          // 4371\n            }                                                                                                          // 4372\n          }                                                                                                            // 4373\n        } else {                                                                                                       // 4374\n          var yl = e.c - e.a * p.x, t1 = p.y - yl, t2 = p.x - topsite.x, t3 = yl - topsite.y;                          // 4375\n          above = t1 * t1 > t2 * t2 + t3 * t3;                                                                         // 4376\n        }                                                                                                              // 4377\n        return he.side === \"l\" ? above : !above;                                                                       // 4378\n      },                                                                                                               // 4379\n      endPoint: function(edge, side, site) {                                                                           // 4380\n        edge.ep[side] = site;                                                                                          // 4381\n        if (!edge.ep[d3_geom_voronoiOpposite[side]]) return;                                                           // 4382\n        callback(edge);                                                                                                // 4383\n      },                                                                                                               // 4384\n      distance: function(s, t) {                                                                                       // 4385\n        var dx = s.x - t.x, dy = s.y - t.y;                                                                            // 4386\n        return Math.sqrt(dx * dx + dy * dy);                                                                           // 4387\n      }                                                                                                                // 4388\n    };                                                                                                                 // 4389\n    var EventQueue = {                                                                                                 // 4390\n      list: [],                                                                                                        // 4391\n      insert: function(he, site, offset) {                                                                             // 4392\n        he.vertex = site;                                                                                              // 4393\n        he.ystar = site.y + offset;                                                                                    // 4394\n        for (var i = 0, list = EventQueue.list, l = list.length; i < l; i++) {                                         // 4395\n          var next = list[i];                                                                                          // 4396\n          if (he.ystar > next.ystar || he.ystar == next.ystar && site.x > next.vertex.x) {                             // 4397\n            continue;                                                                                                  // 4398\n          } else {                                                                                                     // 4399\n            break;                                                                                                     // 4400\n          }                                                                                                            // 4401\n        }                                                                                                              // 4402\n        list.splice(i, 0, he);                                                                                         // 4403\n      },                                                                                                               // 4404\n      del: function(he) {                                                                                              // 4405\n        for (var i = 0, ls = EventQueue.list, l = ls.length; i < l && ls[i] != he; ++i) {}                             // 4406\n        ls.splice(i, 1);                                                                                               // 4407\n      },                                                                                                               // 4408\n      empty: function() {                                                                                              // 4409\n        return EventQueue.list.length === 0;                                                                           // 4410\n      },                                                                                                               // 4411\n      nextEvent: function(he) {                                                                                        // 4412\n        for (var i = 0, ls = EventQueue.list, l = ls.length; i < l; ++i) {                                             // 4413\n          if (ls[i] == he) return ls[i + 1];                                                                           // 4414\n        }                                                                                                              // 4415\n        return null;                                                                                                   // 4416\n      },                                                                                                               // 4417\n      min: function() {                                                                                                // 4418\n        var elem = EventQueue.list[0];                                                                                 // 4419\n        return {                                                                                                       // 4420\n          x: elem.vertex.x,                                                                                            // 4421\n          y: elem.ystar                                                                                                // 4422\n        };                                                                                                             // 4423\n      },                                                                                                               // 4424\n      extractMin: function() {                                                                                         // 4425\n        return EventQueue.list.shift();                                                                                // 4426\n      }                                                                                                                // 4427\n    };                                                                                                                 // 4428\n    EdgeList.init();                                                                                                   // 4429\n    Sites.bottomSite = Sites.list.shift();                                                                             // 4430\n    var newSite = Sites.list.shift(), newIntStar;                                                                      // 4431\n    var lbnd, rbnd, llbnd, rrbnd, bisector;                                                                            // 4432\n    var bot, top, temp, p, v;                                                                                          // 4433\n    var e, pm;                                                                                                         // 4434\n    while (true) {                                                                                                     // 4435\n      if (!EventQueue.empty()) {                                                                                       // 4436\n        newIntStar = EventQueue.min();                                                                                 // 4437\n      }                                                                                                                // 4438\n      if (newSite && (EventQueue.empty() || newSite.y < newIntStar.y || newSite.y == newIntStar.y && newSite.x < newIntStar.x)) {\n        lbnd = EdgeList.leftBound(newSite);                                                                            // 4440\n        rbnd = EdgeList.right(lbnd);                                                                                   // 4441\n        bot = EdgeList.rightRegion(lbnd);                                                                              // 4442\n        e = Geom.bisect(bot, newSite);                                                                                 // 4443\n        bisector = EdgeList.createHalfEdge(e, \"l\");                                                                    // 4444\n        EdgeList.insert(lbnd, bisector);                                                                               // 4445\n        p = Geom.intersect(lbnd, bisector);                                                                            // 4446\n        if (p) {                                                                                                       // 4447\n          EventQueue.del(lbnd);                                                                                        // 4448\n          EventQueue.insert(lbnd, p, Geom.distance(p, newSite));                                                       // 4449\n        }                                                                                                              // 4450\n        lbnd = bisector;                                                                                               // 4451\n        bisector = EdgeList.createHalfEdge(e, \"r\");                                                                    // 4452\n        EdgeList.insert(lbnd, bisector);                                                                               // 4453\n        p = Geom.intersect(bisector, rbnd);                                                                            // 4454\n        if (p) {                                                                                                       // 4455\n          EventQueue.insert(bisector, p, Geom.distance(p, newSite));                                                   // 4456\n        }                                                                                                              // 4457\n        newSite = Sites.list.shift();                                                                                  // 4458\n      } else if (!EventQueue.empty()) {                                                                                // 4459\n        lbnd = EventQueue.extractMin();                                                                                // 4460\n        llbnd = EdgeList.left(lbnd);                                                                                   // 4461\n        rbnd = EdgeList.right(lbnd);                                                                                   // 4462\n        rrbnd = EdgeList.right(rbnd);                                                                                  // 4463\n        bot = EdgeList.leftRegion(lbnd);                                                                               // 4464\n        top = EdgeList.rightRegion(rbnd);                                                                              // 4465\n        v = lbnd.vertex;                                                                                               // 4466\n        Geom.endPoint(lbnd.edge, lbnd.side, v);                                                                        // 4467\n        Geom.endPoint(rbnd.edge, rbnd.side, v);                                                                        // 4468\n        EdgeList.del(lbnd);                                                                                            // 4469\n        EventQueue.del(rbnd);                                                                                          // 4470\n        EdgeList.del(rbnd);                                                                                            // 4471\n        pm = \"l\";                                                                                                      // 4472\n        if (bot.y > top.y) {                                                                                           // 4473\n          temp = bot;                                                                                                  // 4474\n          bot = top;                                                                                                   // 4475\n          top = temp;                                                                                                  // 4476\n          pm = \"r\";                                                                                                    // 4477\n        }                                                                                                              // 4478\n        e = Geom.bisect(bot, top);                                                                                     // 4479\n        bisector = EdgeList.createHalfEdge(e, pm);                                                                     // 4480\n        EdgeList.insert(llbnd, bisector);                                                                              // 4481\n        Geom.endPoint(e, d3_geom_voronoiOpposite[pm], v);                                                              // 4482\n        p = Geom.intersect(llbnd, bisector);                                                                           // 4483\n        if (p) {                                                                                                       // 4484\n          EventQueue.del(llbnd);                                                                                       // 4485\n          EventQueue.insert(llbnd, p, Geom.distance(p, bot));                                                          // 4486\n        }                                                                                                              // 4487\n        p = Geom.intersect(bisector, rrbnd);                                                                           // 4488\n        if (p) {                                                                                                       // 4489\n          EventQueue.insert(bisector, p, Geom.distance(p, bot));                                                       // 4490\n        }                                                                                                              // 4491\n      } else {                                                                                                         // 4492\n        break;                                                                                                         // 4493\n      }                                                                                                                // 4494\n    }                                                                                                                  // 4495\n    for (lbnd = EdgeList.right(EdgeList.leftEnd); lbnd != EdgeList.rightEnd; lbnd = EdgeList.right(lbnd)) {            // 4496\n      callback(lbnd.edge);                                                                                             // 4497\n    }                                                                                                                  // 4498\n  }                                                                                                                    // 4499\n  d3.geom.quadtree = function(points, x1, y1, x2, y2) {                                                                // 4500\n    var x = d3_svg_lineX, y = d3_svg_lineY, compat;                                                                    // 4501\n    if (compat = arguments.length) {                                                                                   // 4502\n      x = d3_geom_quadtreeCompatX;                                                                                     // 4503\n      y = d3_geom_quadtreeCompatY;                                                                                     // 4504\n      if (compat === 3) {                                                                                              // 4505\n        y2 = y1;                                                                                                       // 4506\n        x2 = x1;                                                                                                       // 4507\n        y1 = x1 = 0;                                                                                                   // 4508\n      }                                                                                                                // 4509\n      return quadtree(points);                                                                                         // 4510\n    }                                                                                                                  // 4511\n    function quadtree(data) {                                                                                          // 4512\n      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;                                 // 4513\n      if (x1 != null) {                                                                                                // 4514\n        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;                                                                        // 4515\n      } else {                                                                                                         // 4516\n        x2_ = y2_ = -(x1_ = y1_ = Infinity);                                                                           // 4517\n        xs = [], ys = [];                                                                                              // 4518\n        n = data.length;                                                                                               // 4519\n        if (compat) for (i = 0; i < n; ++i) {                                                                          // 4520\n          d = data[i];                                                                                                 // 4521\n          if (d.x < x1_) x1_ = d.x;                                                                                    // 4522\n          if (d.y < y1_) y1_ = d.y;                                                                                    // 4523\n          if (d.x > x2_) x2_ = d.x;                                                                                    // 4524\n          if (d.y > y2_) y2_ = d.y;                                                                                    // 4525\n          xs.push(d.x);                                                                                                // 4526\n          ys.push(d.y);                                                                                                // 4527\n        } else for (i = 0; i < n; ++i) {                                                                               // 4528\n          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);                                                                // 4529\n          if (x_ < x1_) x1_ = x_;                                                                                      // 4530\n          if (y_ < y1_) y1_ = y_;                                                                                      // 4531\n          if (x_ > x2_) x2_ = x_;                                                                                      // 4532\n          if (y_ > y2_) y2_ = y_;                                                                                      // 4533\n          xs.push(x_);                                                                                                 // 4534\n          ys.push(y_);                                                                                                 // 4535\n        }                                                                                                              // 4536\n      }                                                                                                                // 4537\n      var dx = x2_ - x1_, dy = y2_ - y1_;                                                                              // 4538\n      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;                                                                // 4539\n      function insert(n, d, x, y, x1, y1, x2, y2) {                                                                    // 4540\n        if (isNaN(x) || isNaN(y)) return;                                                                              // 4541\n        if (n.leaf) {                                                                                                  // 4542\n          var nx = n.x, ny = n.y;                                                                                      // 4543\n          if (nx != null) {                                                                                            // 4544\n            if (Math.abs(nx - x) + Math.abs(ny - y) < .01) {                                                           // 4545\n              insertChild(n, d, x, y, x1, y1, x2, y2);                                                                 // 4546\n            } else {                                                                                                   // 4547\n              var nPoint = n.point;                                                                                    // 4548\n              n.x = n.y = n.point = null;                                                                              // 4549\n              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);                                                          // 4550\n              insertChild(n, d, x, y, x1, y1, x2, y2);                                                                 // 4551\n            }                                                                                                          // 4552\n          } else {                                                                                                     // 4553\n            n.x = x, n.y = y, n.point = d;                                                                             // 4554\n          }                                                                                                            // 4555\n        } else {                                                                                                       // 4556\n          insertChild(n, d, x, y, x1, y1, x2, y2);                                                                     // 4557\n        }                                                                                                              // 4558\n      }                                                                                                                // 4559\n      function insertChild(n, d, x, y, x1, y1, x2, y2) {                                                               // 4560\n        var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, right = x >= sx, bottom = y >= sy, i = (bottom << 1) + right;    // 4561\n        n.leaf = false;                                                                                                // 4562\n        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());                                                       // 4563\n        if (right) x1 = sx; else x2 = sx;                                                                              // 4564\n        if (bottom) y1 = sy; else y2 = sy;                                                                             // 4565\n        insert(n, d, x, y, x1, y1, x2, y2);                                                                            // 4566\n      }                                                                                                                // 4567\n      var root = d3_geom_quadtreeNode();                                                                               // 4568\n      root.add = function(d) {                                                                                         // 4569\n        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);                                                   // 4570\n      };                                                                                                               // 4571\n      root.visit = function(f) {                                                                                       // 4572\n        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);                                                            // 4573\n      };                                                                                                               // 4574\n      i = -1;                                                                                                          // 4575\n      if (x1 == null) {                                                                                                // 4576\n        while (++i < n) {                                                                                              // 4577\n          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);                                                     // 4578\n        }                                                                                                              // 4579\n        --i;                                                                                                           // 4580\n      } else data.forEach(root.add);                                                                                   // 4581\n      xs = ys = data = d = null;                                                                                       // 4582\n      return root;                                                                                                     // 4583\n    }                                                                                                                  // 4584\n    quadtree.x = function(_) {                                                                                         // 4585\n      return arguments.length ? (x = _, quadtree) : x;                                                                 // 4586\n    };                                                                                                                 // 4587\n    quadtree.y = function(_) {                                                                                         // 4588\n      return arguments.length ? (y = _, quadtree) : y;                                                                 // 4589\n    };                                                                                                                 // 4590\n    quadtree.size = function(_) {                                                                                      // 4591\n      if (!arguments.length) return x1 == null ? null : [ x2, y2 ];                                                    // 4592\n      if (_ == null) {                                                                                                 // 4593\n        x1 = y1 = x2 = y2 = null;                                                                                      // 4594\n      } else {                                                                                                         // 4595\n        x1 = y1 = 0;                                                                                                   // 4596\n        x2 = +_[0], y2 = +_[1];                                                                                        // 4597\n      }                                                                                                                // 4598\n      return quadtree;                                                                                                 // 4599\n    };                                                                                                                 // 4600\n    return quadtree;                                                                                                   // 4601\n  };                                                                                                                   // 4602\n  function d3_geom_quadtreeCompatX(d) {                                                                                // 4603\n    return d.x;                                                                                                        // 4604\n  }                                                                                                                    // 4605\n  function d3_geom_quadtreeCompatY(d) {                                                                                // 4606\n    return d.y;                                                                                                        // 4607\n  }                                                                                                                    // 4608\n  function d3_geom_quadtreeNode() {                                                                                    // 4609\n    return {                                                                                                           // 4610\n      leaf: true,                                                                                                      // 4611\n      nodes: [],                                                                                                       // 4612\n      point: null,                                                                                                     // 4613\n      x: null,                                                                                                         // 4614\n      y: null                                                                                                          // 4615\n    };                                                                                                                 // 4616\n  }                                                                                                                    // 4617\n  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {                                                            // 4618\n    if (!f(node, x1, y1, x2, y2)) {                                                                                    // 4619\n      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;                                             // 4620\n      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);                                          // 4621\n      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);                                          // 4622\n      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);                                          // 4623\n      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);                                          // 4624\n    }                                                                                                                  // 4625\n  }                                                                                                                    // 4626\n  d3.interpolateRgb = d3_interpolateRgb;                                                                               // 4627\n  function d3_interpolateRgb(a, b) {                                                                                   // 4628\n    a = d3.rgb(a);                                                                                                     // 4629\n    b = d3.rgb(b);                                                                                                     // 4630\n    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;                                     // 4631\n    return function(t) {                                                                                               // 4632\n      return \"#\" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));\n    };                                                                                                                 // 4634\n  }                                                                                                                    // 4635\n  d3.transform = function(string) {                                                                                    // 4636\n    var g = d3_document.createElementNS(d3.ns.prefix.svg, \"g\");                                                        // 4637\n    return (d3.transform = function(string) {                                                                          // 4638\n      g.setAttribute(\"transform\", string);                                                                             // 4639\n      var t = g.transform.baseVal.consolidate();                                                                       // 4640\n      return new d3_transform(t ? t.matrix : d3_transformIdentity);                                                    // 4641\n    })(string);                                                                                                        // 4642\n  };                                                                                                                   // 4643\n  function d3_transform(m) {                                                                                           // 4644\n    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;\n    if (r0[0] * r1[1] < r1[0] * r0[1]) {                                                                               // 4646\n      r0[0] *= -1;                                                                                                     // 4647\n      r0[1] *= -1;                                                                                                     // 4648\n      kx *= -1;                                                                                                        // 4649\n      kz *= -1;                                                                                                        // 4650\n    }                                                                                                                  // 4651\n    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;                            // 4652\n    this.translate = [ m.e, m.f ];                                                                                     // 4653\n    this.scale = [ kx, ky ];                                                                                           // 4654\n    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;                                                              // 4655\n  }                                                                                                                    // 4656\n  d3_transform.prototype.toString = function() {                                                                       // 4657\n    return \"translate(\" + this.translate + \")rotate(\" + this.rotate + \")skewX(\" + this.skew + \")scale(\" + this.scale + \")\";\n  };                                                                                                                   // 4659\n  function d3_transformDot(a, b) {                                                                                     // 4660\n    return a[0] * b[0] + a[1] * b[1];                                                                                  // 4661\n  }                                                                                                                    // 4662\n  function d3_transformNormalize(a) {                                                                                  // 4663\n    var k = Math.sqrt(d3_transformDot(a, a));                                                                          // 4664\n    if (k) {                                                                                                           // 4665\n      a[0] /= k;                                                                                                       // 4666\n      a[1] /= k;                                                                                                       // 4667\n    }                                                                                                                  // 4668\n    return k;                                                                                                          // 4669\n  }                                                                                                                    // 4670\n  function d3_transformCombine(a, b, k) {                                                                              // 4671\n    a[0] += k * b[0];                                                                                                  // 4672\n    a[1] += k * b[1];                                                                                                  // 4673\n    return a;                                                                                                          // 4674\n  }                                                                                                                    // 4675\n  var d3_transformIdentity = {                                                                                         // 4676\n    a: 1,                                                                                                              // 4677\n    b: 0,                                                                                                              // 4678\n    c: 0,                                                                                                              // 4679\n    d: 1,                                                                                                              // 4680\n    e: 0,                                                                                                              // 4681\n    f: 0                                                                                                               // 4682\n  };                                                                                                                   // 4683\n  d3.interpolateNumber = d3_interpolateNumber;                                                                         // 4684\n  function d3_interpolateNumber(a, b) {                                                                                // 4685\n    b -= a;                                                                                                            // 4686\n    return function(t) {                                                                                               // 4687\n      return a + b * t;                                                                                                // 4688\n    };                                                                                                                 // 4689\n  }                                                                                                                    // 4690\n  d3.interpolateTransform = d3_interpolateTransform;                                                                   // 4691\n  function d3_interpolateTransform(a, b) {                                                                             // 4692\n    var s = [], q = [], n, A = d3.transform(a), B = d3.transform(b), ta = A.translate, tb = B.translate, ra = A.rotate, rb = B.rotate, wa = A.skew, wb = B.skew, ka = A.scale, kb = B.scale;\n    if (ta[0] != tb[0] || ta[1] != tb[1]) {                                                                            // 4694\n      s.push(\"translate(\", null, \",\", null, \")\");                                                                      // 4695\n      q.push({                                                                                                         // 4696\n        i: 1,                                                                                                          // 4697\n        x: d3_interpolateNumber(ta[0], tb[0])                                                                          // 4698\n      }, {                                                                                                             // 4699\n        i: 3,                                                                                                          // 4700\n        x: d3_interpolateNumber(ta[1], tb[1])                                                                          // 4701\n      });                                                                                                              // 4702\n    } else if (tb[0] || tb[1]) {                                                                                       // 4703\n      s.push(\"translate(\" + tb + \")\");                                                                                 // 4704\n    } else {                                                                                                           // 4705\n      s.push(\"\");                                                                                                      // 4706\n    }                                                                                                                  // 4707\n    if (ra != rb) {                                                                                                    // 4708\n      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;                                                 // 4709\n      q.push({                                                                                                         // 4710\n        i: s.push(s.pop() + \"rotate(\", null, \")\") - 2,                                                                 // 4711\n        x: d3_interpolateNumber(ra, rb)                                                                                // 4712\n      });                                                                                                              // 4713\n    } else if (rb) {                                                                                                   // 4714\n      s.push(s.pop() + \"rotate(\" + rb + \")\");                                                                          // 4715\n    }                                                                                                                  // 4716\n    if (wa != wb) {                                                                                                    // 4717\n      q.push({                                                                                                         // 4718\n        i: s.push(s.pop() + \"skewX(\", null, \")\") - 2,                                                                  // 4719\n        x: d3_interpolateNumber(wa, wb)                                                                                // 4720\n      });                                                                                                              // 4721\n    } else if (wb) {                                                                                                   // 4722\n      s.push(s.pop() + \"skewX(\" + wb + \")\");                                                                           // 4723\n    }                                                                                                                  // 4724\n    if (ka[0] != kb[0] || ka[1] != kb[1]) {                                                                            // 4725\n      n = s.push(s.pop() + \"scale(\", null, \",\", null, \")\");                                                            // 4726\n      q.push({                                                                                                         // 4727\n        i: n - 4,                                                                                                      // 4728\n        x: d3_interpolateNumber(ka[0], kb[0])                                                                          // 4729\n      }, {                                                                                                             // 4730\n        i: n - 2,                                                                                                      // 4731\n        x: d3_interpolateNumber(ka[1], kb[1])                                                                          // 4732\n      });                                                                                                              // 4733\n    } else if (kb[0] != 1 || kb[1] != 1) {                                                                             // 4734\n      s.push(s.pop() + \"scale(\" + kb + \")\");                                                                           // 4735\n    }                                                                                                                  // 4736\n    n = q.length;                                                                                                      // 4737\n    return function(t) {                                                                                               // 4738\n      var i = -1, o;                                                                                                   // 4739\n      while (++i < n) s[(o = q[i]).i] = o.x(t);                                                                        // 4740\n      return s.join(\"\");                                                                                               // 4741\n    };                                                                                                                 // 4742\n  }                                                                                                                    // 4743\n  d3.interpolateObject = d3_interpolateObject;                                                                         // 4744\n  function d3_interpolateObject(a, b) {                                                                                // 4745\n    var i = {}, c = {}, k;                                                                                             // 4746\n    for (k in a) {                                                                                                     // 4747\n      if (k in b) {                                                                                                    // 4748\n        i[k] = d3_interpolateByName(k)(a[k], b[k]);                                                                    // 4749\n      } else {                                                                                                         // 4750\n        c[k] = a[k];                                                                                                   // 4751\n      }                                                                                                                // 4752\n    }                                                                                                                  // 4753\n    for (k in b) {                                                                                                     // 4754\n      if (!(k in a)) {                                                                                                 // 4755\n        c[k] = b[k];                                                                                                   // 4756\n      }                                                                                                                // 4757\n    }                                                                                                                  // 4758\n    return function(t) {                                                                                               // 4759\n      for (k in i) c[k] = i[k](t);                                                                                     // 4760\n      return c;                                                                                                        // 4761\n    };                                                                                                                 // 4762\n  }                                                                                                                    // 4763\n  d3.interpolateString = d3_interpolateString;                                                                         // 4764\n  function d3_interpolateString(a, b) {                                                                                // 4765\n    var m, i, j, s0 = 0, s1 = 0, s = [], q = [], n, o;                                                                 // 4766\n    d3_interpolate_number.lastIndex = 0;                                                                               // 4767\n    for (i = 0; m = d3_interpolate_number.exec(b); ++i) {                                                              // 4768\n      if (m.index) s.push(b.substring(s0, s1 = m.index));                                                              // 4769\n      q.push({                                                                                                         // 4770\n        i: s.length,                                                                                                   // 4771\n        x: m[0]                                                                                                        // 4772\n      });                                                                                                              // 4773\n      s.push(null);                                                                                                    // 4774\n      s0 = d3_interpolate_number.lastIndex;                                                                            // 4775\n    }                                                                                                                  // 4776\n    if (s0 < b.length) s.push(b.substring(s0));                                                                        // 4777\n    for (i = 0, n = q.length; (m = d3_interpolate_number.exec(a)) && i < n; ++i) {                                     // 4778\n      o = q[i];                                                                                                        // 4779\n      if (o.x == m[0]) {                                                                                               // 4780\n        if (o.i) {                                                                                                     // 4781\n          if (s[o.i + 1] == null) {                                                                                    // 4782\n            s[o.i - 1] += o.x;                                                                                         // 4783\n            s.splice(o.i, 1);                                                                                          // 4784\n            for (j = i + 1; j < n; ++j) q[j].i--;                                                                      // 4785\n          } else {                                                                                                     // 4786\n            s[o.i - 1] += o.x + s[o.i + 1];                                                                            // 4787\n            s.splice(o.i, 2);                                                                                          // 4788\n            for (j = i + 1; j < n; ++j) q[j].i -= 2;                                                                   // 4789\n          }                                                                                                            // 4790\n        } else {                                                                                                       // 4791\n          if (s[o.i + 1] == null) {                                                                                    // 4792\n            s[o.i] = o.x;                                                                                              // 4793\n          } else {                                                                                                     // 4794\n            s[o.i] = o.x + s[o.i + 1];                                                                                 // 4795\n            s.splice(o.i + 1, 1);                                                                                      // 4796\n            for (j = i + 1; j < n; ++j) q[j].i--;                                                                      // 4797\n          }                                                                                                            // 4798\n        }                                                                                                              // 4799\n        q.splice(i, 1);                                                                                                // 4800\n        n--;                                                                                                           // 4801\n        i--;                                                                                                           // 4802\n      } else {                                                                                                         // 4803\n        o.x = d3_interpolateNumber(parseFloat(m[0]), parseFloat(o.x));                                                 // 4804\n      }                                                                                                                // 4805\n    }                                                                                                                  // 4806\n    while (i < n) {                                                                                                    // 4807\n      o = q.pop();                                                                                                     // 4808\n      if (s[o.i + 1] == null) {                                                                                        // 4809\n        s[o.i] = o.x;                                                                                                  // 4810\n      } else {                                                                                                         // 4811\n        s[o.i] = o.x + s[o.i + 1];                                                                                     // 4812\n        s.splice(o.i + 1, 1);                                                                                          // 4813\n      }                                                                                                                // 4814\n      n--;                                                                                                             // 4815\n    }                                                                                                                  // 4816\n    if (s.length === 1) {                                                                                              // 4817\n      return s[0] == null ? q[0].x : function() {                                                                      // 4818\n        return b;                                                                                                      // 4819\n      };                                                                                                               // 4820\n    }                                                                                                                  // 4821\n    return function(t) {                                                                                               // 4822\n      for (i = 0; i < n; ++i) s[(o = q[i]).i] = o.x(t);                                                                // 4823\n      return s.join(\"\");                                                                                               // 4824\n    };                                                                                                                 // 4825\n  }                                                                                                                    // 4826\n  var d3_interpolate_number = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g;                                           // 4827\n  d3.interpolate = d3_interpolate;                                                                                     // 4828\n  function d3_interpolate(a, b) {                                                                                      // 4829\n    var i = d3.interpolators.length, f;                                                                                // 4830\n    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;                                                             // 4831\n    return f;                                                                                                          // 4832\n  }                                                                                                                    // 4833\n  function d3_interpolateByName(name) {                                                                                // 4834\n    return name == \"transform\" ? d3_interpolateTransform : d3_interpolate;                                             // 4835\n  }                                                                                                                    // 4836\n  d3.interpolators = [ d3_interpolateObject, function(a, b) {                                                          // 4837\n    return Array.isArray(b) && d3_interpolateArray(a, b);                                                              // 4838\n  }, function(a, b) {                                                                                                  // 4839\n    return (typeof a === \"string\" || typeof b === \"string\") && d3_interpolateString(a + \"\", b + \"\");                   // 4840\n  }, function(a, b) {                                                                                                  // 4841\n    return (typeof b === \"string\" ? d3_rgb_names.has(b) || /^(#|rgb\\(|hsl\\()/.test(b) : b instanceof d3_Color) && d3_interpolateRgb(a, b);\n  }, function(a, b) {                                                                                                  // 4843\n    return !isNaN(a = +a) && !isNaN(b = +b) && d3_interpolateNumber(a, b);                                             // 4844\n  } ];                                                                                                                 // 4845\n  d3.interpolateArray = d3_interpolateArray;                                                                           // 4846\n  function d3_interpolateArray(a, b) {                                                                                 // 4847\n    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;                            // 4848\n    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));                                                       // 4849\n    for (;i < na; ++i) c[i] = a[i];                                                                                    // 4850\n    for (;i < nb; ++i) c[i] = b[i];                                                                                    // 4851\n    return function(t) {                                                                                               // 4852\n      for (i = 0; i < n0; ++i) c[i] = x[i](t);                                                                         // 4853\n      return c;                                                                                                        // 4854\n    };                                                                                                                 // 4855\n  }                                                                                                                    // 4856\n  var d3_ease_default = function() {                                                                                   // 4857\n    return d3_identity;                                                                                                // 4858\n  };                                                                                                                   // 4859\n  var d3_ease = d3.map({                                                                                               // 4860\n    linear: d3_ease_default,                                                                                           // 4861\n    poly: d3_ease_poly,                                                                                                // 4862\n    quad: function() {                                                                                                 // 4863\n      return d3_ease_quad;                                                                                             // 4864\n    },                                                                                                                 // 4865\n    cubic: function() {                                                                                                // 4866\n      return d3_ease_cubic;                                                                                            // 4867\n    },                                                                                                                 // 4868\n    sin: function() {                                                                                                  // 4869\n      return d3_ease_sin;                                                                                              // 4870\n    },                                                                                                                 // 4871\n    exp: function() {                                                                                                  // 4872\n      return d3_ease_exp;                                                                                              // 4873\n    },                                                                                                                 // 4874\n    circle: function() {                                                                                               // 4875\n      return d3_ease_circle;                                                                                           // 4876\n    },                                                                                                                 // 4877\n    elastic: d3_ease_elastic,                                                                                          // 4878\n    back: d3_ease_back,                                                                                                // 4879\n    bounce: function() {                                                                                               // 4880\n      return d3_ease_bounce;                                                                                           // 4881\n    }                                                                                                                  // 4882\n  });                                                                                                                  // 4883\n  var d3_ease_mode = d3.map({                                                                                          // 4884\n    \"in\": d3_identity,                                                                                                 // 4885\n    out: d3_ease_reverse,                                                                                              // 4886\n    \"in-out\": d3_ease_reflect,                                                                                         // 4887\n    \"out-in\": function(f) {                                                                                            // 4888\n      return d3_ease_reflect(d3_ease_reverse(f));                                                                      // 4889\n    }                                                                                                                  // 4890\n  });                                                                                                                  // 4891\n  d3.ease = function(name) {                                                                                           // 4892\n    var i = name.indexOf(\"-\"), t = i >= 0 ? name.substring(0, i) : name, m = i >= 0 ? name.substring(i + 1) : \"in\";    // 4893\n    t = d3_ease.get(t) || d3_ease_default;                                                                             // 4894\n    m = d3_ease_mode.get(m) || d3_identity;                                                                            // 4895\n    return d3_ease_clamp(m(t.apply(null, Array.prototype.slice.call(arguments, 1))));                                  // 4896\n  };                                                                                                                   // 4897\n  function d3_ease_clamp(f) {                                                                                          // 4898\n    return function(t) {                                                                                               // 4899\n      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);                                                                           // 4900\n    };                                                                                                                 // 4901\n  }                                                                                                                    // 4902\n  function d3_ease_reverse(f) {                                                                                        // 4903\n    return function(t) {                                                                                               // 4904\n      return 1 - f(1 - t);                                                                                             // 4905\n    };                                                                                                                 // 4906\n  }                                                                                                                    // 4907\n  function d3_ease_reflect(f) {                                                                                        // 4908\n    return function(t) {                                                                                               // 4909\n      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));                                                              // 4910\n    };                                                                                                                 // 4911\n  }                                                                                                                    // 4912\n  function d3_ease_quad(t) {                                                                                           // 4913\n    return t * t;                                                                                                      // 4914\n  }                                                                                                                    // 4915\n  function d3_ease_cubic(t) {                                                                                          // 4916\n    return t * t * t;                                                                                                  // 4917\n  }                                                                                                                    // 4918\n  function d3_ease_cubicInOut(t) {                                                                                     // 4919\n    if (t <= 0) return 0;                                                                                              // 4920\n    if (t >= 1) return 1;                                                                                              // 4921\n    var t2 = t * t, t3 = t2 * t;                                                                                       // 4922\n    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);                                                                // 4923\n  }                                                                                                                    // 4924\n  function d3_ease_poly(e) {                                                                                           // 4925\n    return function(t) {                                                                                               // 4926\n      return Math.pow(t, e);                                                                                           // 4927\n    };                                                                                                                 // 4928\n  }                                                                                                                    // 4929\n  function d3_ease_sin(t) {                                                                                            // 4930\n    return 1 - Math.cos(t * π / 2);                                                                                    // 4931\n  }                                                                                                                    // 4932\n  function d3_ease_exp(t) {                                                                                            // 4933\n    return Math.pow(2, 10 * (t - 1));                                                                                  // 4934\n  }                                                                                                                    // 4935\n  function d3_ease_circle(t) {                                                                                         // 4936\n    return 1 - Math.sqrt(1 - t * t);                                                                                   // 4937\n  }                                                                                                                    // 4938\n  function d3_ease_elastic(a, p) {                                                                                     // 4939\n    var s;                                                                                                             // 4940\n    if (arguments.length < 2) p = .45;                                                                                 // 4941\n    if (arguments.length) s = p / (2 * π) * Math.asin(1 / a); else a = 1, s = p / 4;                                   // 4942\n    return function(t) {                                                                                               // 4943\n      return 1 + a * Math.pow(2, 10 * -t) * Math.sin((t - s) * 2 * π / p);                                             // 4944\n    };                                                                                                                 // 4945\n  }                                                                                                                    // 4946\n  function d3_ease_back(s) {                                                                                           // 4947\n    if (!s) s = 1.70158;                                                                                               // 4948\n    return function(t) {                                                                                               // 4949\n      return t * t * ((s + 1) * t - s);                                                                                // 4950\n    };                                                                                                                 // 4951\n  }                                                                                                                    // 4952\n  function d3_ease_bounce(t) {                                                                                         // 4953\n    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;\n  }                                                                                                                    // 4955\n  d3.interpolateHcl = d3_interpolateHcl;                                                                               // 4956\n  function d3_interpolateHcl(a, b) {                                                                                   // 4957\n    a = d3.hcl(a);                                                                                                     // 4958\n    b = d3.hcl(b);                                                                                                     // 4959\n    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;                                     // 4960\n    if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;                                                            // 4961\n    return function(t) {                                                                                               // 4962\n      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + \"\";                                                   // 4963\n    };                                                                                                                 // 4964\n  }                                                                                                                    // 4965\n  d3.interpolateHsl = d3_interpolateHsl;                                                                               // 4966\n  function d3_interpolateHsl(a, b) {                                                                                   // 4967\n    a = d3.hsl(a);                                                                                                     // 4968\n    b = d3.hsl(b);                                                                                                     // 4969\n    var h0 = a.h, s0 = a.s, l0 = a.l, h1 = b.h - h0, s1 = b.s - s0, l1 = b.l - l0;                                     // 4970\n    if (h1 > 180) h1 -= 360; else if (h1 < -180) h1 += 360;                                                            // 4971\n    return function(t) {                                                                                               // 4972\n      return d3_hsl_rgb(h0 + h1 * t, s0 + s1 * t, l0 + l1 * t) + \"\";                                                   // 4973\n    };                                                                                                                 // 4974\n  }                                                                                                                    // 4975\n  d3.interpolateLab = d3_interpolateLab;                                                                               // 4976\n  function d3_interpolateLab(a, b) {                                                                                   // 4977\n    a = d3.lab(a);                                                                                                     // 4978\n    b = d3.lab(b);                                                                                                     // 4979\n    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;                                     // 4980\n    return function(t) {                                                                                               // 4981\n      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + \"\";                                                   // 4982\n    };                                                                                                                 // 4983\n  }                                                                                                                    // 4984\n  d3.interpolateRound = d3_interpolateRound;                                                                           // 4985\n  function d3_interpolateRound(a, b) {                                                                                 // 4986\n    b -= a;                                                                                                            // 4987\n    return function(t) {                                                                                               // 4988\n      return Math.round(a + b * t);                                                                                    // 4989\n    };                                                                                                                 // 4990\n  }                                                                                                                    // 4991\n  function d3_uninterpolateNumber(a, b) {                                                                              // 4992\n    b = b - (a = +a) ? 1 / (b - a) : 0;                                                                                // 4993\n    return function(x) {                                                                                               // 4994\n      return (x - a) * b;                                                                                              // 4995\n    };                                                                                                                 // 4996\n  }                                                                                                                    // 4997\n  function d3_uninterpolateClamp(a, b) {                                                                               // 4998\n    b = b - (a = +a) ? 1 / (b - a) : 0;                                                                                // 4999\n    return function(x) {                                                                                               // 5000\n      return Math.max(0, Math.min(1, (x - a) * b));                                                                    // 5001\n    };                                                                                                                 // 5002\n  }                                                                                                                    // 5003\n  d3.layout = {};                                                                                                      // 5004\n  d3.layout.bundle = function() {                                                                                      // 5005\n    return function(links) {                                                                                           // 5006\n      var paths = [], i = -1, n = links.length;                                                                        // 5007\n      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));                                                      // 5008\n      return paths;                                                                                                    // 5009\n    };                                                                                                                 // 5010\n  };                                                                                                                   // 5011\n  function d3_layout_bundlePath(link) {                                                                                // 5012\n    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];\n    while (start !== lca) {                                                                                            // 5014\n      start = start.parent;                                                                                            // 5015\n      points.push(start);                                                                                              // 5016\n    }                                                                                                                  // 5017\n    var k = points.length;                                                                                             // 5018\n    while (end !== lca) {                                                                                              // 5019\n      points.splice(k, 0, end);                                                                                        // 5020\n      end = end.parent;                                                                                                // 5021\n    }                                                                                                                  // 5022\n    return points;                                                                                                     // 5023\n  }                                                                                                                    // 5024\n  function d3_layout_bundleAncestors(node) {                                                                           // 5025\n    var ancestors = [], parent = node.parent;                                                                          // 5026\n    while (parent != null) {                                                                                           // 5027\n      ancestors.push(node);                                                                                            // 5028\n      node = parent;                                                                                                   // 5029\n      parent = parent.parent;                                                                                          // 5030\n    }                                                                                                                  // 5031\n    ancestors.push(node);                                                                                              // 5032\n    return ancestors;                                                                                                  // 5033\n  }                                                                                                                    // 5034\n  function d3_layout_bundleLeastCommonAncestor(a, b) {                                                                 // 5035\n    if (a === b) return a;                                                                                             // 5036\n    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;\n    while (aNode === bNode) {                                                                                          // 5038\n      sharedNode = aNode;                                                                                              // 5039\n      aNode = aNodes.pop();                                                                                            // 5040\n      bNode = bNodes.pop();                                                                                            // 5041\n    }                                                                                                                  // 5042\n    return sharedNode;                                                                                                 // 5043\n  }                                                                                                                    // 5044\n  d3.layout.chord = function() {                                                                                       // 5045\n    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;                     // 5046\n    function relayout() {                                                                                              // 5047\n      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;                // 5048\n      chords = [];                                                                                                     // 5049\n      groups = [];                                                                                                     // 5050\n      k = 0, i = -1;                                                                                                   // 5051\n      while (++i < n) {                                                                                                // 5052\n        x = 0, j = -1;                                                                                                 // 5053\n        while (++j < n) {                                                                                              // 5054\n          x += matrix[i][j];                                                                                           // 5055\n        }                                                                                                              // 5056\n        groupSums.push(x);                                                                                             // 5057\n        subgroupIndex.push(d3.range(n));                                                                               // 5058\n        k += x;                                                                                                        // 5059\n      }                                                                                                                // 5060\n      if (sortGroups) {                                                                                                // 5061\n        groupIndex.sort(function(a, b) {                                                                               // 5062\n          return sortGroups(groupSums[a], groupSums[b]);                                                               // 5063\n        });                                                                                                            // 5064\n      }                                                                                                                // 5065\n      if (sortSubgroups) {                                                                                             // 5066\n        subgroupIndex.forEach(function(d, i) {                                                                         // 5067\n          d.sort(function(a, b) {                                                                                      // 5068\n            return sortSubgroups(matrix[i][a], matrix[i][b]);                                                          // 5069\n          });                                                                                                          // 5070\n        });                                                                                                            // 5071\n      }                                                                                                                // 5072\n      k = (2 * π - padding * n) / k;                                                                                   // 5073\n      x = 0, i = -1;                                                                                                   // 5074\n      while (++i < n) {                                                                                                // 5075\n        x0 = x, j = -1;                                                                                                // 5076\n        while (++j < n) {                                                                                              // 5077\n          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;              // 5078\n          subgroups[di + \"-\" + dj] = {                                                                                 // 5079\n            index: di,                                                                                                 // 5080\n            subindex: dj,                                                                                              // 5081\n            startAngle: a0,                                                                                            // 5082\n            endAngle: a1,                                                                                              // 5083\n            value: v                                                                                                   // 5084\n          };                                                                                                           // 5085\n        }                                                                                                              // 5086\n        groups[di] = {                                                                                                 // 5087\n          index: di,                                                                                                   // 5088\n          startAngle: x0,                                                                                              // 5089\n          endAngle: x,                                                                                                 // 5090\n          value: (x - x0) / k                                                                                          // 5091\n        };                                                                                                             // 5092\n        x += padding;                                                                                                  // 5093\n      }                                                                                                                // 5094\n      i = -1;                                                                                                          // 5095\n      while (++i < n) {                                                                                                // 5096\n        j = i - 1;                                                                                                     // 5097\n        while (++j < n) {                                                                                              // 5098\n          var source = subgroups[i + \"-\" + j], target = subgroups[j + \"-\" + i];                                        // 5099\n          if (source.value || target.value) {                                                                          // 5100\n            chords.push(source.value < target.value ? {                                                                // 5101\n              source: target,                                                                                          // 5102\n              target: source                                                                                           // 5103\n            } : {                                                                                                      // 5104\n              source: source,                                                                                          // 5105\n              target: target                                                                                           // 5106\n            });                                                                                                        // 5107\n          }                                                                                                            // 5108\n        }                                                                                                              // 5109\n      }                                                                                                                // 5110\n      if (sortChords) resort();                                                                                        // 5111\n    }                                                                                                                  // 5112\n    function resort() {                                                                                                // 5113\n      chords.sort(function(a, b) {                                                                                     // 5114\n        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);               // 5115\n      });                                                                                                              // 5116\n    }                                                                                                                  // 5117\n    chord.matrix = function(x) {                                                                                       // 5118\n      if (!arguments.length) return matrix;                                                                            // 5119\n      n = (matrix = x) && matrix.length;                                                                               // 5120\n      chords = groups = null;                                                                                          // 5121\n      return chord;                                                                                                    // 5122\n    };                                                                                                                 // 5123\n    chord.padding = function(x) {                                                                                      // 5124\n      if (!arguments.length) return padding;                                                                           // 5125\n      padding = x;                                                                                                     // 5126\n      chords = groups = null;                                                                                          // 5127\n      return chord;                                                                                                    // 5128\n    };                                                                                                                 // 5129\n    chord.sortGroups = function(x) {                                                                                   // 5130\n      if (!arguments.length) return sortGroups;                                                                        // 5131\n      sortGroups = x;                                                                                                  // 5132\n      chords = groups = null;                                                                                          // 5133\n      return chord;                                                                                                    // 5134\n    };                                                                                                                 // 5135\n    chord.sortSubgroups = function(x) {                                                                                // 5136\n      if (!arguments.length) return sortSubgroups;                                                                     // 5137\n      sortSubgroups = x;                                                                                               // 5138\n      chords = null;                                                                                                   // 5139\n      return chord;                                                                                                    // 5140\n    };                                                                                                                 // 5141\n    chord.sortChords = function(x) {                                                                                   // 5142\n      if (!arguments.length) return sortChords;                                                                        // 5143\n      sortChords = x;                                                                                                  // 5144\n      if (chords) resort();                                                                                            // 5145\n      return chord;                                                                                                    // 5146\n    };                                                                                                                 // 5147\n    chord.chords = function() {                                                                                        // 5148\n      if (!chords) relayout();                                                                                         // 5149\n      return chords;                                                                                                   // 5150\n    };                                                                                                                 // 5151\n    chord.groups = function() {                                                                                        // 5152\n      if (!groups) relayout();                                                                                         // 5153\n      return groups;                                                                                                   // 5154\n    };                                                                                                                 // 5155\n    return chord;                                                                                                      // 5156\n  };                                                                                                                   // 5157\n  d3.layout.force = function() {                                                                                       // 5158\n    var force = {}, event = d3.dispatch(\"start\", \"tick\", \"end\"), size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, gravity = .1, theta = .8, nodes = [], links = [], distances, strengths, charges;\n    function repulse(node) {                                                                                           // 5160\n      return function(quad, x1, _, x2) {                                                                               // 5161\n        if (quad.point !== node) {                                                                                     // 5162\n          var dx = quad.cx - node.x, dy = quad.cy - node.y, dn = 1 / Math.sqrt(dx * dx + dy * dy);                     // 5163\n          if ((x2 - x1) * dn < theta) {                                                                                // 5164\n            var k = quad.charge * dn * dn;                                                                             // 5165\n            node.px -= dx * k;                                                                                         // 5166\n            node.py -= dy * k;                                                                                         // 5167\n            return true;                                                                                               // 5168\n          }                                                                                                            // 5169\n          if (quad.point && isFinite(dn)) {                                                                            // 5170\n            var k = quad.pointCharge * dn * dn;                                                                        // 5171\n            node.px -= dx * k;                                                                                         // 5172\n            node.py -= dy * k;                                                                                         // 5173\n          }                                                                                                            // 5174\n        }                                                                                                              // 5175\n        return !quad.charge;                                                                                           // 5176\n      };                                                                                                               // 5177\n    }                                                                                                                  // 5178\n    force.tick = function() {                                                                                          // 5179\n      if ((alpha *= .99) < .005) {                                                                                     // 5180\n        event.end({                                                                                                    // 5181\n          type: \"end\",                                                                                                 // 5182\n          alpha: alpha = 0                                                                                             // 5183\n        });                                                                                                            // 5184\n        return true;                                                                                                   // 5185\n      }                                                                                                                // 5186\n      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;                                               // 5187\n      for (i = 0; i < m; ++i) {                                                                                        // 5188\n        o = links[i];                                                                                                  // 5189\n        s = o.source;                                                                                                  // 5190\n        t = o.target;                                                                                                  // 5191\n        x = t.x - s.x;                                                                                                 // 5192\n        y = t.y - s.y;                                                                                                 // 5193\n        if (l = x * x + y * y) {                                                                                       // 5194\n          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;                                          // 5195\n          x *= l;                                                                                                      // 5196\n          y *= l;                                                                                                      // 5197\n          t.x -= x * (k = s.weight / (t.weight + s.weight));                                                           // 5198\n          t.y -= y * k;                                                                                                // 5199\n          s.x += x * (k = 1 - k);                                                                                      // 5200\n          s.y += y * k;                                                                                                // 5201\n        }                                                                                                              // 5202\n      }                                                                                                                // 5203\n      if (k = alpha * gravity) {                                                                                       // 5204\n        x = size[0] / 2;                                                                                               // 5205\n        y = size[1] / 2;                                                                                               // 5206\n        i = -1;                                                                                                        // 5207\n        if (k) while (++i < n) {                                                                                       // 5208\n          o = nodes[i];                                                                                                // 5209\n          o.x += (x - o.x) * k;                                                                                        // 5210\n          o.y += (y - o.y) * k;                                                                                        // 5211\n        }                                                                                                              // 5212\n      }                                                                                                                // 5213\n      if (charge) {                                                                                                    // 5214\n        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);                                        // 5215\n        i = -1;                                                                                                        // 5216\n        while (++i < n) {                                                                                              // 5217\n          if (!(o = nodes[i]).fixed) {                                                                                 // 5218\n            q.visit(repulse(o));                                                                                       // 5219\n          }                                                                                                            // 5220\n        }                                                                                                              // 5221\n      }                                                                                                                // 5222\n      i = -1;                                                                                                          // 5223\n      while (++i < n) {                                                                                                // 5224\n        o = nodes[i];                                                                                                  // 5225\n        if (o.fixed) {                                                                                                 // 5226\n          o.x = o.px;                                                                                                  // 5227\n          o.y = o.py;                                                                                                  // 5228\n        } else {                                                                                                       // 5229\n          o.x -= (o.px - (o.px = o.x)) * friction;                                                                     // 5230\n          o.y -= (o.py - (o.py = o.y)) * friction;                                                                     // 5231\n        }                                                                                                              // 5232\n      }                                                                                                                // 5233\n      event.tick({                                                                                                     // 5234\n        type: \"tick\",                                                                                                  // 5235\n        alpha: alpha                                                                                                   // 5236\n      });                                                                                                              // 5237\n    };                                                                                                                 // 5238\n    force.nodes = function(x) {                                                                                        // 5239\n      if (!arguments.length) return nodes;                                                                             // 5240\n      nodes = x;                                                                                                       // 5241\n      return force;                                                                                                    // 5242\n    };                                                                                                                 // 5243\n    force.links = function(x) {                                                                                        // 5244\n      if (!arguments.length) return links;                                                                             // 5245\n      links = x;                                                                                                       // 5246\n      return force;                                                                                                    // 5247\n    };                                                                                                                 // 5248\n    force.size = function(x) {                                                                                         // 5249\n      if (!arguments.length) return size;                                                                              // 5250\n      size = x;                                                                                                        // 5251\n      return force;                                                                                                    // 5252\n    };                                                                                                                 // 5253\n    force.linkDistance = function(x) {                                                                                 // 5254\n      if (!arguments.length) return linkDistance;                                                                      // 5255\n      linkDistance = typeof x === \"function\" ? x : +x;                                                                 // 5256\n      return force;                                                                                                    // 5257\n    };                                                                                                                 // 5258\n    force.distance = force.linkDistance;                                                                               // 5259\n    force.linkStrength = function(x) {                                                                                 // 5260\n      if (!arguments.length) return linkStrength;                                                                      // 5261\n      linkStrength = typeof x === \"function\" ? x : +x;                                                                 // 5262\n      return force;                                                                                                    // 5263\n    };                                                                                                                 // 5264\n    force.friction = function(x) {                                                                                     // 5265\n      if (!arguments.length) return friction;                                                                          // 5266\n      friction = +x;                                                                                                   // 5267\n      return force;                                                                                                    // 5268\n    };                                                                                                                 // 5269\n    force.charge = function(x) {                                                                                       // 5270\n      if (!arguments.length) return charge;                                                                            // 5271\n      charge = typeof x === \"function\" ? x : +x;                                                                       // 5272\n      return force;                                                                                                    // 5273\n    };                                                                                                                 // 5274\n    force.gravity = function(x) {                                                                                      // 5275\n      if (!arguments.length) return gravity;                                                                           // 5276\n      gravity = +x;                                                                                                    // 5277\n      return force;                                                                                                    // 5278\n    };                                                                                                                 // 5279\n    force.theta = function(x) {                                                                                        // 5280\n      if (!arguments.length) return theta;                                                                             // 5281\n      theta = +x;                                                                                                      // 5282\n      return force;                                                                                                    // 5283\n    };                                                                                                                 // 5284\n    force.alpha = function(x) {                                                                                        // 5285\n      if (!arguments.length) return alpha;                                                                             // 5286\n      x = +x;                                                                                                          // 5287\n      if (alpha) {                                                                                                     // 5288\n        if (x > 0) alpha = x; else alpha = 0;                                                                          // 5289\n      } else if (x > 0) {                                                                                              // 5290\n        event.start({                                                                                                  // 5291\n          type: \"start\",                                                                                               // 5292\n          alpha: alpha = x                                                                                             // 5293\n        });                                                                                                            // 5294\n        d3.timer(force.tick);                                                                                          // 5295\n      }                                                                                                                // 5296\n      return force;                                                                                                    // 5297\n    };                                                                                                                 // 5298\n    force.start = function() {                                                                                         // 5299\n      var i, j, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;                            // 5300\n      for (i = 0; i < n; ++i) {                                                                                        // 5301\n        (o = nodes[i]).index = i;                                                                                      // 5302\n        o.weight = 0;                                                                                                  // 5303\n      }                                                                                                                // 5304\n      for (i = 0; i < m; ++i) {                                                                                        // 5305\n        o = links[i];                                                                                                  // 5306\n        if (typeof o.source == \"number\") o.source = nodes[o.source];                                                   // 5307\n        if (typeof o.target == \"number\") o.target = nodes[o.target];                                                   // 5308\n        ++o.source.weight;                                                                                             // 5309\n        ++o.target.weight;                                                                                             // 5310\n      }                                                                                                                // 5311\n      for (i = 0; i < n; ++i) {                                                                                        // 5312\n        o = nodes[i];                                                                                                  // 5313\n        if (isNaN(o.x)) o.x = position(\"x\", w);                                                                        // 5314\n        if (isNaN(o.y)) o.y = position(\"y\", h);                                                                        // 5315\n        if (isNaN(o.px)) o.px = o.x;                                                                                   // 5316\n        if (isNaN(o.py)) o.py = o.y;                                                                                   // 5317\n      }                                                                                                                // 5318\n      distances = [];                                                                                                  // 5319\n      if (typeof linkDistance === \"function\") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;\n      strengths = [];                                                                                                  // 5321\n      if (typeof linkStrength === \"function\") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;\n      charges = [];                                                                                                    // 5323\n      if (typeof charge === \"function\") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;\n      function position(dimension, size) {                                                                             // 5325\n        var neighbors = neighbor(i), j = -1, m = neighbors.length, x;                                                  // 5326\n        while (++j < m) if (!isNaN(x = neighbors[j][dimension])) return x;                                             // 5327\n        return Math.random() * size;                                                                                   // 5328\n      }                                                                                                                // 5329\n      function neighbor() {                                                                                            // 5330\n        if (!neighbors) {                                                                                              // 5331\n          neighbors = [];                                                                                              // 5332\n          for (j = 0; j < n; ++j) {                                                                                    // 5333\n            neighbors[j] = [];                                                                                         // 5334\n          }                                                                                                            // 5335\n          for (j = 0; j < m; ++j) {                                                                                    // 5336\n            var o = links[j];                                                                                          // 5337\n            neighbors[o.source.index].push(o.target);                                                                  // 5338\n            neighbors[o.target.index].push(o.source);                                                                  // 5339\n          }                                                                                                            // 5340\n        }                                                                                                              // 5341\n        return neighbors[i];                                                                                           // 5342\n      }                                                                                                                // 5343\n      return force.resume();                                                                                           // 5344\n    };                                                                                                                 // 5345\n    force.resume = function() {                                                                                        // 5346\n      return force.alpha(.1);                                                                                          // 5347\n    };                                                                                                                 // 5348\n    force.stop = function() {                                                                                          // 5349\n      return force.alpha(0);                                                                                           // 5350\n    };                                                                                                                 // 5351\n    force.drag = function() {                                                                                          // 5352\n      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on(\"dragstart.force\", d3_layout_forceDragstart).on(\"drag.force\", dragmove).on(\"dragend.force\", d3_layout_forceDragend);\n      if (!arguments.length) return drag;                                                                              // 5354\n      this.on(\"mouseover.force\", d3_layout_forceMouseover).on(\"mouseout.force\", d3_layout_forceMouseout).call(drag);   // 5355\n    };                                                                                                                 // 5356\n    function dragmove(d) {                                                                                             // 5357\n      d.px = d3.event.x, d.py = d3.event.y;                                                                            // 5358\n      force.resume();                                                                                                  // 5359\n    }                                                                                                                  // 5360\n    return d3.rebind(force, event, \"on\");                                                                              // 5361\n  };                                                                                                                   // 5362\n  function d3_layout_forceDragstart(d) {                                                                               // 5363\n    d.fixed |= 2;                                                                                                      // 5364\n  }                                                                                                                    // 5365\n  function d3_layout_forceDragend(d) {                                                                                 // 5366\n    d.fixed &= ~6;                                                                                                     // 5367\n  }                                                                                                                    // 5368\n  function d3_layout_forceMouseover(d) {                                                                               // 5369\n    d.fixed |= 4;                                                                                                      // 5370\n    d.px = d.x, d.py = d.y;                                                                                            // 5371\n  }                                                                                                                    // 5372\n  function d3_layout_forceMouseout(d) {                                                                                // 5373\n    d.fixed &= ~4;                                                                                                     // 5374\n  }                                                                                                                    // 5375\n  function d3_layout_forceAccumulate(quad, alpha, charges) {                                                           // 5376\n    var cx = 0, cy = 0;                                                                                                // 5377\n    quad.charge = 0;                                                                                                   // 5378\n    if (!quad.leaf) {                                                                                                  // 5379\n      var nodes = quad.nodes, n = nodes.length, i = -1, c;                                                             // 5380\n      while (++i < n) {                                                                                                // 5381\n        c = nodes[i];                                                                                                  // 5382\n        if (c == null) continue;                                                                                       // 5383\n        d3_layout_forceAccumulate(c, alpha, charges);                                                                  // 5384\n        quad.charge += c.charge;                                                                                       // 5385\n        cx += c.charge * c.cx;                                                                                         // 5386\n        cy += c.charge * c.cy;                                                                                         // 5387\n      }                                                                                                                // 5388\n    }                                                                                                                  // 5389\n    if (quad.point) {                                                                                                  // 5390\n      if (!quad.leaf) {                                                                                                // 5391\n        quad.point.x += Math.random() - .5;                                                                            // 5392\n        quad.point.y += Math.random() - .5;                                                                            // 5393\n      }                                                                                                                // 5394\n      var k = alpha * charges[quad.point.index];                                                                       // 5395\n      quad.charge += quad.pointCharge = k;                                                                             // 5396\n      cx += k * quad.point.x;                                                                                          // 5397\n      cy += k * quad.point.y;                                                                                          // 5398\n    }                                                                                                                  // 5399\n    quad.cx = cx / quad.charge;                                                                                        // 5400\n    quad.cy = cy / quad.charge;                                                                                        // 5401\n  }                                                                                                                    // 5402\n  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1;                                               // 5403\n  d3.layout.hierarchy = function() {                                                                                   // 5404\n    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;      // 5405\n    function recurse(node, depth, nodes) {                                                                             // 5406\n      var childs = children.call(hierarchy, node, depth);                                                              // 5407\n      node.depth = depth;                                                                                              // 5408\n      nodes.push(node);                                                                                                // 5409\n      if (childs && (n = childs.length)) {                                                                             // 5410\n        var i = -1, n, c = node.children = [], v = 0, j = depth + 1, d;                                                // 5411\n        while (++i < n) {                                                                                              // 5412\n          d = recurse(childs[i], j, nodes);                                                                            // 5413\n          d.parent = node;                                                                                             // 5414\n          c.push(d);                                                                                                   // 5415\n          v += d.value;                                                                                                // 5416\n        }                                                                                                              // 5417\n        if (sort) c.sort(sort);                                                                                        // 5418\n        if (value) node.value = v;                                                                                     // 5419\n      } else if (value) {                                                                                              // 5420\n        node.value = +value.call(hierarchy, node, depth) || 0;                                                         // 5421\n      }                                                                                                                // 5422\n      return node;                                                                                                     // 5423\n    }                                                                                                                  // 5424\n    function revalue(node, depth) {                                                                                    // 5425\n      var children = node.children, v = 0;                                                                             // 5426\n      if (children && (n = children.length)) {                                                                         // 5427\n        var i = -1, n, j = depth + 1;                                                                                  // 5428\n        while (++i < n) v += revalue(children[i], j);                                                                  // 5429\n      } else if (value) {                                                                                              // 5430\n        v = +value.call(hierarchy, node, depth) || 0;                                                                  // 5431\n      }                                                                                                                // 5432\n      if (value) node.value = v;                                                                                       // 5433\n      return v;                                                                                                        // 5434\n    }                                                                                                                  // 5435\n    function hierarchy(d) {                                                                                            // 5436\n      var nodes = [];                                                                                                  // 5437\n      recurse(d, 0, nodes);                                                                                            // 5438\n      return nodes;                                                                                                    // 5439\n    }                                                                                                                  // 5440\n    hierarchy.sort = function(x) {                                                                                     // 5441\n      if (!arguments.length) return sort;                                                                              // 5442\n      sort = x;                                                                                                        // 5443\n      return hierarchy;                                                                                                // 5444\n    };                                                                                                                 // 5445\n    hierarchy.children = function(x) {                                                                                 // 5446\n      if (!arguments.length) return children;                                                                          // 5447\n      children = x;                                                                                                    // 5448\n      return hierarchy;                                                                                                // 5449\n    };                                                                                                                 // 5450\n    hierarchy.value = function(x) {                                                                                    // 5451\n      if (!arguments.length) return value;                                                                             // 5452\n      value = x;                                                                                                       // 5453\n      return hierarchy;                                                                                                // 5454\n    };                                                                                                                 // 5455\n    hierarchy.revalue = function(root) {                                                                               // 5456\n      revalue(root, 0);                                                                                                // 5457\n      return root;                                                                                                     // 5458\n    };                                                                                                                 // 5459\n    return hierarchy;                                                                                                  // 5460\n  };                                                                                                                   // 5461\n  function d3_layout_hierarchyRebind(object, hierarchy) {                                                              // 5462\n    d3.rebind(object, hierarchy, \"sort\", \"children\", \"value\");                                                         // 5463\n    object.nodes = object;                                                                                             // 5464\n    object.links = d3_layout_hierarchyLinks;                                                                           // 5465\n    return object;                                                                                                     // 5466\n  }                                                                                                                    // 5467\n  function d3_layout_hierarchyChildren(d) {                                                                            // 5468\n    return d.children;                                                                                                 // 5469\n  }                                                                                                                    // 5470\n  function d3_layout_hierarchyValue(d) {                                                                               // 5471\n    return d.value;                                                                                                    // 5472\n  }                                                                                                                    // 5473\n  function d3_layout_hierarchySort(a, b) {                                                                             // 5474\n    return b.value - a.value;                                                                                          // 5475\n  }                                                                                                                    // 5476\n  function d3_layout_hierarchyLinks(nodes) {                                                                           // 5477\n    return d3.merge(nodes.map(function(parent) {                                                                       // 5478\n      return (parent.children || []).map(function(child) {                                                             // 5479\n        return {                                                                                                       // 5480\n          source: parent,                                                                                              // 5481\n          target: child                                                                                                // 5482\n        };                                                                                                             // 5483\n      });                                                                                                              // 5484\n    }));                                                                                                               // 5485\n  }                                                                                                                    // 5486\n  d3.layout.partition = function() {                                                                                   // 5487\n    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];                                                            // 5488\n    function position(node, x, dx, dy) {                                                                               // 5489\n      var children = node.children;                                                                                    // 5490\n      node.x = x;                                                                                                      // 5491\n      node.y = node.depth * dy;                                                                                        // 5492\n      node.dx = dx;                                                                                                    // 5493\n      node.dy = dy;                                                                                                    // 5494\n      if (children && (n = children.length)) {                                                                         // 5495\n        var i = -1, n, c, d;                                                                                           // 5496\n        dx = node.value ? dx / node.value : 0;                                                                         // 5497\n        while (++i < n) {                                                                                              // 5498\n          position(c = children[i], x, d = c.value * dx, dy);                                                          // 5499\n          x += d;                                                                                                      // 5500\n        }                                                                                                              // 5501\n      }                                                                                                                // 5502\n    }                                                                                                                  // 5503\n    function depth(node) {                                                                                             // 5504\n      var children = node.children, d = 0;                                                                             // 5505\n      if (children && (n = children.length)) {                                                                         // 5506\n        var i = -1, n;                                                                                                 // 5507\n        while (++i < n) d = Math.max(d, depth(children[i]));                                                           // 5508\n      }                                                                                                                // 5509\n      return 1 + d;                                                                                                    // 5510\n    }                                                                                                                  // 5511\n    function partition(d, i) {                                                                                         // 5512\n      var nodes = hierarchy.call(this, d, i);                                                                          // 5513\n      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));                                                       // 5514\n      return nodes;                                                                                                    // 5515\n    }                                                                                                                  // 5516\n    partition.size = function(x) {                                                                                     // 5517\n      if (!arguments.length) return size;                                                                              // 5518\n      size = x;                                                                                                        // 5519\n      return partition;                                                                                                // 5520\n    };                                                                                                                 // 5521\n    return d3_layout_hierarchyRebind(partition, hierarchy);                                                            // 5522\n  };                                                                                                                   // 5523\n  d3.layout.pie = function() {                                                                                         // 5524\n    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = 2 * π;                             // 5525\n    function pie(data) {                                                                                               // 5526\n      var values = data.map(function(d, i) {                                                                           // 5527\n        return +value.call(pie, d, i);                                                                                 // 5528\n      });                                                                                                              // 5529\n      var a = +(typeof startAngle === \"function\" ? startAngle.apply(this, arguments) : startAngle);                    // 5530\n      var k = ((typeof endAngle === \"function\" ? endAngle.apply(this, arguments) : endAngle) - a) / d3.sum(values);    // 5531\n      var index = d3.range(data.length);                                                                               // 5532\n      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {                                // 5533\n        return values[j] - values[i];                                                                                  // 5534\n      } : function(i, j) {                                                                                             // 5535\n        return sort(data[i], data[j]);                                                                                 // 5536\n      });                                                                                                              // 5537\n      var arcs = [];                                                                                                   // 5538\n      index.forEach(function(i) {                                                                                      // 5539\n        var d;                                                                                                         // 5540\n        arcs[i] = {                                                                                                    // 5541\n          data: data[i],                                                                                               // 5542\n          value: d = values[i],                                                                                        // 5543\n          startAngle: a,                                                                                               // 5544\n          endAngle: a += d * k                                                                                         // 5545\n        };                                                                                                             // 5546\n      });                                                                                                              // 5547\n      return arcs;                                                                                                     // 5548\n    }                                                                                                                  // 5549\n    pie.value = function(x) {                                                                                          // 5550\n      if (!arguments.length) return value;                                                                             // 5551\n      value = x;                                                                                                       // 5552\n      return pie;                                                                                                      // 5553\n    };                                                                                                                 // 5554\n    pie.sort = function(x) {                                                                                           // 5555\n      if (!arguments.length) return sort;                                                                              // 5556\n      sort = x;                                                                                                        // 5557\n      return pie;                                                                                                      // 5558\n    };                                                                                                                 // 5559\n    pie.startAngle = function(x) {                                                                                     // 5560\n      if (!arguments.length) return startAngle;                                                                        // 5561\n      startAngle = x;                                                                                                  // 5562\n      return pie;                                                                                                      // 5563\n    };                                                                                                                 // 5564\n    pie.endAngle = function(x) {                                                                                       // 5565\n      if (!arguments.length) return endAngle;                                                                          // 5566\n      endAngle = x;                                                                                                    // 5567\n      return pie;                                                                                                      // 5568\n    };                                                                                                                 // 5569\n    return pie;                                                                                                        // 5570\n  };                                                                                                                   // 5571\n  var d3_layout_pieSortByValue = {};                                                                                   // 5572\n  d3.layout.stack = function() {                                                                                       // 5573\n    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;\n    function stack(data, index) {                                                                                      // 5575\n      var series = data.map(function(d, i) {                                                                           // 5576\n        return values.call(stack, d, i);                                                                               // 5577\n      });                                                                                                              // 5578\n      var points = series.map(function(d) {                                                                            // 5579\n        return d.map(function(v, i) {                                                                                  // 5580\n          return [ x.call(stack, v, i), y.call(stack, v, i) ];                                                         // 5581\n        });                                                                                                            // 5582\n      });                                                                                                              // 5583\n      var orders = order.call(stack, points, index);                                                                   // 5584\n      series = d3.permute(series, orders);                                                                             // 5585\n      points = d3.permute(points, orders);                                                                             // 5586\n      var offsets = offset.call(stack, points, index);                                                                 // 5587\n      var n = series.length, m = series[0].length, i, j, o;                                                            // 5588\n      for (j = 0; j < m; ++j) {                                                                                        // 5589\n        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);                                                // 5590\n        for (i = 1; i < n; ++i) {                                                                                      // 5591\n          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);                                    // 5592\n        }                                                                                                              // 5593\n      }                                                                                                                // 5594\n      return data;                                                                                                     // 5595\n    }                                                                                                                  // 5596\n    stack.values = function(x) {                                                                                       // 5597\n      if (!arguments.length) return values;                                                                            // 5598\n      values = x;                                                                                                      // 5599\n      return stack;                                                                                                    // 5600\n    };                                                                                                                 // 5601\n    stack.order = function(x) {                                                                                        // 5602\n      if (!arguments.length) return order;                                                                             // 5603\n      order = typeof x === \"function\" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;               // 5604\n      return stack;                                                                                                    // 5605\n    };                                                                                                                 // 5606\n    stack.offset = function(x) {                                                                                       // 5607\n      if (!arguments.length) return offset;                                                                            // 5608\n      offset = typeof x === \"function\" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;               // 5609\n      return stack;                                                                                                    // 5610\n    };                                                                                                                 // 5611\n    stack.x = function(z) {                                                                                            // 5612\n      if (!arguments.length) return x;                                                                                 // 5613\n      x = z;                                                                                                           // 5614\n      return stack;                                                                                                    // 5615\n    };                                                                                                                 // 5616\n    stack.y = function(z) {                                                                                            // 5617\n      if (!arguments.length) return y;                                                                                 // 5618\n      y = z;                                                                                                           // 5619\n      return stack;                                                                                                    // 5620\n    };                                                                                                                 // 5621\n    stack.out = function(z) {                                                                                          // 5622\n      if (!arguments.length) return out;                                                                               // 5623\n      out = z;                                                                                                         // 5624\n      return stack;                                                                                                    // 5625\n    };                                                                                                                 // 5626\n    return stack;                                                                                                      // 5627\n  };                                                                                                                   // 5628\n  function d3_layout_stackX(d) {                                                                                       // 5629\n    return d.x;                                                                                                        // 5630\n  }                                                                                                                    // 5631\n  function d3_layout_stackY(d) {                                                                                       // 5632\n    return d.y;                                                                                                        // 5633\n  }                                                                                                                    // 5634\n  function d3_layout_stackOut(d, y0, y) {                                                                              // 5635\n    d.y0 = y0;                                                                                                         // 5636\n    d.y = y;                                                                                                           // 5637\n  }                                                                                                                    // 5638\n  var d3_layout_stackOrders = d3.map({                                                                                 // 5639\n    \"inside-out\": function(data) {                                                                                     // 5640\n      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {\n        return max[a] - max[b];                                                                                        // 5642\n      }), top = 0, bottom = 0, tops = [], bottoms = [];                                                                // 5643\n      for (i = 0; i < n; ++i) {                                                                                        // 5644\n        j = index[i];                                                                                                  // 5645\n        if (top < bottom) {                                                                                            // 5646\n          top += sums[j];                                                                                              // 5647\n          tops.push(j);                                                                                                // 5648\n        } else {                                                                                                       // 5649\n          bottom += sums[j];                                                                                           // 5650\n          bottoms.push(j);                                                                                             // 5651\n        }                                                                                                              // 5652\n      }                                                                                                                // 5653\n      return bottoms.reverse().concat(tops);                                                                           // 5654\n    },                                                                                                                 // 5655\n    reverse: function(data) {                                                                                          // 5656\n      return d3.range(data.length).reverse();                                                                          // 5657\n    },                                                                                                                 // 5658\n    \"default\": d3_layout_stackOrderDefault                                                                             // 5659\n  });                                                                                                                  // 5660\n  var d3_layout_stackOffsets = d3.map({                                                                                // 5661\n    silhouette: function(data) {                                                                                       // 5662\n      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];                                   // 5663\n      for (j = 0; j < m; ++j) {                                                                                        // 5664\n        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];                                                             // 5665\n        if (o > max) max = o;                                                                                          // 5666\n        sums.push(o);                                                                                                  // 5667\n      }                                                                                                                // 5668\n      for (j = 0; j < m; ++j) {                                                                                        // 5669\n        y0[j] = (max - sums[j]) / 2;                                                                                   // 5670\n      }                                                                                                                // 5671\n      return y0;                                                                                                       // 5672\n    },                                                                                                                 // 5673\n    wiggle: function(data) {                                                                                           // 5674\n      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];                         // 5675\n      y0[0] = o = o0 = 0;                                                                                              // 5676\n      for (j = 1; j < m; ++j) {                                                                                        // 5677\n        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];                                                           // 5678\n        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {                                                  // 5679\n          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {                               // 5680\n            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;                                                            // 5681\n          }                                                                                                            // 5682\n          s2 += s3 * data[i][j][1];                                                                                    // 5683\n        }                                                                                                              // 5684\n        y0[j] = o -= s1 ? s2 / s1 * dx : 0;                                                                            // 5685\n        if (o < o0) o0 = o;                                                                                            // 5686\n      }                                                                                                                // 5687\n      for (j = 0; j < m; ++j) y0[j] -= o0;                                                                             // 5688\n      return y0;                                                                                                       // 5689\n    },                                                                                                                 // 5690\n    expand: function(data) {                                                                                           // 5691\n      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];                                            // 5692\n      for (j = 0; j < m; ++j) {                                                                                        // 5693\n        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];                                                             // 5694\n        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;             // 5695\n      }                                                                                                                // 5696\n      for (j = 0; j < m; ++j) y0[j] = 0;                                                                               // 5697\n      return y0;                                                                                                       // 5698\n    },                                                                                                                 // 5699\n    zero: d3_layout_stackOffsetZero                                                                                    // 5700\n  });                                                                                                                  // 5701\n  function d3_layout_stackOrderDefault(data) {                                                                         // 5702\n    return d3.range(data.length);                                                                                      // 5703\n  }                                                                                                                    // 5704\n  function d3_layout_stackOffsetZero(data) {                                                                           // 5705\n    var j = -1, m = data[0].length, y0 = [];                                                                           // 5706\n    while (++j < m) y0[j] = 0;                                                                                         // 5707\n    return y0;                                                                                                         // 5708\n  }                                                                                                                    // 5709\n  function d3_layout_stackMaxIndex(array) {                                                                            // 5710\n    var i = 1, j = 0, v = array[0][1], k, n = array.length;                                                            // 5711\n    for (;i < n; ++i) {                                                                                                // 5712\n      if ((k = array[i][1]) > v) {                                                                                     // 5713\n        j = i;                                                                                                         // 5714\n        v = k;                                                                                                         // 5715\n      }                                                                                                                // 5716\n    }                                                                                                                  // 5717\n    return j;                                                                                                          // 5718\n  }                                                                                                                    // 5719\n  function d3_layout_stackReduceSum(d) {                                                                               // 5720\n    return d.reduce(d3_layout_stackSum, 0);                                                                            // 5721\n  }                                                                                                                    // 5722\n  function d3_layout_stackSum(p, d) {                                                                                  // 5723\n    return p + d[1];                                                                                                   // 5724\n  }                                                                                                                    // 5725\n  d3.layout.histogram = function() {                                                                                   // 5726\n    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;  // 5727\n    function histogram(data, i) {                                                                                      // 5728\n      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;\n      while (++i < m) {                                                                                                // 5730\n        bin = bins[i] = [];                                                                                            // 5731\n        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);                                                          // 5732\n        bin.y = 0;                                                                                                     // 5733\n      }                                                                                                                // 5734\n      if (m > 0) {                                                                                                     // 5735\n        i = -1;                                                                                                        // 5736\n        while (++i < n) {                                                                                              // 5737\n          x = values[i];                                                                                               // 5738\n          if (x >= range[0] && x <= range[1]) {                                                                        // 5739\n            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];                                                            // 5740\n            bin.y += k;                                                                                                // 5741\n            bin.push(data[i]);                                                                                         // 5742\n          }                                                                                                            // 5743\n        }                                                                                                              // 5744\n      }                                                                                                                // 5745\n      return bins;                                                                                                     // 5746\n    }                                                                                                                  // 5747\n    histogram.value = function(x) {                                                                                    // 5748\n      if (!arguments.length) return valuer;                                                                            // 5749\n      valuer = x;                                                                                                      // 5750\n      return histogram;                                                                                                // 5751\n    };                                                                                                                 // 5752\n    histogram.range = function(x) {                                                                                    // 5753\n      if (!arguments.length) return ranger;                                                                            // 5754\n      ranger = d3_functor(x);                                                                                          // 5755\n      return histogram;                                                                                                // 5756\n    };                                                                                                                 // 5757\n    histogram.bins = function(x) {                                                                                     // 5758\n      if (!arguments.length) return binner;                                                                            // 5759\n      binner = typeof x === \"number\" ? function(range) {                                                               // 5760\n        return d3_layout_histogramBinFixed(range, x);                                                                  // 5761\n      } : d3_functor(x);                                                                                               // 5762\n      return histogram;                                                                                                // 5763\n    };                                                                                                                 // 5764\n    histogram.frequency = function(x) {                                                                                // 5765\n      if (!arguments.length) return frequency;                                                                         // 5766\n      frequency = !!x;                                                                                                 // 5767\n      return histogram;                                                                                                // 5768\n    };                                                                                                                 // 5769\n    return histogram;                                                                                                  // 5770\n  };                                                                                                                   // 5771\n  function d3_layout_histogramBinSturges(range, values) {                                                              // 5772\n    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));                      // 5773\n  }                                                                                                                    // 5774\n  function d3_layout_histogramBinFixed(range, n) {                                                                     // 5775\n    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];                                                         // 5776\n    while (++x <= n) f[x] = m * x + b;                                                                                 // 5777\n    return f;                                                                                                          // 5778\n  }                                                                                                                    // 5779\n  function d3_layout_histogramRange(values) {                                                                          // 5780\n    return [ d3.min(values), d3.max(values) ];                                                                         // 5781\n  }                                                                                                                    // 5782\n  d3.layout.tree = function() {                                                                                        // 5783\n    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ];\n    function tree(d, i) {                                                                                              // 5785\n      var nodes = hierarchy.call(this, d, i), root = nodes[0];                                                         // 5786\n      function firstWalk(node, previousSibling) {                                                                      // 5787\n        var children = node.children, layout = node._tree;                                                             // 5788\n        if (children && (n = children.length)) {                                                                       // 5789\n          var n, firstChild = children[0], previousChild, ancestor = firstChild, child, i = -1;                        // 5790\n          while (++i < n) {                                                                                            // 5791\n            child = children[i];                                                                                       // 5792\n            firstWalk(child, previousChild);                                                                           // 5793\n            ancestor = apportion(child, previousChild, ancestor);                                                      // 5794\n            previousChild = child;                                                                                     // 5795\n          }                                                                                                            // 5796\n          d3_layout_treeShift(node);                                                                                   // 5797\n          var midpoint = .5 * (firstChild._tree.prelim + child._tree.prelim);                                          // 5798\n          if (previousSibling) {                                                                                       // 5799\n            layout.prelim = previousSibling._tree.prelim + separation(node, previousSibling);                          // 5800\n            layout.mod = layout.prelim - midpoint;                                                                     // 5801\n          } else {                                                                                                     // 5802\n            layout.prelim = midpoint;                                                                                  // 5803\n          }                                                                                                            // 5804\n        } else {                                                                                                       // 5805\n          if (previousSibling) {                                                                                       // 5806\n            layout.prelim = previousSibling._tree.prelim + separation(node, previousSibling);                          // 5807\n          }                                                                                                            // 5808\n        }                                                                                                              // 5809\n      }                                                                                                                // 5810\n      function secondWalk(node, x) {                                                                                   // 5811\n        node.x = node._tree.prelim + x;                                                                                // 5812\n        var children = node.children;                                                                                  // 5813\n        if (children && (n = children.length)) {                                                                       // 5814\n          var i = -1, n;                                                                                               // 5815\n          x += node._tree.mod;                                                                                         // 5816\n          while (++i < n) {                                                                                            // 5817\n            secondWalk(children[i], x);                                                                                // 5818\n          }                                                                                                            // 5819\n        }                                                                                                              // 5820\n      }                                                                                                                // 5821\n      function apportion(node, previousSibling, ancestor) {                                                            // 5822\n        if (previousSibling) {                                                                                         // 5823\n          var vip = node, vop = node, vim = previousSibling, vom = node.parent.children[0], sip = vip._tree.mod, sop = vop._tree.mod, sim = vim._tree.mod, som = vom._tree.mod, shift;\n          while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {                          // 5825\n            vom = d3_layout_treeLeft(vom);                                                                             // 5826\n            vop = d3_layout_treeRight(vop);                                                                            // 5827\n            vop._tree.ancestor = node;                                                                                 // 5828\n            shift = vim._tree.prelim + sim - vip._tree.prelim - sip + separation(vim, vip);                            // 5829\n            if (shift > 0) {                                                                                           // 5830\n              d3_layout_treeMove(d3_layout_treeAncestor(vim, node, ancestor), node, shift);                            // 5831\n              sip += shift;                                                                                            // 5832\n              sop += shift;                                                                                            // 5833\n            }                                                                                                          // 5834\n            sim += vim._tree.mod;                                                                                      // 5835\n            sip += vip._tree.mod;                                                                                      // 5836\n            som += vom._tree.mod;                                                                                      // 5837\n            sop += vop._tree.mod;                                                                                      // 5838\n          }                                                                                                            // 5839\n          if (vim && !d3_layout_treeRight(vop)) {                                                                      // 5840\n            vop._tree.thread = vim;                                                                                    // 5841\n            vop._tree.mod += sim - sop;                                                                                // 5842\n          }                                                                                                            // 5843\n          if (vip && !d3_layout_treeLeft(vom)) {                                                                       // 5844\n            vom._tree.thread = vip;                                                                                    // 5845\n            vom._tree.mod += sip - som;                                                                                // 5846\n            ancestor = node;                                                                                           // 5847\n          }                                                                                                            // 5848\n        }                                                                                                              // 5849\n        return ancestor;                                                                                               // 5850\n      }                                                                                                                // 5851\n      d3_layout_treeVisitAfter(root, function(node, previousSibling) {                                                 // 5852\n        node._tree = {                                                                                                 // 5853\n          ancestor: node,                                                                                              // 5854\n          prelim: 0,                                                                                                   // 5855\n          mod: 0,                                                                                                      // 5856\n          change: 0,                                                                                                   // 5857\n          shift: 0,                                                                                                    // 5858\n          number: previousSibling ? previousSibling._tree.number + 1 : 0                                               // 5859\n        };                                                                                                             // 5860\n      });                                                                                                              // 5861\n      firstWalk(root);                                                                                                 // 5862\n      secondWalk(root, -root._tree.prelim);                                                                            // 5863\n      var left = d3_layout_treeSearch(root, d3_layout_treeLeftmost), right = d3_layout_treeSearch(root, d3_layout_treeRightmost), deep = d3_layout_treeSearch(root, d3_layout_treeDeepest), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2, y1 = deep.depth || 1;\n      d3_layout_treeVisitAfter(root, function(node) {                                                                  // 5865\n        node.x = (node.x - x0) / (x1 - x0) * size[0];                                                                  // 5866\n        node.y = node.depth / y1 * size[1];                                                                            // 5867\n        delete node._tree;                                                                                             // 5868\n      });                                                                                                              // 5869\n      return nodes;                                                                                                    // 5870\n    }                                                                                                                  // 5871\n    tree.separation = function(x) {                                                                                    // 5872\n      if (!arguments.length) return separation;                                                                        // 5873\n      separation = x;                                                                                                  // 5874\n      return tree;                                                                                                     // 5875\n    };                                                                                                                 // 5876\n    tree.size = function(x) {                                                                                          // 5877\n      if (!arguments.length) return size;                                                                              // 5878\n      size = x;                                                                                                        // 5879\n      return tree;                                                                                                     // 5880\n    };                                                                                                                 // 5881\n    return d3_layout_hierarchyRebind(tree, hierarchy);                                                                 // 5882\n  };                                                                                                                   // 5883\n  function d3_layout_treeSeparation(a, b) {                                                                            // 5884\n    return a.parent == b.parent ? 1 : 2;                                                                               // 5885\n  }                                                                                                                    // 5886\n  function d3_layout_treeLeft(node) {                                                                                  // 5887\n    var children = node.children;                                                                                      // 5888\n    return children && children.length ? children[0] : node._tree.thread;                                              // 5889\n  }                                                                                                                    // 5890\n  function d3_layout_treeRight(node) {                                                                                 // 5891\n    var children = node.children, n;                                                                                   // 5892\n    return children && (n = children.length) ? children[n - 1] : node._tree.thread;                                    // 5893\n  }                                                                                                                    // 5894\n  function d3_layout_treeSearch(node, compare) {                                                                       // 5895\n    var children = node.children;                                                                                      // 5896\n    if (children && (n = children.length)) {                                                                           // 5897\n      var child, n, i = -1;                                                                                            // 5898\n      while (++i < n) {                                                                                                // 5899\n        if (compare(child = d3_layout_treeSearch(children[i], compare), node) > 0) {                                   // 5900\n          node = child;                                                                                                // 5901\n        }                                                                                                              // 5902\n      }                                                                                                                // 5903\n    }                                                                                                                  // 5904\n    return node;                                                                                                       // 5905\n  }                                                                                                                    // 5906\n  function d3_layout_treeRightmost(a, b) {                                                                             // 5907\n    return a.x - b.x;                                                                                                  // 5908\n  }                                                                                                                    // 5909\n  function d3_layout_treeLeftmost(a, b) {                                                                              // 5910\n    return b.x - a.x;                                                                                                  // 5911\n  }                                                                                                                    // 5912\n  function d3_layout_treeDeepest(a, b) {                                                                               // 5913\n    return a.depth - b.depth;                                                                                          // 5914\n  }                                                                                                                    // 5915\n  function d3_layout_treeVisitAfter(node, callback) {                                                                  // 5916\n    function visit(node, previousSibling) {                                                                            // 5917\n      var children = node.children;                                                                                    // 5918\n      if (children && (n = children.length)) {                                                                         // 5919\n        var child, previousChild = null, i = -1, n;                                                                    // 5920\n        while (++i < n) {                                                                                              // 5921\n          child = children[i];                                                                                         // 5922\n          visit(child, previousChild);                                                                                 // 5923\n          previousChild = child;                                                                                       // 5924\n        }                                                                                                              // 5925\n      }                                                                                                                // 5926\n      callback(node, previousSibling);                                                                                 // 5927\n    }                                                                                                                  // 5928\n    visit(node, null);                                                                                                 // 5929\n  }                                                                                                                    // 5930\n  function d3_layout_treeShift(node) {                                                                                 // 5931\n    var shift = 0, change = 0, children = node.children, i = children.length, child;                                   // 5932\n    while (--i >= 0) {                                                                                                 // 5933\n      child = children[i]._tree;                                                                                       // 5934\n      child.prelim += shift;                                                                                           // 5935\n      child.mod += shift;                                                                                              // 5936\n      shift += child.shift + (change += child.change);                                                                 // 5937\n    }                                                                                                                  // 5938\n  }                                                                                                                    // 5939\n  function d3_layout_treeMove(ancestor, node, shift) {                                                                 // 5940\n    ancestor = ancestor._tree;                                                                                         // 5941\n    node = node._tree;                                                                                                 // 5942\n    var change = shift / (node.number - ancestor.number);                                                              // 5943\n    ancestor.change += change;                                                                                         // 5944\n    node.change -= change;                                                                                             // 5945\n    node.shift += shift;                                                                                               // 5946\n    node.prelim += shift;                                                                                              // 5947\n    node.mod += shift;                                                                                                 // 5948\n  }                                                                                                                    // 5949\n  function d3_layout_treeAncestor(vim, node, ancestor) {                                                               // 5950\n    return vim._tree.ancestor.parent == node.parent ? vim._tree.ancestor : ancestor;                                   // 5951\n  }                                                                                                                    // 5952\n  d3.layout.pack = function() {                                                                                        // 5953\n    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ];                      // 5954\n    function pack(d, i) {                                                                                              // 5955\n      var nodes = hierarchy.call(this, d, i), root = nodes[0];                                                         // 5956\n      root.x = 0;                                                                                                      // 5957\n      root.y = 0;                                                                                                      // 5958\n      d3_layout_treeVisitAfter(root, function(d) {                                                                     // 5959\n        d.r = Math.sqrt(d.value);                                                                                      // 5960\n      });                                                                                                              // 5961\n      d3_layout_treeVisitAfter(root, d3_layout_packSiblings);                                                          // 5962\n      var w = size[0], h = size[1], k = Math.max(2 * root.r / w, 2 * root.r / h);                                      // 5963\n      if (padding > 0) {                                                                                               // 5964\n        var dr = padding * k / 2;                                                                                      // 5965\n        d3_layout_treeVisitAfter(root, function(d) {                                                                   // 5966\n          d.r += dr;                                                                                                   // 5967\n        });                                                                                                            // 5968\n        d3_layout_treeVisitAfter(root, d3_layout_packSiblings);                                                        // 5969\n        d3_layout_treeVisitAfter(root, function(d) {                                                                   // 5970\n          d.r -= dr;                                                                                                   // 5971\n        });                                                                                                            // 5972\n        k = Math.max(2 * root.r / w, 2 * root.r / h);                                                                  // 5973\n      }                                                                                                                // 5974\n      d3_layout_packTransform(root, w / 2, h / 2, 1 / k);                                                              // 5975\n      return nodes;                                                                                                    // 5976\n    }                                                                                                                  // 5977\n    pack.size = function(x) {                                                                                          // 5978\n      if (!arguments.length) return size;                                                                              // 5979\n      size = x;                                                                                                        // 5980\n      return pack;                                                                                                     // 5981\n    };                                                                                                                 // 5982\n    pack.padding = function(_) {                                                                                       // 5983\n      if (!arguments.length) return padding;                                                                           // 5984\n      padding = +_;                                                                                                    // 5985\n      return pack;                                                                                                     // 5986\n    };                                                                                                                 // 5987\n    return d3_layout_hierarchyRebind(pack, hierarchy);                                                                 // 5988\n  };                                                                                                                   // 5989\n  function d3_layout_packSort(a, b) {                                                                                  // 5990\n    return a.value - b.value;                                                                                          // 5991\n  }                                                                                                                    // 5992\n  function d3_layout_packInsert(a, b) {                                                                                // 5993\n    var c = a._pack_next;                                                                                              // 5994\n    a._pack_next = b;                                                                                                  // 5995\n    b._pack_prev = a;                                                                                                  // 5996\n    b._pack_next = c;                                                                                                  // 5997\n    c._pack_prev = b;                                                                                                  // 5998\n  }                                                                                                                    // 5999\n  function d3_layout_packSplice(a, b) {                                                                                // 6000\n    a._pack_next = b;                                                                                                  // 6001\n    b._pack_prev = a;                                                                                                  // 6002\n  }                                                                                                                    // 6003\n  function d3_layout_packIntersects(a, b) {                                                                            // 6004\n    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;                                                                // 6005\n    return dr * dr - dx * dx - dy * dy > .001;                                                                         // 6006\n  }                                                                                                                    // 6007\n  function d3_layout_packSiblings(node) {                                                                              // 6008\n    if (!(nodes = node.children) || !(n = nodes.length)) return;                                                       // 6009\n    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;              // 6010\n    function bound(node) {                                                                                             // 6011\n      xMin = Math.min(node.x - node.r, xMin);                                                                          // 6012\n      xMax = Math.max(node.x + node.r, xMax);                                                                          // 6013\n      yMin = Math.min(node.y - node.r, yMin);                                                                          // 6014\n      yMax = Math.max(node.y + node.r, yMax);                                                                          // 6015\n    }                                                                                                                  // 6016\n    nodes.forEach(d3_layout_packLink);                                                                                 // 6017\n    a = nodes[0];                                                                                                      // 6018\n    a.x = -a.r;                                                                                                        // 6019\n    a.y = 0;                                                                                                           // 6020\n    bound(a);                                                                                                          // 6021\n    if (n > 1) {                                                                                                       // 6022\n      b = nodes[1];                                                                                                    // 6023\n      b.x = b.r;                                                                                                       // 6024\n      b.y = 0;                                                                                                         // 6025\n      bound(b);                                                                                                        // 6026\n      if (n > 2) {                                                                                                     // 6027\n        c = nodes[2];                                                                                                  // 6028\n        d3_layout_packPlace(a, b, c);                                                                                  // 6029\n        bound(c);                                                                                                      // 6030\n        d3_layout_packInsert(a, c);                                                                                    // 6031\n        a._pack_prev = c;                                                                                              // 6032\n        d3_layout_packInsert(c, b);                                                                                    // 6033\n        b = a._pack_next;                                                                                              // 6034\n        for (i = 3; i < n; i++) {                                                                                      // 6035\n          d3_layout_packPlace(a, b, c = nodes[i]);                                                                     // 6036\n          var isect = 0, s1 = 1, s2 = 1;                                                                               // 6037\n          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {                                                    // 6038\n            if (d3_layout_packIntersects(j, c)) {                                                                      // 6039\n              isect = 1;                                                                                               // 6040\n              break;                                                                                                   // 6041\n            }                                                                                                          // 6042\n          }                                                                                                            // 6043\n          if (isect == 1) {                                                                                            // 6044\n            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {                                       // 6045\n              if (d3_layout_packIntersects(k, c)) {                                                                    // 6046\n                break;                                                                                                 // 6047\n              }                                                                                                        // 6048\n            }                                                                                                          // 6049\n          }                                                                                                            // 6050\n          if (isect) {                                                                                                 // 6051\n            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b); // 6052\n            i--;                                                                                                       // 6053\n          } else {                                                                                                     // 6054\n            d3_layout_packInsert(a, c);                                                                                // 6055\n            b = c;                                                                                                     // 6056\n            bound(c);                                                                                                  // 6057\n          }                                                                                                            // 6058\n        }                                                                                                              // 6059\n      }                                                                                                                // 6060\n    }                                                                                                                  // 6061\n    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;                                                        // 6062\n    for (i = 0; i < n; i++) {                                                                                          // 6063\n      c = nodes[i];                                                                                                    // 6064\n      c.x -= cx;                                                                                                       // 6065\n      c.y -= cy;                                                                                                       // 6066\n      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));                                                       // 6067\n    }                                                                                                                  // 6068\n    node.r = cr;                                                                                                       // 6069\n    nodes.forEach(d3_layout_packUnlink);                                                                               // 6070\n  }                                                                                                                    // 6071\n  function d3_layout_packLink(node) {                                                                                  // 6072\n    node._pack_next = node._pack_prev = node;                                                                          // 6073\n  }                                                                                                                    // 6074\n  function d3_layout_packUnlink(node) {                                                                                // 6075\n    delete node._pack_next;                                                                                            // 6076\n    delete node._pack_prev;                                                                                            // 6077\n  }                                                                                                                    // 6078\n  function d3_layout_packTransform(node, x, y, k) {                                                                    // 6079\n    var children = node.children;                                                                                      // 6080\n    node.x = x += k * node.x;                                                                                          // 6081\n    node.y = y += k * node.y;                                                                                          // 6082\n    node.r *= k;                                                                                                       // 6083\n    if (children) {                                                                                                    // 6084\n      var i = -1, n = children.length;                                                                                 // 6085\n      while (++i < n) d3_layout_packTransform(children[i], x, y, k);                                                   // 6086\n    }                                                                                                                  // 6087\n  }                                                                                                                    // 6088\n  function d3_layout_packPlace(a, b, c) {                                                                              // 6089\n    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;                                                                // 6090\n    if (db && (dx || dy)) {                                                                                            // 6091\n      var da = b.r + c.r, dc = dx * dx + dy * dy;                                                                      // 6092\n      da *= da;                                                                                                        // 6093\n      db *= db;                                                                                                        // 6094\n      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);\n      c.x = a.x + x * dx + y * dy;                                                                                     // 6096\n      c.y = a.y + x * dy - y * dx;                                                                                     // 6097\n    } else {                                                                                                           // 6098\n      c.x = a.x + db;                                                                                                  // 6099\n      c.y = a.y;                                                                                                       // 6100\n    }                                                                                                                  // 6101\n  }                                                                                                                    // 6102\n  d3.layout.cluster = function() {                                                                                     // 6103\n    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ];\n    function cluster(d, i) {                                                                                           // 6105\n      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;                                    // 6106\n      d3_layout_treeVisitAfter(root, function(node) {                                                                  // 6107\n        var children = node.children;                                                                                  // 6108\n        if (children && children.length) {                                                                             // 6109\n          node.x = d3_layout_clusterX(children);                                                                       // 6110\n          node.y = d3_layout_clusterY(children);                                                                       // 6111\n        } else {                                                                                                       // 6112\n          node.x = previousNode ? x += separation(node, previousNode) : 0;                                             // 6113\n          node.y = 0;                                                                                                  // 6114\n          previousNode = node;                                                                                         // 6115\n        }                                                                                                              // 6116\n      });                                                                                                              // 6117\n      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;\n      d3_layout_treeVisitAfter(root, function(node) {                                                                  // 6119\n        node.x = (node.x - x0) / (x1 - x0) * size[0];                                                                  // 6120\n        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];                                                       // 6121\n      });                                                                                                              // 6122\n      return nodes;                                                                                                    // 6123\n    }                                                                                                                  // 6124\n    cluster.separation = function(x) {                                                                                 // 6125\n      if (!arguments.length) return separation;                                                                        // 6126\n      separation = x;                                                                                                  // 6127\n      return cluster;                                                                                                  // 6128\n    };                                                                                                                 // 6129\n    cluster.size = function(x) {                                                                                       // 6130\n      if (!arguments.length) return size;                                                                              // 6131\n      size = x;                                                                                                        // 6132\n      return cluster;                                                                                                  // 6133\n    };                                                                                                                 // 6134\n    return d3_layout_hierarchyRebind(cluster, hierarchy);                                                              // 6135\n  };                                                                                                                   // 6136\n  function d3_layout_clusterY(children) {                                                                              // 6137\n    return 1 + d3.max(children, function(child) {                                                                      // 6138\n      return child.y;                                                                                                  // 6139\n    });                                                                                                                // 6140\n  }                                                                                                                    // 6141\n  function d3_layout_clusterX(children) {                                                                              // 6142\n    return children.reduce(function(x, child) {                                                                        // 6143\n      return x + child.x;                                                                                              // 6144\n    }, 0) / children.length;                                                                                           // 6145\n  }                                                                                                                    // 6146\n  function d3_layout_clusterLeft(node) {                                                                               // 6147\n    var children = node.children;                                                                                      // 6148\n    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;                                    // 6149\n  }                                                                                                                    // 6150\n  function d3_layout_clusterRight(node) {                                                                              // 6151\n    var children = node.children, n;                                                                                   // 6152\n    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;                         // 6153\n  }                                                                                                                    // 6154\n  d3.layout.treemap = function() {                                                                                     // 6155\n    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = \"squarify\", ratio = .5 * (1 + Math.sqrt(5));\n    function scale(children, k) {                                                                                      // 6157\n      var i = -1, n = children.length, child, area;                                                                    // 6158\n      while (++i < n) {                                                                                                // 6159\n        area = (child = children[i]).value * (k < 0 ? 0 : k);                                                          // 6160\n        child.area = isNaN(area) || area <= 0 ? 0 : area;                                                              // 6161\n      }                                                                                                                // 6162\n    }                                                                                                                  // 6163\n    function squarify(node) {                                                                                          // 6164\n      var children = node.children;                                                                                    // 6165\n      if (children && children.length) {                                                                               // 6166\n        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === \"slice\" ? rect.dx : mode === \"dice\" ? rect.dy : mode === \"slice-dice\" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;\n        scale(remaining, rect.dx * rect.dy / node.value);                                                              // 6168\n        row.area = 0;                                                                                                  // 6169\n        while ((n = remaining.length) > 0) {                                                                           // 6170\n          row.push(child = remaining[n - 1]);                                                                          // 6171\n          row.area += child.area;                                                                                      // 6172\n          if (mode !== \"squarify\" || (score = worst(row, u)) <= best) {                                                // 6173\n            remaining.pop();                                                                                           // 6174\n            best = score;                                                                                              // 6175\n          } else {                                                                                                     // 6176\n            row.area -= row.pop().area;                                                                                // 6177\n            position(row, u, rect, false);                                                                             // 6178\n            u = Math.min(rect.dx, rect.dy);                                                                            // 6179\n            row.length = row.area = 0;                                                                                 // 6180\n            best = Infinity;                                                                                           // 6181\n          }                                                                                                            // 6182\n        }                                                                                                              // 6183\n        if (row.length) {                                                                                              // 6184\n          position(row, u, rect, true);                                                                                // 6185\n          row.length = row.area = 0;                                                                                   // 6186\n        }                                                                                                              // 6187\n        children.forEach(squarify);                                                                                    // 6188\n      }                                                                                                                // 6189\n    }                                                                                                                  // 6190\n    function stickify(node) {                                                                                          // 6191\n      var children = node.children;                                                                                    // 6192\n      if (children && children.length) {                                                                               // 6193\n        var rect = pad(node), remaining = children.slice(), child, row = [];                                           // 6194\n        scale(remaining, rect.dx * rect.dy / node.value);                                                              // 6195\n        row.area = 0;                                                                                                  // 6196\n        while (child = remaining.pop()) {                                                                              // 6197\n          row.push(child);                                                                                             // 6198\n          row.area += child.area;                                                                                      // 6199\n          if (child.z != null) {                                                                                       // 6200\n            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);                                       // 6201\n            row.length = row.area = 0;                                                                                 // 6202\n          }                                                                                                            // 6203\n        }                                                                                                              // 6204\n        children.forEach(stickify);                                                                                    // 6205\n      }                                                                                                                // 6206\n    }                                                                                                                  // 6207\n    function worst(row, u) {                                                                                           // 6208\n      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;                                          // 6209\n      while (++i < n) {                                                                                                // 6210\n        if (!(r = row[i].area)) continue;                                                                              // 6211\n        if (r < rmin) rmin = r;                                                                                        // 6212\n        if (r > rmax) rmax = r;                                                                                        // 6213\n      }                                                                                                                // 6214\n      s *= s;                                                                                                          // 6215\n      u *= u;                                                                                                          // 6216\n      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;                                    // 6217\n    }                                                                                                                  // 6218\n    function position(row, u, rect, flush) {                                                                           // 6219\n      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;                          // 6220\n      if (u == rect.dx) {                                                                                              // 6221\n        if (flush || v > rect.dy) v = rect.dy;                                                                         // 6222\n        while (++i < n) {                                                                                              // 6223\n          o = row[i];                                                                                                  // 6224\n          o.x = x;                                                                                                     // 6225\n          o.y = y;                                                                                                     // 6226\n          o.dy = v;                                                                                                    // 6227\n          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);                                       // 6228\n        }                                                                                                              // 6229\n        o.z = true;                                                                                                    // 6230\n        o.dx += rect.x + rect.dx - x;                                                                                  // 6231\n        rect.y += v;                                                                                                   // 6232\n        rect.dy -= v;                                                                                                  // 6233\n      } else {                                                                                                         // 6234\n        if (flush || v > rect.dx) v = rect.dx;                                                                         // 6235\n        while (++i < n) {                                                                                              // 6236\n          o = row[i];                                                                                                  // 6237\n          o.x = x;                                                                                                     // 6238\n          o.y = y;                                                                                                     // 6239\n          o.dx = v;                                                                                                    // 6240\n          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);                                       // 6241\n        }                                                                                                              // 6242\n        o.z = false;                                                                                                   // 6243\n        o.dy += rect.y + rect.dy - y;                                                                                  // 6244\n        rect.x += v;                                                                                                   // 6245\n        rect.dx -= v;                                                                                                  // 6246\n      }                                                                                                                // 6247\n    }                                                                                                                  // 6248\n    function treemap(d) {                                                                                              // 6249\n      var nodes = stickies || hierarchy(d), root = nodes[0];                                                           // 6250\n      root.x = 0;                                                                                                      // 6251\n      root.y = 0;                                                                                                      // 6252\n      root.dx = size[0];                                                                                               // 6253\n      root.dy = size[1];                                                                                               // 6254\n      if (stickies) hierarchy.revalue(root);                                                                           // 6255\n      scale([ root ], root.dx * root.dy / root.value);                                                                 // 6256\n      (stickies ? stickify : squarify)(root);                                                                          // 6257\n      if (sticky) stickies = nodes;                                                                                    // 6258\n      return nodes;                                                                                                    // 6259\n    }                                                                                                                  // 6260\n    treemap.size = function(x) {                                                                                       // 6261\n      if (!arguments.length) return size;                                                                              // 6262\n      size = x;                                                                                                        // 6263\n      return treemap;                                                                                                  // 6264\n    };                                                                                                                 // 6265\n    treemap.padding = function(x) {                                                                                    // 6266\n      if (!arguments.length) return padding;                                                                           // 6267\n      function padFunction(node) {                                                                                     // 6268\n        var p = x.call(treemap, node, node.depth);                                                                     // 6269\n        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === \"number\" ? [ p, p, p, p ] : p);\n      }                                                                                                                // 6271\n      function padConstant(node) {                                                                                     // 6272\n        return d3_layout_treemapPad(node, x);                                                                          // 6273\n      }                                                                                                                // 6274\n      var type;                                                                                                        // 6275\n      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === \"function\" ? padFunction : type === \"number\" ? (x = [ x, x, x, x ],\n      padConstant) : padConstant;                                                                                      // 6277\n      return treemap;                                                                                                  // 6278\n    };                                                                                                                 // 6279\n    treemap.round = function(x) {                                                                                      // 6280\n      if (!arguments.length) return round != Number;                                                                   // 6281\n      round = x ? Math.round : Number;                                                                                 // 6282\n      return treemap;                                                                                                  // 6283\n    };                                                                                                                 // 6284\n    treemap.sticky = function(x) {                                                                                     // 6285\n      if (!arguments.length) return sticky;                                                                            // 6286\n      sticky = x;                                                                                                      // 6287\n      stickies = null;                                                                                                 // 6288\n      return treemap;                                                                                                  // 6289\n    };                                                                                                                 // 6290\n    treemap.ratio = function(x) {                                                                                      // 6291\n      if (!arguments.length) return ratio;                                                                             // 6292\n      ratio = x;                                                                                                       // 6293\n      return treemap;                                                                                                  // 6294\n    };                                                                                                                 // 6295\n    treemap.mode = function(x) {                                                                                       // 6296\n      if (!arguments.length) return mode;                                                                              // 6297\n      mode = x + \"\";                                                                                                   // 6298\n      return treemap;                                                                                                  // 6299\n    };                                                                                                                 // 6300\n    return d3_layout_hierarchyRebind(treemap, hierarchy);                                                              // 6301\n  };                                                                                                                   // 6302\n  function d3_layout_treemapPadNull(node) {                                                                            // 6303\n    return {                                                                                                           // 6304\n      x: node.x,                                                                                                       // 6305\n      y: node.y,                                                                                                       // 6306\n      dx: node.dx,                                                                                                     // 6307\n      dy: node.dy                                                                                                      // 6308\n    };                                                                                                                 // 6309\n  }                                                                                                                    // 6310\n  function d3_layout_treemapPad(node, padding) {                                                                       // 6311\n    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];\n    if (dx < 0) {                                                                                                      // 6313\n      x += dx / 2;                                                                                                     // 6314\n      dx = 0;                                                                                                          // 6315\n    }                                                                                                                  // 6316\n    if (dy < 0) {                                                                                                      // 6317\n      y += dy / 2;                                                                                                     // 6318\n      dy = 0;                                                                                                          // 6319\n    }                                                                                                                  // 6320\n    return {                                                                                                           // 6321\n      x: x,                                                                                                            // 6322\n      y: y,                                                                                                            // 6323\n      dx: dx,                                                                                                          // 6324\n      dy: dy                                                                                                           // 6325\n    };                                                                                                                 // 6326\n  }                                                                                                                    // 6327\n  d3.random = {                                                                                                        // 6328\n    normal: function(µ, σ) {                                                                                           // 6329\n      var n = arguments.length;                                                                                        // 6330\n      if (n < 2) σ = 1;                                                                                                // 6331\n      if (n < 1) µ = 0;                                                                                                // 6332\n      return function() {                                                                                              // 6333\n        var x, y, r;                                                                                                   // 6334\n        do {                                                                                                           // 6335\n          x = Math.random() * 2 - 1;                                                                                   // 6336\n          y = Math.random() * 2 - 1;                                                                                   // 6337\n          r = x * x + y * y;                                                                                           // 6338\n        } while (!r || r > 1);                                                                                         // 6339\n        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);                                                            // 6340\n      };                                                                                                               // 6341\n    },                                                                                                                 // 6342\n    logNormal: function() {                                                                                            // 6343\n      var random = d3.random.normal.apply(d3, arguments);                                                              // 6344\n      return function() {                                                                                              // 6345\n        return Math.exp(random());                                                                                     // 6346\n      };                                                                                                               // 6347\n    },                                                                                                                 // 6348\n    irwinHall: function(m) {                                                                                           // 6349\n      return function() {                                                                                              // 6350\n        for (var s = 0, j = 0; j < m; j++) s += Math.random();                                                         // 6351\n        return s / m;                                                                                                  // 6352\n      };                                                                                                               // 6353\n    }                                                                                                                  // 6354\n  };                                                                                                                   // 6355\n  d3.scale = {};                                                                                                       // 6356\n  function d3_scaleExtent(domain) {                                                                                    // 6357\n    var start = domain[0], stop = domain[domain.length - 1];                                                           // 6358\n    return start < stop ? [ start, stop ] : [ stop, start ];                                                           // 6359\n  }                                                                                                                    // 6360\n  function d3_scaleRange(scale) {                                                                                      // 6361\n    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());                                    // 6362\n  }                                                                                                                    // 6363\n  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {                                              // 6364\n    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);                                  // 6365\n    return function(x) {                                                                                               // 6366\n      return i(u(x));                                                                                                  // 6367\n    };                                                                                                                 // 6368\n  }                                                                                                                    // 6369\n  function d3_scale_nice(domain, nice) {                                                                               // 6370\n    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;                                          // 6371\n    if (x1 < x0) {                                                                                                     // 6372\n      dx = i0, i0 = i1, i1 = dx;                                                                                       // 6373\n      dx = x0, x0 = x1, x1 = dx;                                                                                       // 6374\n    }                                                                                                                  // 6375\n    if (nice = nice(x1 - x0)) {                                                                                        // 6376\n      domain[i0] = nice.floor(x0);                                                                                     // 6377\n      domain[i1] = nice.ceil(x1);                                                                                      // 6378\n    }                                                                                                                  // 6379\n    return domain;                                                                                                     // 6380\n  }                                                                                                                    // 6381\n  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {                                            // 6382\n    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;                                          // 6383\n    if (domain[k] < domain[0]) {                                                                                       // 6384\n      domain = domain.slice().reverse();                                                                               // 6385\n      range = range.slice().reverse();                                                                                 // 6386\n    }                                                                                                                  // 6387\n    while (++j <= k) {                                                                                                 // 6388\n      u.push(uninterpolate(domain[j - 1], domain[j]));                                                                 // 6389\n      i.push(interpolate(range[j - 1], range[j]));                                                                     // 6390\n    }                                                                                                                  // 6391\n    return function(x) {                                                                                               // 6392\n      var j = d3.bisect(domain, x, 1, k) - 1;                                                                          // 6393\n      return i[j](u[j](x));                                                                                            // 6394\n    };                                                                                                                 // 6395\n  }                                                                                                                    // 6396\n  d3.scale.linear = function() {                                                                                       // 6397\n    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);                                                 // 6398\n  };                                                                                                                   // 6399\n  function d3_scale_linear(domain, range, interpolate, clamp) {                                                        // 6400\n    var output, input;                                                                                                 // 6401\n    function rescale() {                                                                                               // 6402\n      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;\n      output = linear(domain, range, uninterpolate, interpolate);                                                      // 6404\n      input = linear(range, domain, uninterpolate, d3_interpolate);                                                    // 6405\n      return scale;                                                                                                    // 6406\n    }                                                                                                                  // 6407\n    function scale(x) {                                                                                                // 6408\n      return output(x);                                                                                                // 6409\n    }                                                                                                                  // 6410\n    scale.invert = function(y) {                                                                                       // 6411\n      return input(y);                                                                                                 // 6412\n    };                                                                                                                 // 6413\n    scale.domain = function(x) {                                                                                       // 6414\n      if (!arguments.length) return domain;                                                                            // 6415\n      domain = x.map(Number);                                                                                          // 6416\n      return rescale();                                                                                                // 6417\n    };                                                                                                                 // 6418\n    scale.range = function(x) {                                                                                        // 6419\n      if (!arguments.length) return range;                                                                             // 6420\n      range = x;                                                                                                       // 6421\n      return rescale();                                                                                                // 6422\n    };                                                                                                                 // 6423\n    scale.rangeRound = function(x) {                                                                                   // 6424\n      return scale.range(x).interpolate(d3_interpolateRound);                                                          // 6425\n    };                                                                                                                 // 6426\n    scale.clamp = function(x) {                                                                                        // 6427\n      if (!arguments.length) return clamp;                                                                             // 6428\n      clamp = x;                                                                                                       // 6429\n      return rescale();                                                                                                // 6430\n    };                                                                                                                 // 6431\n    scale.interpolate = function(x) {                                                                                  // 6432\n      if (!arguments.length) return interpolate;                                                                       // 6433\n      interpolate = x;                                                                                                 // 6434\n      return rescale();                                                                                                // 6435\n    };                                                                                                                 // 6436\n    scale.ticks = function(m) {                                                                                        // 6437\n      return d3_scale_linearTicks(domain, m);                                                                          // 6438\n    };                                                                                                                 // 6439\n    scale.tickFormat = function(m, format) {                                                                           // 6440\n      return d3_scale_linearTickFormat(domain, m, format);                                                             // 6441\n    };                                                                                                                 // 6442\n    scale.nice = function() {                                                                                          // 6443\n      d3_scale_nice(domain, d3_scale_linearNice);                                                                      // 6444\n      return rescale();                                                                                                // 6445\n    };                                                                                                                 // 6446\n    scale.copy = function() {                                                                                          // 6447\n      return d3_scale_linear(domain, range, interpolate, clamp);                                                       // 6448\n    };                                                                                                                 // 6449\n    return rescale();                                                                                                  // 6450\n  }                                                                                                                    // 6451\n  function d3_scale_linearRebind(scale, linear) {                                                                      // 6452\n    return d3.rebind(scale, linear, \"range\", \"rangeRound\", \"interpolate\", \"clamp\");                                    // 6453\n  }                                                                                                                    // 6454\n  function d3_scale_linearNice(dx) {                                                                                   // 6455\n    dx = Math.pow(10, Math.round(Math.log(dx) / Math.LN10) - 1);                                                       // 6456\n    return dx && {                                                                                                     // 6457\n      floor: function(x) {                                                                                             // 6458\n        return Math.floor(x / dx) * dx;                                                                                // 6459\n      },                                                                                                               // 6460\n      ceil: function(x) {                                                                                              // 6461\n        return Math.ceil(x / dx) * dx;                                                                                 // 6462\n      }                                                                                                                // 6463\n    };                                                                                                                 // 6464\n  }                                                                                                                    // 6465\n  function d3_scale_linearTickRange(domain, m) {                                                                       // 6466\n    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;\n    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;                        // 6468\n    extent[0] = Math.ceil(extent[0] / step) * step;                                                                    // 6469\n    extent[1] = Math.floor(extent[1] / step) * step + step * .5;                                                       // 6470\n    extent[2] = step;                                                                                                  // 6471\n    return extent;                                                                                                     // 6472\n  }                                                                                                                    // 6473\n  function d3_scale_linearTicks(domain, m) {                                                                           // 6474\n    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));                                                    // 6475\n  }                                                                                                                    // 6476\n  function d3_scale_linearTickFormat(domain, m, format) {                                                              // 6477\n    var precision = -Math.floor(Math.log(d3_scale_linearTickRange(domain, m)[2]) / Math.LN10 + .01);                   // 6478\n    return d3.format(format ? format.replace(d3_format_re, function(a, b, c, d, e, f, g, h, i, j) {                    // 6479\n      return [ b, c, d, e, f, g, h, i || \".\" + (precision - (j === \"%\") * 2), j ].join(\"\");                            // 6480\n    }) : \",.\" + precision + \"f\");                                                                                      // 6481\n  }                                                                                                                    // 6482\n  d3.scale.log = function() {                                                                                          // 6483\n    return d3_scale_log(d3.scale.linear().domain([ 0, Math.LN10 ]), 10, d3_scale_logp, d3_scale_powp);                 // 6484\n  };                                                                                                                   // 6485\n  function d3_scale_log(linear, base, log, pow) {                                                                      // 6486\n    function scale(x) {                                                                                                // 6487\n      return linear(log(x));                                                                                           // 6488\n    }                                                                                                                  // 6489\n    scale.invert = function(x) {                                                                                       // 6490\n      return pow(linear.invert(x));                                                                                    // 6491\n    };                                                                                                                 // 6492\n    scale.domain = function(x) {                                                                                       // 6493\n      if (!arguments.length) return linear.domain().map(pow);                                                          // 6494\n      if (x[0] < 0) log = d3_scale_logn, pow = d3_scale_pown; else log = d3_scale_logp,                                // 6495\n      pow = d3_scale_powp;                                                                                             // 6496\n      linear.domain(x.map(log));                                                                                       // 6497\n      return scale;                                                                                                    // 6498\n    };                                                                                                                 // 6499\n    scale.base = function(_) {                                                                                         // 6500\n      if (!arguments.length) return base;                                                                              // 6501\n      base = +_;                                                                                                       // 6502\n      return scale;                                                                                                    // 6503\n    };                                                                                                                 // 6504\n    scale.nice = function() {                                                                                          // 6505\n      linear.domain(d3_scale_nice(linear.domain(), d3_scale_logNice(base)));                                           // 6506\n      return scale;                                                                                                    // 6507\n    };                                                                                                                 // 6508\n    scale.ticks = function() {                                                                                         // 6509\n      var extent = d3_scaleExtent(linear.domain()), ticks = [];                                                        // 6510\n      if (extent.every(isFinite)) {                                                                                    // 6511\n        var b = Math.log(base), i = Math.floor(extent[0] / b), j = Math.ceil(extent[1] / b), u = pow(extent[0]), v = pow(extent[1]), n = base % 1 ? 2 : base;\n        if (log === d3_scale_logn) {                                                                                   // 6513\n          ticks.push(-Math.pow(base, -i));                                                                             // 6514\n          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(-Math.pow(base, -i) * k);                        // 6515\n        } else {                                                                                                       // 6516\n          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(Math.pow(base, i) * k);                             // 6517\n          ticks.push(Math.pow(base, i));                                                                               // 6518\n        }                                                                                                              // 6519\n        for (i = 0; ticks[i] < u; i++) {}                                                                              // 6520\n        for (j = ticks.length; ticks[j - 1] > v; j--) {}                                                               // 6521\n        ticks = ticks.slice(i, j);                                                                                     // 6522\n      }                                                                                                                // 6523\n      return ticks;                                                                                                    // 6524\n    };                                                                                                                 // 6525\n    scale.tickFormat = function(n, format) {                                                                           // 6526\n      if (arguments.length < 2) format = d3_scale_logFormat;                                                           // 6527\n      if (!arguments.length) return format;                                                                            // 6528\n      var b = Math.log(base), k = Math.max(.1, n / scale.ticks().length), f = log === d3_scale_logn ? (e = -1e-12,     // 6529\n      Math.floor) : (e = 1e-12, Math.ceil), e;                                                                         // 6530\n      return function(d) {                                                                                             // 6531\n        return d / pow(b * f(log(d) / b + e)) <= k ? format(d) : \"\";                                                   // 6532\n      };                                                                                                               // 6533\n    };                                                                                                                 // 6534\n    scale.copy = function() {                                                                                          // 6535\n      return d3_scale_log(linear.copy(), base, log, pow);                                                              // 6536\n    };                                                                                                                 // 6537\n    return d3_scale_linearRebind(scale, linear);                                                                       // 6538\n  }                                                                                                                    // 6539\n  var d3_scale_logFormat = d3.format(\".0e\");                                                                           // 6540\n  function d3_scale_logp(x) {                                                                                          // 6541\n    return Math.log(x < 0 ? 0 : x);                                                                                    // 6542\n  }                                                                                                                    // 6543\n  function d3_scale_powp(x) {                                                                                          // 6544\n    return Math.exp(x);                                                                                                // 6545\n  }                                                                                                                    // 6546\n  function d3_scale_logn(x) {                                                                                          // 6547\n    return -Math.log(x > 0 ? 0 : -x);                                                                                  // 6548\n  }                                                                                                                    // 6549\n  function d3_scale_pown(x) {                                                                                          // 6550\n    return -Math.exp(-x);                                                                                              // 6551\n  }                                                                                                                    // 6552\n  function d3_scale_logNice(base) {                                                                                    // 6553\n    base = Math.log(base);                                                                                             // 6554\n    var nice = {                                                                                                       // 6555\n      floor: function(x) {                                                                                             // 6556\n        return Math.floor(x / base) * base;                                                                            // 6557\n      },                                                                                                               // 6558\n      ceil: function(x) {                                                                                              // 6559\n        return Math.ceil(x / base) * base;                                                                             // 6560\n      }                                                                                                                // 6561\n    };                                                                                                                 // 6562\n    return function() {                                                                                                // 6563\n      return nice;                                                                                                     // 6564\n    };                                                                                                                 // 6565\n  }                                                                                                                    // 6566\n  d3.scale.pow = function() {                                                                                          // 6567\n    return d3_scale_pow(d3.scale.linear(), 1);                                                                         // 6568\n  };                                                                                                                   // 6569\n  function d3_scale_pow(linear, exponent) {                                                                            // 6570\n    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);                                        // 6571\n    function scale(x) {                                                                                                // 6572\n      return linear(powp(x));                                                                                          // 6573\n    }                                                                                                                  // 6574\n    scale.invert = function(x) {                                                                                       // 6575\n      return powb(linear.invert(x));                                                                                   // 6576\n    };                                                                                                                 // 6577\n    scale.domain = function(x) {                                                                                       // 6578\n      if (!arguments.length) return linear.domain().map(powb);                                                         // 6579\n      linear.domain(x.map(powp));                                                                                      // 6580\n      return scale;                                                                                                    // 6581\n    };                                                                                                                 // 6582\n    scale.ticks = function(m) {                                                                                        // 6583\n      return d3_scale_linearTicks(scale.domain(), m);                                                                  // 6584\n    };                                                                                                                 // 6585\n    scale.tickFormat = function(m, format) {                                                                           // 6586\n      return d3_scale_linearTickFormat(scale.domain(), m, format);                                                     // 6587\n    };                                                                                                                 // 6588\n    scale.nice = function() {                                                                                          // 6589\n      return scale.domain(d3_scale_nice(scale.domain(), d3_scale_linearNice));                                         // 6590\n    };                                                                                                                 // 6591\n    scale.exponent = function(x) {                                                                                     // 6592\n      if (!arguments.length) return exponent;                                                                          // 6593\n      var domain = scale.domain();                                                                                     // 6594\n      powp = d3_scale_powPow(exponent = x);                                                                            // 6595\n      powb = d3_scale_powPow(1 / exponent);                                                                            // 6596\n      return scale.domain(domain);                                                                                     // 6597\n    };                                                                                                                 // 6598\n    scale.copy = function() {                                                                                          // 6599\n      return d3_scale_pow(linear.copy(), exponent);                                                                    // 6600\n    };                                                                                                                 // 6601\n    return d3_scale_linearRebind(scale, linear);                                                                       // 6602\n  }                                                                                                                    // 6603\n  function d3_scale_powPow(e) {                                                                                        // 6604\n    return function(x) {                                                                                               // 6605\n      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);                                                                // 6606\n    };                                                                                                                 // 6607\n  }                                                                                                                    // 6608\n  d3.scale.sqrt = function() {                                                                                         // 6609\n    return d3.scale.pow().exponent(.5);                                                                                // 6610\n  };                                                                                                                   // 6611\n  d3.scale.ordinal = function() {                                                                                      // 6612\n    return d3_scale_ordinal([], {                                                                                      // 6613\n      t: \"range\",                                                                                                      // 6614\n      a: [ [] ]                                                                                                        // 6615\n    });                                                                                                                // 6616\n  };                                                                                                                   // 6617\n  function d3_scale_ordinal(domain, ranger) {                                                                          // 6618\n    var index, range, rangeBand;                                                                                       // 6619\n    function scale(x) {                                                                                                // 6620\n      return range[((index.get(x) || index.set(x, domain.push(x))) - 1) % range.length];                               // 6621\n    }                                                                                                                  // 6622\n    function steps(start, step) {                                                                                      // 6623\n      return d3.range(domain.length).map(function(i) {                                                                 // 6624\n        return start + step * i;                                                                                       // 6625\n      });                                                                                                              // 6626\n    }                                                                                                                  // 6627\n    scale.domain = function(x) {                                                                                       // 6628\n      if (!arguments.length) return domain;                                                                            // 6629\n      domain = [];                                                                                                     // 6630\n      index = new d3_Map();                                                                                            // 6631\n      var i = -1, n = x.length, xi;                                                                                    // 6632\n      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));                                       // 6633\n      return scale[ranger.t].apply(scale, ranger.a);                                                                   // 6634\n    };                                                                                                                 // 6635\n    scale.range = function(x) {                                                                                        // 6636\n      if (!arguments.length) return range;                                                                             // 6637\n      range = x;                                                                                                       // 6638\n      rangeBand = 0;                                                                                                   // 6639\n      ranger = {                                                                                                       // 6640\n        t: \"range\",                                                                                                    // 6641\n        a: arguments                                                                                                   // 6642\n      };                                                                                                               // 6643\n      return scale;                                                                                                    // 6644\n    };                                                                                                                 // 6645\n    scale.rangePoints = function(x, padding) {                                                                         // 6646\n      if (arguments.length < 2) padding = 0;                                                                           // 6647\n      var start = x[0], stop = x[1], step = (stop - start) / (Math.max(1, domain.length - 1) + padding);               // 6648\n      range = steps(domain.length < 2 ? (start + stop) / 2 : start + step * padding / 2, step);                        // 6649\n      rangeBand = 0;                                                                                                   // 6650\n      ranger = {                                                                                                       // 6651\n        t: \"rangePoints\",                                                                                              // 6652\n        a: arguments                                                                                                   // 6653\n      };                                                                                                               // 6654\n      return scale;                                                                                                    // 6655\n    };                                                                                                                 // 6656\n    scale.rangeBands = function(x, padding, outerPadding) {                                                            // 6657\n      if (arguments.length < 2) padding = 0;                                                                           // 6658\n      if (arguments.length < 3) outerPadding = padding;                                                                // 6659\n      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);\n      range = steps(start + step * outerPadding, step);                                                                // 6661\n      if (reverse) range.reverse();                                                                                    // 6662\n      rangeBand = step * (1 - padding);                                                                                // 6663\n      ranger = {                                                                                                       // 6664\n        t: \"rangeBands\",                                                                                               // 6665\n        a: arguments                                                                                                   // 6666\n      };                                                                                                               // 6667\n      return scale;                                                                                                    // 6668\n    };                                                                                                                 // 6669\n    scale.rangeRoundBands = function(x, padding, outerPadding) {                                                       // 6670\n      if (arguments.length < 2) padding = 0;                                                                           // 6671\n      if (arguments.length < 3) outerPadding = padding;                                                                // 6672\n      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding)), error = stop - start - (domain.length - padding) * step;\n      range = steps(start + Math.round(error / 2), step);                                                              // 6674\n      if (reverse) range.reverse();                                                                                    // 6675\n      rangeBand = Math.round(step * (1 - padding));                                                                    // 6676\n      ranger = {                                                                                                       // 6677\n        t: \"rangeRoundBands\",                                                                                          // 6678\n        a: arguments                                                                                                   // 6679\n      };                                                                                                               // 6680\n      return scale;                                                                                                    // 6681\n    };                                                                                                                 // 6682\n    scale.rangeBand = function() {                                                                                     // 6683\n      return rangeBand;                                                                                                // 6684\n    };                                                                                                                 // 6685\n    scale.rangeExtent = function() {                                                                                   // 6686\n      return d3_scaleExtent(ranger.a[0]);                                                                              // 6687\n    };                                                                                                                 // 6688\n    scale.copy = function() {                                                                                          // 6689\n      return d3_scale_ordinal(domain, ranger);                                                                         // 6690\n    };                                                                                                                 // 6691\n    return scale.domain(domain);                                                                                       // 6692\n  }                                                                                                                    // 6693\n  d3.scale.category10 = function() {                                                                                   // 6694\n    return d3.scale.ordinal().range(d3_category10);                                                                    // 6695\n  };                                                                                                                   // 6696\n  d3.scale.category20 = function() {                                                                                   // 6697\n    return d3.scale.ordinal().range(d3_category20);                                                                    // 6698\n  };                                                                                                                   // 6699\n  d3.scale.category20b = function() {                                                                                  // 6700\n    return d3.scale.ordinal().range(d3_category20b);                                                                   // 6701\n  };                                                                                                                   // 6702\n  d3.scale.category20c = function() {                                                                                  // 6703\n    return d3.scale.ordinal().range(d3_category20c);                                                                   // 6704\n  };                                                                                                                   // 6705\n  var d3_category10 = [ \"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\", \"#9467bd\", \"#8c564b\", \"#e377c2\", \"#7f7f7f\", \"#bcbd22\", \"#17becf\" ];\n  var d3_category20 = [ \"#1f77b4\", \"#aec7e8\", \"#ff7f0e\", \"#ffbb78\", \"#2ca02c\", \"#98df8a\", \"#d62728\", \"#ff9896\", \"#9467bd\", \"#c5b0d5\", \"#8c564b\", \"#c49c94\", \"#e377c2\", \"#f7b6d2\", \"#7f7f7f\", \"#c7c7c7\", \"#bcbd22\", \"#dbdb8d\", \"#17becf\", \"#9edae5\" ];\n  var d3_category20b = [ \"#393b79\", \"#5254a3\", \"#6b6ecf\", \"#9c9ede\", \"#637939\", \"#8ca252\", \"#b5cf6b\", \"#cedb9c\", \"#8c6d31\", \"#bd9e39\", \"#e7ba52\", \"#e7cb94\", \"#843c39\", \"#ad494a\", \"#d6616b\", \"#e7969c\", \"#7b4173\", \"#a55194\", \"#ce6dbd\", \"#de9ed6\" ];\n  var d3_category20c = [ \"#3182bd\", \"#6baed6\", \"#9ecae1\", \"#c6dbef\", \"#e6550d\", \"#fd8d3c\", \"#fdae6b\", \"#fdd0a2\", \"#31a354\", \"#74c476\", \"#a1d99b\", \"#c7e9c0\", \"#756bb1\", \"#9e9ac8\", \"#bcbddc\", \"#dadaeb\", \"#636363\", \"#969696\", \"#bdbdbd\", \"#d9d9d9\" ];\n  d3.scale.quantile = function() {                                                                                     // 6710\n    return d3_scale_quantile([], []);                                                                                  // 6711\n  };                                                                                                                   // 6712\n  function d3_scale_quantile(domain, range) {                                                                          // 6713\n    var thresholds;                                                                                                    // 6714\n    function rescale() {                                                                                               // 6715\n      var k = 0, q = range.length;                                                                                     // 6716\n      thresholds = [];                                                                                                 // 6717\n      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);                                                  // 6718\n      return scale;                                                                                                    // 6719\n    }                                                                                                                  // 6720\n    function scale(x) {                                                                                                // 6721\n      if (isNaN(x = +x)) return NaN;                                                                                   // 6722\n      return range[d3.bisect(thresholds, x)];                                                                          // 6723\n    }                                                                                                                  // 6724\n    scale.domain = function(x) {                                                                                       // 6725\n      if (!arguments.length) return domain;                                                                            // 6726\n      domain = x.filter(function(d) {                                                                                  // 6727\n        return !isNaN(d);                                                                                              // 6728\n      }).sort(d3.ascending);                                                                                           // 6729\n      return rescale();                                                                                                // 6730\n    };                                                                                                                 // 6731\n    scale.range = function(x) {                                                                                        // 6732\n      if (!arguments.length) return range;                                                                             // 6733\n      range = x;                                                                                                       // 6734\n      return rescale();                                                                                                // 6735\n    };                                                                                                                 // 6736\n    scale.quantiles = function() {                                                                                     // 6737\n      return thresholds;                                                                                               // 6738\n    };                                                                                                                 // 6739\n    scale.copy = function() {                                                                                          // 6740\n      return d3_scale_quantile(domain, range);                                                                         // 6741\n    };                                                                                                                 // 6742\n    return rescale();                                                                                                  // 6743\n  }                                                                                                                    // 6744\n  d3.scale.quantize = function() {                                                                                     // 6745\n    return d3_scale_quantize(0, 1, [ 0, 1 ]);                                                                          // 6746\n  };                                                                                                                   // 6747\n  function d3_scale_quantize(x0, x1, range) {                                                                          // 6748\n    var kx, i;                                                                                                         // 6749\n    function scale(x) {                                                                                                // 6750\n      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];                                               // 6751\n    }                                                                                                                  // 6752\n    function rescale() {                                                                                               // 6753\n      kx = range.length / (x1 - x0);                                                                                   // 6754\n      i = range.length - 1;                                                                                            // 6755\n      return scale;                                                                                                    // 6756\n    }                                                                                                                  // 6757\n    scale.domain = function(x) {                                                                                       // 6758\n      if (!arguments.length) return [ x0, x1 ];                                                                        // 6759\n      x0 = +x[0];                                                                                                      // 6760\n      x1 = +x[x.length - 1];                                                                                           // 6761\n      return rescale();                                                                                                // 6762\n    };                                                                                                                 // 6763\n    scale.range = function(x) {                                                                                        // 6764\n      if (!arguments.length) return range;                                                                             // 6765\n      range = x;                                                                                                       // 6766\n      return rescale();                                                                                                // 6767\n    };                                                                                                                 // 6768\n    scale.copy = function() {                                                                                          // 6769\n      return d3_scale_quantize(x0, x1, range);                                                                         // 6770\n    };                                                                                                                 // 6771\n    return rescale();                                                                                                  // 6772\n  }                                                                                                                    // 6773\n  d3.scale.threshold = function() {                                                                                    // 6774\n    return d3_scale_threshold([ .5 ], [ 0, 1 ]);                                                                       // 6775\n  };                                                                                                                   // 6776\n  function d3_scale_threshold(domain, range) {                                                                         // 6777\n    function scale(x) {                                                                                                // 6778\n      return range[d3.bisect(domain, x)];                                                                              // 6779\n    }                                                                                                                  // 6780\n    scale.domain = function(_) {                                                                                       // 6781\n      if (!arguments.length) return domain;                                                                            // 6782\n      domain = _;                                                                                                      // 6783\n      return scale;                                                                                                    // 6784\n    };                                                                                                                 // 6785\n    scale.range = function(_) {                                                                                        // 6786\n      if (!arguments.length) return range;                                                                             // 6787\n      range = _;                                                                                                       // 6788\n      return scale;                                                                                                    // 6789\n    };                                                                                                                 // 6790\n    scale.copy = function() {                                                                                          // 6791\n      return d3_scale_threshold(domain, range);                                                                        // 6792\n    };                                                                                                                 // 6793\n    return scale;                                                                                                      // 6794\n  }                                                                                                                    // 6795\n  d3.scale.identity = function() {                                                                                     // 6796\n    return d3_scale_identity([ 0, 1 ]);                                                                                // 6797\n  };                                                                                                                   // 6798\n  function d3_scale_identity(domain) {                                                                                 // 6799\n    function identity(x) {                                                                                             // 6800\n      return +x;                                                                                                       // 6801\n    }                                                                                                                  // 6802\n    identity.invert = identity;                                                                                        // 6803\n    identity.domain = identity.range = function(x) {                                                                   // 6804\n      if (!arguments.length) return domain;                                                                            // 6805\n      domain = x.map(identity);                                                                                        // 6806\n      return identity;                                                                                                 // 6807\n    };                                                                                                                 // 6808\n    identity.ticks = function(m) {                                                                                     // 6809\n      return d3_scale_linearTicks(domain, m);                                                                          // 6810\n    };                                                                                                                 // 6811\n    identity.tickFormat = function(m, format) {                                                                        // 6812\n      return d3_scale_linearTickFormat(domain, m, format);                                                             // 6813\n    };                                                                                                                 // 6814\n    identity.copy = function() {                                                                                       // 6815\n      return d3_scale_identity(domain);                                                                                // 6816\n    };                                                                                                                 // 6817\n    return identity;                                                                                                   // 6818\n  }                                                                                                                    // 6819\n  d3.svg.arc = function() {                                                                                            // 6820\n    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;\n    function arc() {                                                                                                   // 6822\n      var r0 = innerRadius.apply(this, arguments), r1 = outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) + d3_svg_arcOffset, a1 = endAngle.apply(this, arguments) + d3_svg_arcOffset, da = (a1 < a0 && (da = a0,\n      a0 = a1, a1 = da), a1 - a0), df = da < π ? \"0\" : \"1\", c0 = Math.cos(a0), s0 = Math.sin(a0), c1 = Math.cos(a1), s1 = Math.sin(a1);\n      return da >= d3_svg_arcMax ? r0 ? \"M0,\" + r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,1 0,\" + -r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,1 0,\" + r1 + \"M0,\" + r0 + \"A\" + r0 + \",\" + r0 + \" 0 1,0 0,\" + -r0 + \"A\" + r0 + \",\" + r0 + \" 0 1,0 0,\" + r0 + \"Z\" : \"M0,\" + r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,1 0,\" + -r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,1 0,\" + r1 + \"Z\" : r0 ? \"M\" + r1 * c0 + \",\" + r1 * s0 + \"A\" + r1 + \",\" + r1 + \" 0 \" + df + \",1 \" + r1 * c1 + \",\" + r1 * s1 + \"L\" + r0 * c1 + \",\" + r0 * s1 + \"A\" + r0 + \",\" + r0 + \" 0 \" + df + \",0 \" + r0 * c0 + \",\" + r0 * s0 + \"Z\" : \"M\" + r1 * c0 + \",\" + r1 * s0 + \"A\" + r1 + \",\" + r1 + \" 0 \" + df + \",1 \" + r1 * c1 + \",\" + r1 * s1 + \"L0,0\" + \"Z\";\n    }                                                                                                                  // 6826\n    arc.innerRadius = function(v) {                                                                                    // 6827\n      if (!arguments.length) return innerRadius;                                                                       // 6828\n      innerRadius = d3_functor(v);                                                                                     // 6829\n      return arc;                                                                                                      // 6830\n    };                                                                                                                 // 6831\n    arc.outerRadius = function(v) {                                                                                    // 6832\n      if (!arguments.length) return outerRadius;                                                                       // 6833\n      outerRadius = d3_functor(v);                                                                                     // 6834\n      return arc;                                                                                                      // 6835\n    };                                                                                                                 // 6836\n    arc.startAngle = function(v) {                                                                                     // 6837\n      if (!arguments.length) return startAngle;                                                                        // 6838\n      startAngle = d3_functor(v);                                                                                      // 6839\n      return arc;                                                                                                      // 6840\n    };                                                                                                                 // 6841\n    arc.endAngle = function(v) {                                                                                       // 6842\n      if (!arguments.length) return endAngle;                                                                          // 6843\n      endAngle = d3_functor(v);                                                                                        // 6844\n      return arc;                                                                                                      // 6845\n    };                                                                                                                 // 6846\n    arc.centroid = function() {                                                                                        // 6847\n      var r = (innerRadius.apply(this, arguments) + outerRadius.apply(this, arguments)) / 2, a = (startAngle.apply(this, arguments) + endAngle.apply(this, arguments)) / 2 + d3_svg_arcOffset;\n      return [ Math.cos(a) * r, Math.sin(a) * r ];                                                                     // 6849\n    };                                                                                                                 // 6850\n    return arc;                                                                                                        // 6851\n  };                                                                                                                   // 6852\n  var d3_svg_arcOffset = -π / 2, d3_svg_arcMax = 2 * π - 1e-6;                                                         // 6853\n  function d3_svg_arcInnerRadius(d) {                                                                                  // 6854\n    return d.innerRadius;                                                                                              // 6855\n  }                                                                                                                    // 6856\n  function d3_svg_arcOuterRadius(d) {                                                                                  // 6857\n    return d.outerRadius;                                                                                              // 6858\n  }                                                                                                                    // 6859\n  function d3_svg_arcStartAngle(d) {                                                                                   // 6860\n    return d.startAngle;                                                                                               // 6861\n  }                                                                                                                    // 6862\n  function d3_svg_arcEndAngle(d) {                                                                                     // 6863\n    return d.endAngle;                                                                                                 // 6864\n  }                                                                                                                    // 6865\n  d3.svg.line.radial = function() {                                                                                    // 6866\n    var line = d3_svg_line(d3_svg_lineRadial);                                                                         // 6867\n    line.radius = line.x, delete line.x;                                                                               // 6868\n    line.angle = line.y, delete line.y;                                                                                // 6869\n    return line;                                                                                                       // 6870\n  };                                                                                                                   // 6871\n  function d3_svg_lineRadial(points) {                                                                                 // 6872\n    var point, i = -1, n = points.length, r, a;                                                                        // 6873\n    while (++i < n) {                                                                                                  // 6874\n      point = points[i];                                                                                               // 6875\n      r = point[0];                                                                                                    // 6876\n      a = point[1] + d3_svg_arcOffset;                                                                                 // 6877\n      point[0] = r * Math.cos(a);                                                                                      // 6878\n      point[1] = r * Math.sin(a);                                                                                      // 6879\n    }                                                                                                                  // 6880\n    return points;                                                                                                     // 6881\n  }                                                                                                                    // 6882\n  function d3_svg_area(projection) {                                                                                   // 6883\n    var x0 = d3_svg_lineX, x1 = d3_svg_lineX, y0 = 0, y1 = d3_svg_lineY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = \"L\", tension = .7;\n    function area(data) {                                                                                              // 6885\n      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {\n        return x;                                                                                                      // 6887\n      } : d3_functor(x1), fy1 = y0 === y1 ? function() {                                                               // 6888\n        return y;                                                                                                      // 6889\n      } : d3_functor(y1), x, y;                                                                                        // 6890\n      function segment() {                                                                                             // 6891\n        segments.push(\"M\", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), \"Z\");\n      }                                                                                                                // 6893\n      while (++i < n) {                                                                                                // 6894\n        if (defined.call(this, d = data[i], i)) {                                                                      // 6895\n          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);                                      // 6896\n          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);                                              // 6897\n        } else if (points0.length) {                                                                                   // 6898\n          segment();                                                                                                   // 6899\n          points0 = [];                                                                                                // 6900\n          points1 = [];                                                                                                // 6901\n        }                                                                                                              // 6902\n      }                                                                                                                // 6903\n      if (points0.length) segment();                                                                                   // 6904\n      return segments.length ? segments.join(\"\") : null;                                                               // 6905\n    }                                                                                                                  // 6906\n    area.x = function(_) {                                                                                             // 6907\n      if (!arguments.length) return x1;                                                                                // 6908\n      x0 = x1 = _;                                                                                                     // 6909\n      return area;                                                                                                     // 6910\n    };                                                                                                                 // 6911\n    area.x0 = function(_) {                                                                                            // 6912\n      if (!arguments.length) return x0;                                                                                // 6913\n      x0 = _;                                                                                                          // 6914\n      return area;                                                                                                     // 6915\n    };                                                                                                                 // 6916\n    area.x1 = function(_) {                                                                                            // 6917\n      if (!arguments.length) return x1;                                                                                // 6918\n      x1 = _;                                                                                                          // 6919\n      return area;                                                                                                     // 6920\n    };                                                                                                                 // 6921\n    area.y = function(_) {                                                                                             // 6922\n      if (!arguments.length) return y1;                                                                                // 6923\n      y0 = y1 = _;                                                                                                     // 6924\n      return area;                                                                                                     // 6925\n    };                                                                                                                 // 6926\n    area.y0 = function(_) {                                                                                            // 6927\n      if (!arguments.length) return y0;                                                                                // 6928\n      y0 = _;                                                                                                          // 6929\n      return area;                                                                                                     // 6930\n    };                                                                                                                 // 6931\n    area.y1 = function(_) {                                                                                            // 6932\n      if (!arguments.length) return y1;                                                                                // 6933\n      y1 = _;                                                                                                          // 6934\n      return area;                                                                                                     // 6935\n    };                                                                                                                 // 6936\n    area.defined = function(_) {                                                                                       // 6937\n      if (!arguments.length) return defined;                                                                           // 6938\n      defined = _;                                                                                                     // 6939\n      return area;                                                                                                     // 6940\n    };                                                                                                                 // 6941\n    area.interpolate = function(_) {                                                                                   // 6942\n      if (!arguments.length) return interpolateKey;                                                                    // 6943\n      if (typeof _ === \"function\") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n      interpolateReverse = interpolate.reverse || interpolate;                                                         // 6945\n      L = interpolate.closed ? \"M\" : \"L\";                                                                              // 6946\n      return area;                                                                                                     // 6947\n    };                                                                                                                 // 6948\n    area.tension = function(_) {                                                                                       // 6949\n      if (!arguments.length) return tension;                                                                           // 6950\n      tension = _;                                                                                                     // 6951\n      return area;                                                                                                     // 6952\n    };                                                                                                                 // 6953\n    return area;                                                                                                       // 6954\n  }                                                                                                                    // 6955\n  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;                                                                // 6956\n  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;                                                                // 6957\n  d3.svg.area = function() {                                                                                           // 6958\n    return d3_svg_area(d3_identity);                                                                                   // 6959\n  };                                                                                                                   // 6960\n  d3.svg.area.radial = function() {                                                                                    // 6961\n    var area = d3_svg_area(d3_svg_lineRadial);                                                                         // 6962\n    area.radius = area.x, delete area.x;                                                                               // 6963\n    area.innerRadius = area.x0, delete area.x0;                                                                        // 6964\n    area.outerRadius = area.x1, delete area.x1;                                                                        // 6965\n    area.angle = area.y, delete area.y;                                                                                // 6966\n    area.startAngle = area.y0, delete area.y0;                                                                         // 6967\n    area.endAngle = area.y1, delete area.y1;                                                                           // 6968\n    return area;                                                                                                       // 6969\n  };                                                                                                                   // 6970\n  d3.svg.chord = function() {                                                                                          // 6971\n    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;\n    function chord(d, i) {                                                                                             // 6973\n      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);                                          // 6974\n      return \"M\" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + \"Z\";\n    }                                                                                                                  // 6976\n    function subgroup(self, f, d, i) {                                                                                 // 6977\n      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) + d3_svg_arcOffset, a1 = endAngle.call(self, subgroup, i) + d3_svg_arcOffset;\n      return {                                                                                                         // 6979\n        r: r,                                                                                                          // 6980\n        a0: a0,                                                                                                        // 6981\n        a1: a1,                                                                                                        // 6982\n        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],                                                                    // 6983\n        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]                                                                     // 6984\n      };                                                                                                               // 6985\n    }                                                                                                                  // 6986\n    function equals(a, b) {                                                                                            // 6987\n      return a.a0 == b.a0 && a.a1 == b.a1;                                                                             // 6988\n    }                                                                                                                  // 6989\n    function arc(r, p, a) {                                                                                            // 6990\n      return \"A\" + r + \",\" + r + \" 0 \" + +(a > π) + \",1 \" + p;                                                         // 6991\n    }                                                                                                                  // 6992\n    function curve(r0, p0, r1, p1) {                                                                                   // 6993\n      return \"Q 0,0 \" + p1;                                                                                            // 6994\n    }                                                                                                                  // 6995\n    chord.radius = function(v) {                                                                                       // 6996\n      if (!arguments.length) return radius;                                                                            // 6997\n      radius = d3_functor(v);                                                                                          // 6998\n      return chord;                                                                                                    // 6999\n    };                                                                                                                 // 7000\n    chord.source = function(v) {                                                                                       // 7001\n      if (!arguments.length) return source;                                                                            // 7002\n      source = d3_functor(v);                                                                                          // 7003\n      return chord;                                                                                                    // 7004\n    };                                                                                                                 // 7005\n    chord.target = function(v) {                                                                                       // 7006\n      if (!arguments.length) return target;                                                                            // 7007\n      target = d3_functor(v);                                                                                          // 7008\n      return chord;                                                                                                    // 7009\n    };                                                                                                                 // 7010\n    chord.startAngle = function(v) {                                                                                   // 7011\n      if (!arguments.length) return startAngle;                                                                        // 7012\n      startAngle = d3_functor(v);                                                                                      // 7013\n      return chord;                                                                                                    // 7014\n    };                                                                                                                 // 7015\n    chord.endAngle = function(v) {                                                                                     // 7016\n      if (!arguments.length) return endAngle;                                                                          // 7017\n      endAngle = d3_functor(v);                                                                                        // 7018\n      return chord;                                                                                                    // 7019\n    };                                                                                                                 // 7020\n    return chord;                                                                                                      // 7021\n  };                                                                                                                   // 7022\n  function d3_svg_chordRadius(d) {                                                                                     // 7023\n    return d.radius;                                                                                                   // 7024\n  }                                                                                                                    // 7025\n  d3.svg.diagonal = function() {                                                                                       // 7026\n    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;                                // 7027\n    function diagonal(d, i) {                                                                                          // 7028\n      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {               // 7029\n        x: p0.x,                                                                                                       // 7030\n        y: m                                                                                                           // 7031\n      }, {                                                                                                             // 7032\n        x: p3.x,                                                                                                       // 7033\n        y: m                                                                                                           // 7034\n      }, p3 ];                                                                                                         // 7035\n      p = p.map(projection);                                                                                           // 7036\n      return \"M\" + p[0] + \"C\" + p[1] + \" \" + p[2] + \" \" + p[3];                                                        // 7037\n    }                                                                                                                  // 7038\n    diagonal.source = function(x) {                                                                                    // 7039\n      if (!arguments.length) return source;                                                                            // 7040\n      source = d3_functor(x);                                                                                          // 7041\n      return diagonal;                                                                                                 // 7042\n    };                                                                                                                 // 7043\n    diagonal.target = function(x) {                                                                                    // 7044\n      if (!arguments.length) return target;                                                                            // 7045\n      target = d3_functor(x);                                                                                          // 7046\n      return diagonal;                                                                                                 // 7047\n    };                                                                                                                 // 7048\n    diagonal.projection = function(x) {                                                                                // 7049\n      if (!arguments.length) return projection;                                                                        // 7050\n      projection = x;                                                                                                  // 7051\n      return diagonal;                                                                                                 // 7052\n    };                                                                                                                 // 7053\n    return diagonal;                                                                                                   // 7054\n  };                                                                                                                   // 7055\n  function d3_svg_diagonalProjection(d) {                                                                              // 7056\n    return [ d.x, d.y ];                                                                                               // 7057\n  }                                                                                                                    // 7058\n  d3.svg.diagonal.radial = function() {                                                                                // 7059\n    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;       // 7060\n    diagonal.projection = function(x) {                                                                                // 7061\n      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;             // 7062\n    };                                                                                                                 // 7063\n    return diagonal;                                                                                                   // 7064\n  };                                                                                                                   // 7065\n  function d3_svg_diagonalRadialProjection(projection) {                                                               // 7066\n    return function() {                                                                                                // 7067\n      var d = projection.apply(this, arguments), r = d[0], a = d[1] + d3_svg_arcOffset;                                // 7068\n      return [ r * Math.cos(a), r * Math.sin(a) ];                                                                     // 7069\n    };                                                                                                                 // 7070\n  }                                                                                                                    // 7071\n  d3.svg.symbol = function() {                                                                                         // 7072\n    var type = d3_svg_symbolType, size = d3_svg_symbolSize;                                                            // 7073\n    function symbol(d, i) {                                                                                            // 7074\n      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));                // 7075\n    }                                                                                                                  // 7076\n    symbol.type = function(x) {                                                                                        // 7077\n      if (!arguments.length) return type;                                                                              // 7078\n      type = d3_functor(x);                                                                                            // 7079\n      return symbol;                                                                                                   // 7080\n    };                                                                                                                 // 7081\n    symbol.size = function(x) {                                                                                        // 7082\n      if (!arguments.length) return size;                                                                              // 7083\n      size = d3_functor(x);                                                                                            // 7084\n      return symbol;                                                                                                   // 7085\n    };                                                                                                                 // 7086\n    return symbol;                                                                                                     // 7087\n  };                                                                                                                   // 7088\n  function d3_svg_symbolSize() {                                                                                       // 7089\n    return 64;                                                                                                         // 7090\n  }                                                                                                                    // 7091\n  function d3_svg_symbolType() {                                                                                       // 7092\n    return \"circle\";                                                                                                   // 7093\n  }                                                                                                                    // 7094\n  function d3_svg_symbolCircle(size) {                                                                                 // 7095\n    var r = Math.sqrt(size / π);                                                                                       // 7096\n    return \"M0,\" + r + \"A\" + r + \",\" + r + \" 0 1,1 0,\" + -r + \"A\" + r + \",\" + r + \" 0 1,1 0,\" + r + \"Z\";               // 7097\n  }                                                                                                                    // 7098\n  var d3_svg_symbols = d3.map({                                                                                        // 7099\n    circle: d3_svg_symbolCircle,                                                                                       // 7100\n    cross: function(size) {                                                                                            // 7101\n      var r = Math.sqrt(size / 5) / 2;                                                                                 // 7102\n      return \"M\" + -3 * r + \",\" + -r + \"H\" + -r + \"V\" + -3 * r + \"H\" + r + \"V\" + -r + \"H\" + 3 * r + \"V\" + r + \"H\" + r + \"V\" + 3 * r + \"H\" + -r + \"V\" + r + \"H\" + -3 * r + \"Z\";\n    },                                                                                                                 // 7104\n    diamond: function(size) {                                                                                          // 7105\n      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;                               // 7106\n      return \"M0,\" + -ry + \"L\" + rx + \",0\" + \" 0,\" + ry + \" \" + -rx + \",0\" + \"Z\";                                      // 7107\n    },                                                                                                                 // 7108\n    square: function(size) {                                                                                           // 7109\n      var r = Math.sqrt(size) / 2;                                                                                     // 7110\n      return \"M\" + -r + \",\" + -r + \"L\" + r + \",\" + -r + \" \" + r + \",\" + r + \" \" + -r + \",\" + r + \"Z\";                  // 7111\n    },                                                                                                                 // 7112\n    \"triangle-down\": function(size) {                                                                                  // 7113\n      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;                                 // 7114\n      return \"M0,\" + ry + \"L\" + rx + \",\" + -ry + \" \" + -rx + \",\" + -ry + \"Z\";                                          // 7115\n    },                                                                                                                 // 7116\n    \"triangle-up\": function(size) {                                                                                    // 7117\n      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;                                 // 7118\n      return \"M0,\" + -ry + \"L\" + rx + \",\" + ry + \" \" + -rx + \",\" + ry + \"Z\";                                           // 7119\n    }                                                                                                                  // 7120\n  });                                                                                                                  // 7121\n  d3.svg.symbolTypes = d3_svg_symbols.keys();                                                                          // 7122\n  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);                               // 7123\n  function d3_transition(groups, id) {                                                                                 // 7124\n    d3_arraySubclass(groups, d3_transitionPrototype);                                                                  // 7125\n    groups.id = id;                                                                                                    // 7126\n    return groups;                                                                                                     // 7127\n  }                                                                                                                    // 7128\n  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit = {               // 7129\n    ease: d3_ease_cubicInOut,                                                                                          // 7130\n    delay: 0,                                                                                                          // 7131\n    duration: 250                                                                                                      // 7132\n  };                                                                                                                   // 7133\n  d3_transitionPrototype.call = d3_selectionPrototype.call;                                                            // 7134\n  d3_transitionPrototype.empty = d3_selectionPrototype.empty;                                                          // 7135\n  d3_transitionPrototype.node = d3_selectionPrototype.node;                                                            // 7136\n  d3.transition = function(selection) {                                                                                // 7137\n    return arguments.length ? d3_transitionInheritId ? selection.transition() : selection : d3_selectionRoot.transition();\n  };                                                                                                                   // 7139\n  d3.transition.prototype = d3_transitionPrototype;                                                                    // 7140\n  d3_transitionPrototype.select = function(selector) {                                                                 // 7141\n    var id = this.id, subgroups = [], subgroup, subnode, node;                                                         // 7142\n    if (typeof selector !== \"function\") selector = d3_selection_selector(selector);                                    // 7143\n    for (var j = -1, m = this.length; ++j < m; ) {                                                                     // 7144\n      subgroups.push(subgroup = []);                                                                                   // 7145\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {                                                 // 7146\n        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i))) {                                  // 7147\n          if (\"__data__\" in node) subnode.__data__ = node.__data__;                                                    // 7148\n          d3_transitionNode(subnode, i, id, node.__transition__[id]);                                                  // 7149\n          subgroup.push(subnode);                                                                                      // 7150\n        } else {                                                                                                       // 7151\n          subgroup.push(null);                                                                                         // 7152\n        }                                                                                                              // 7153\n      }                                                                                                                // 7154\n    }                                                                                                                  // 7155\n    return d3_transition(subgroups, id);                                                                               // 7156\n  };                                                                                                                   // 7157\n  d3_transitionPrototype.selectAll = function(selector) {                                                              // 7158\n    var id = this.id, subgroups = [], subgroup, subnodes, node, subnode, transition;                                   // 7159\n    if (typeof selector !== \"function\") selector = d3_selection_selectorAll(selector);                                 // 7160\n    for (var j = -1, m = this.length; ++j < m; ) {                                                                     // 7161\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {                                                 // 7162\n        if (node = group[i]) {                                                                                         // 7163\n          transition = node.__transition__[id];                                                                        // 7164\n          subnodes = selector.call(node, node.__data__, i);                                                            // 7165\n          subgroups.push(subgroup = []);                                                                               // 7166\n          for (var k = -1, o = subnodes.length; ++k < o; ) {                                                           // 7167\n            d3_transitionNode(subnode = subnodes[k], k, id, transition);                                               // 7168\n            subgroup.push(subnode);                                                                                    // 7169\n          }                                                                                                            // 7170\n        }                                                                                                              // 7171\n      }                                                                                                                // 7172\n    }                                                                                                                  // 7173\n    return d3_transition(subgroups, id);                                                                               // 7174\n  };                                                                                                                   // 7175\n  d3_transitionPrototype.filter = function(filter) {                                                                   // 7176\n    var subgroups = [], subgroup, group, node;                                                                         // 7177\n    if (typeof filter !== \"function\") filter = d3_selection_filter(filter);                                            // 7178\n    for (var j = 0, m = this.length; j < m; j++) {                                                                     // 7179\n      subgroups.push(subgroup = []);                                                                                   // 7180\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {                                                 // 7181\n        if ((node = group[i]) && filter.call(node, node.__data__, i)) {                                                // 7182\n          subgroup.push(node);                                                                                         // 7183\n        }                                                                                                              // 7184\n      }                                                                                                                // 7185\n    }                                                                                                                  // 7186\n    return d3_transition(subgroups, this.id, this.time).ease(this.ease());                                             // 7187\n  };                                                                                                                   // 7188\n  d3_transitionPrototype.tween = function(name, tween) {                                                               // 7189\n    var id = this.id;                                                                                                  // 7190\n    if (arguments.length < 2) return this.node().__transition__[id].tween.get(name);                                   // 7191\n    return d3_selection_each(this, tween == null ? function(node) {                                                    // 7192\n      node.__transition__[id].tween.remove(name);                                                                      // 7193\n    } : function(node) {                                                                                               // 7194\n      node.__transition__[id].tween.set(name, tween);                                                                  // 7195\n    });                                                                                                                // 7196\n  };                                                                                                                   // 7197\n  function d3_transition_tween(groups, name, value, tween) {                                                           // 7198\n    var id = groups.id;                                                                                                // 7199\n    return d3_selection_each(groups, typeof value === \"function\" ? function(node, i, j) {                              // 7200\n      node.__transition__[id].tween.set(name, tween(value.call(node, node.__data__, i, j)));                           // 7201\n    } : (value = tween(value), function(node) {                                                                        // 7202\n      node.__transition__[id].tween.set(name, value);                                                                  // 7203\n    }));                                                                                                               // 7204\n  }                                                                                                                    // 7205\n  d3_transitionPrototype.attr = function(nameNS, value) {                                                              // 7206\n    if (arguments.length < 2) {                                                                                        // 7207\n      for (value in nameNS) this.attr(value, nameNS[value]);                                                           // 7208\n      return this;                                                                                                     // 7209\n    }                                                                                                                  // 7210\n    var interpolate = d3_interpolateByName(nameNS), name = d3.ns.qualify(nameNS);                                      // 7211\n    function attrNull() {                                                                                              // 7212\n      this.removeAttribute(name);                                                                                      // 7213\n    }                                                                                                                  // 7214\n    function attrNullNS() {                                                                                            // 7215\n      this.removeAttributeNS(name.space, name.local);                                                                  // 7216\n    }                                                                                                                  // 7217\n    return d3_transition_tween(this, \"attr.\" + nameNS, value, function(b) {                                            // 7218\n      function attrString() {                                                                                          // 7219\n        var a = this.getAttribute(name), i;                                                                            // 7220\n        return a !== b && (i = interpolate(a, b), function(t) {                                                        // 7221\n          this.setAttribute(name, i(t));                                                                               // 7222\n        });                                                                                                            // 7223\n      }                                                                                                                // 7224\n      function attrStringNS() {                                                                                        // 7225\n        var a = this.getAttributeNS(name.space, name.local), i;                                                        // 7226\n        return a !== b && (i = interpolate(a, b), function(t) {                                                        // 7227\n          this.setAttributeNS(name.space, name.local, i(t));                                                           // 7228\n        });                                                                                                            // 7229\n      }                                                                                                                // 7230\n      return b == null ? name.local ? attrNullNS : attrNull : (b += \"\", name.local ? attrStringNS : attrString);       // 7231\n    });                                                                                                                // 7232\n  };                                                                                                                   // 7233\n  d3_transitionPrototype.attrTween = function(nameNS, tween) {                                                         // 7234\n    var name = d3.ns.qualify(nameNS);                                                                                  // 7235\n    function attrTween(d, i) {                                                                                         // 7236\n      var f = tween.call(this, d, i, this.getAttribute(name));                                                         // 7237\n      return f && function(t) {                                                                                        // 7238\n        this.setAttribute(name, f(t));                                                                                 // 7239\n      };                                                                                                               // 7240\n    }                                                                                                                  // 7241\n    function attrTweenNS(d, i) {                                                                                       // 7242\n      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));                                     // 7243\n      return f && function(t) {                                                                                        // 7244\n        this.setAttributeNS(name.space, name.local, f(t));                                                             // 7245\n      };                                                                                                               // 7246\n    }                                                                                                                  // 7247\n    return this.tween(\"attr.\" + nameNS, name.local ? attrTweenNS : attrTween);                                         // 7248\n  };                                                                                                                   // 7249\n  d3_transitionPrototype.style = function(name, value, priority) {                                                     // 7250\n    var n = arguments.length;                                                                                          // 7251\n    if (n < 3) {                                                                                                       // 7252\n      if (typeof name !== \"string\") {                                                                                  // 7253\n        if (n < 2) value = \"\";                                                                                         // 7254\n        for (priority in name) this.style(priority, name[priority], value);                                            // 7255\n        return this;                                                                                                   // 7256\n      }                                                                                                                // 7257\n      priority = \"\";                                                                                                   // 7258\n    }                                                                                                                  // 7259\n    var interpolate = d3_interpolateByName(name);                                                                      // 7260\n    function styleNull() {                                                                                             // 7261\n      this.style.removeProperty(name);                                                                                 // 7262\n    }                                                                                                                  // 7263\n    return d3_transition_tween(this, \"style.\" + name, value, function(b) {                                             // 7264\n      function styleString() {                                                                                         // 7265\n        var a = d3_window.getComputedStyle(this, null).getPropertyValue(name), i;                                      // 7266\n        return a !== b && (i = interpolate(a, b), function(t) {                                                        // 7267\n          this.style.setProperty(name, i(t), priority);                                                                // 7268\n        });                                                                                                            // 7269\n      }                                                                                                                // 7270\n      return b == null ? styleNull : (b += \"\", styleString);                                                           // 7271\n    });                                                                                                                // 7272\n  };                                                                                                                   // 7273\n  d3_transitionPrototype.styleTween = function(name, tween, priority) {                                                // 7274\n    if (arguments.length < 3) priority = \"\";                                                                           // 7275\n    return this.tween(\"style.\" + name, function(d, i) {                                                                // 7276\n      var f = tween.call(this, d, i, d3_window.getComputedStyle(this, null).getPropertyValue(name));                   // 7277\n      return f && function(t) {                                                                                        // 7278\n        this.style.setProperty(name, f(t), priority);                                                                  // 7279\n      };                                                                                                               // 7280\n    });                                                                                                                // 7281\n  };                                                                                                                   // 7282\n  d3_transitionPrototype.text = function(value) {                                                                      // 7283\n    return d3_transition_tween(this, \"text\", value, d3_transition_text);                                               // 7284\n  };                                                                                                                   // 7285\n  function d3_transition_text(b) {                                                                                     // 7286\n    if (b == null) b = \"\";                                                                                             // 7287\n    return function() {                                                                                                // 7288\n      this.textContent = b;                                                                                            // 7289\n    };                                                                                                                 // 7290\n  }                                                                                                                    // 7291\n  d3_transitionPrototype.remove = function() {                                                                         // 7292\n    return this.each(\"end.transition\", function() {                                                                    // 7293\n      var p;                                                                                                           // 7294\n      if (!this.__transition__ && (p = this.parentNode)) p.removeChild(this);                                          // 7295\n    });                                                                                                                // 7296\n  };                                                                                                                   // 7297\n  d3_transitionPrototype.ease = function(value) {                                                                      // 7298\n    var id = this.id;                                                                                                  // 7299\n    if (arguments.length < 1) return this.node().__transition__[id].ease;                                              // 7300\n    if (typeof value !== \"function\") value = d3.ease.apply(d3, arguments);                                             // 7301\n    return d3_selection_each(this, function(node) {                                                                    // 7302\n      node.__transition__[id].ease = value;                                                                            // 7303\n    });                                                                                                                // 7304\n  };                                                                                                                   // 7305\n  d3_transitionPrototype.delay = function(value) {                                                                     // 7306\n    var id = this.id;                                                                                                  // 7307\n    return d3_selection_each(this, typeof value === \"function\" ? function(node, i, j) {                                // 7308\n      node.__transition__[id].delay = value.call(node, node.__data__, i, j) | 0;                                       // 7309\n    } : (value |= 0, function(node) {                                                                                  // 7310\n      node.__transition__[id].delay = value;                                                                           // 7311\n    }));                                                                                                               // 7312\n  };                                                                                                                   // 7313\n  d3_transitionPrototype.duration = function(value) {                                                                  // 7314\n    var id = this.id;                                                                                                  // 7315\n    return d3_selection_each(this, typeof value === \"function\" ? function(node, i, j) {                                // 7316\n      node.__transition__[id].duration = Math.max(1, value.call(node, node.__data__, i, j) | 0);                       // 7317\n    } : (value = Math.max(1, value | 0), function(node) {                                                              // 7318\n      node.__transition__[id].duration = value;                                                                        // 7319\n    }));                                                                                                               // 7320\n  };                                                                                                                   // 7321\n  d3_transitionPrototype.each = function(type, listener) {                                                             // 7322\n    var id = this.id;                                                                                                  // 7323\n    if (arguments.length < 2) {                                                                                        // 7324\n      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;                                          // 7325\n      d3_transitionInheritId = id;                                                                                     // 7326\n      d3_selection_each(this, function(node, i, j) {                                                                   // 7327\n        d3_transitionInherit = node.__transition__[id];                                                                // 7328\n        type.call(node, node.__data__, i, j);                                                                          // 7329\n      });                                                                                                              // 7330\n      d3_transitionInherit = inherit;                                                                                  // 7331\n      d3_transitionInheritId = inheritId;                                                                              // 7332\n    } else {                                                                                                           // 7333\n      d3_selection_each(this, function(node) {                                                                         // 7334\n        node.__transition__[id].event.on(type, listener);                                                              // 7335\n      });                                                                                                              // 7336\n    }                                                                                                                  // 7337\n    return this;                                                                                                       // 7338\n  };                                                                                                                   // 7339\n  d3_transitionPrototype.transition = function() {                                                                     // 7340\n    var id0 = this.id, id1 = ++d3_transitionId, subgroups = [], subgroup, group, node, transition;                     // 7341\n    for (var j = 0, m = this.length; j < m; j++) {                                                                     // 7342\n      subgroups.push(subgroup = []);                                                                                   // 7343\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {                                                 // 7344\n        if (node = group[i]) {                                                                                         // 7345\n          transition = Object.create(node.__transition__[id0]);                                                        // 7346\n          transition.delay += transition.duration;                                                                     // 7347\n          d3_transitionNode(node, i, id1, transition);                                                                 // 7348\n        }                                                                                                              // 7349\n        subgroup.push(node);                                                                                           // 7350\n      }                                                                                                                // 7351\n    }                                                                                                                  // 7352\n    return d3_transition(subgroups, id1);                                                                              // 7353\n  };                                                                                                                   // 7354\n  function d3_transitionNode(node, i, id, inherit) {                                                                   // 7355\n    var lock = node.__transition__ || (node.__transition__ = {                                                         // 7356\n      active: 0,                                                                                                       // 7357\n      count: 0                                                                                                         // 7358\n    }), transition = lock[id];                                                                                         // 7359\n    if (!transition) {                                                                                                 // 7360\n      var time = inherit.time;                                                                                         // 7361\n      transition = lock[id] = {                                                                                        // 7362\n        tween: new d3_Map(),                                                                                           // 7363\n        event: d3.dispatch(\"start\", \"end\"),                                                                            // 7364\n        time: time,                                                                                                    // 7365\n        ease: inherit.ease,                                                                                            // 7366\n        delay: inherit.delay,                                                                                          // 7367\n        duration: inherit.duration                                                                                     // 7368\n      };                                                                                                               // 7369\n      ++lock.count;                                                                                                    // 7370\n      d3.timer(function(elapsed) {                                                                                     // 7371\n        var d = node.__data__, ease = transition.ease, event = transition.event, delay = transition.delay, duration = transition.duration, tweened = [];\n        return delay <= elapsed ? start(elapsed) : d3.timer(start, delay, time), 1;                                    // 7373\n        function start(elapsed) {                                                                                      // 7374\n          if (lock.active > id) return stop();                                                                         // 7375\n          lock.active = id;                                                                                            // 7376\n          event.start.call(node, d, i);                                                                                // 7377\n          transition.tween.forEach(function(key, value) {                                                              // 7378\n            if (value = value.call(node, d, i)) {                                                                      // 7379\n              tweened.push(value);                                                                                     // 7380\n            }                                                                                                          // 7381\n          });                                                                                                          // 7382\n          if (!tick(elapsed)) d3.timer(tick, 0, time);                                                                 // 7383\n          return 1;                                                                                                    // 7384\n        }                                                                                                              // 7385\n        function tick(elapsed) {                                                                                       // 7386\n          if (lock.active !== id) return stop();                                                                       // 7387\n          var t = (elapsed - delay) / duration, e = ease(t), n = tweened.length;                                       // 7388\n          while (n > 0) {                                                                                              // 7389\n            tweened[--n].call(node, e);                                                                                // 7390\n          }                                                                                                            // 7391\n          if (t >= 1) {                                                                                                // 7392\n            stop();                                                                                                    // 7393\n            event.end.call(node, d, i);                                                                                // 7394\n            return 1;                                                                                                  // 7395\n          }                                                                                                            // 7396\n        }                                                                                                              // 7397\n        function stop() {                                                                                              // 7398\n          if (--lock.count) delete lock[id]; else delete node.__transition__;                                          // 7399\n          return 1;                                                                                                    // 7400\n        }                                                                                                              // 7401\n      }, 0, time);                                                                                                     // 7402\n      return transition;                                                                                               // 7403\n    }                                                                                                                  // 7404\n  }                                                                                                                    // 7405\n  d3.svg.axis = function() {                                                                                           // 7406\n    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, tickMajorSize = 6, tickMinorSize = 6, tickEndSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_, tickSubdivide = 0;\n    function axis(g) {                                                                                                 // 7408\n      g.each(function() {                                                                                              // 7409\n        var g = d3.select(this);                                                                                       // 7410\n        var ticks = tickValues == null ? scale.ticks ? scale.ticks.apply(scale, tickArguments_) : scale.domain() : tickValues, tickFormat = tickFormat_ == null ? scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments_) : String : tickFormat_;\n        var subticks = d3_svg_axisSubdivide(scale, ticks, tickSubdivide), subtick = g.selectAll(\".tick.minor\").data(subticks, String), subtickEnter = subtick.enter().insert(\"line\", \".tick\").attr(\"class\", \"tick minor\").style(\"opacity\", 1e-6), subtickExit = d3.transition(subtick.exit()).style(\"opacity\", 1e-6).remove(), subtickUpdate = d3.transition(subtick).style(\"opacity\", 1);\n        var tick = g.selectAll(\".tick.major\").data(ticks, String), tickEnter = tick.enter().insert(\"g\", \"path\").attr(\"class\", \"tick major\").style(\"opacity\", 1e-6), tickExit = d3.transition(tick.exit()).style(\"opacity\", 1e-6).remove(), tickUpdate = d3.transition(tick).style(\"opacity\", 1), tickTransform;\n        var range = d3_scaleRange(scale), path = g.selectAll(\".domain\").data([ 0 ]), pathUpdate = (path.enter().append(\"path\").attr(\"class\", \"domain\"),\n        d3.transition(path));                                                                                          // 7415\n        var scale1 = scale.copy(), scale0 = this.__chart__ || scale1;                                                  // 7416\n        this.__chart__ = scale1;                                                                                       // 7417\n        tickEnter.append(\"line\");                                                                                      // 7418\n        tickEnter.append(\"text\");                                                                                      // 7419\n        var lineEnter = tickEnter.select(\"line\"), lineUpdate = tickUpdate.select(\"line\"), text = tick.select(\"text\").text(tickFormat), textEnter = tickEnter.select(\"text\"), textUpdate = tickUpdate.select(\"text\");\n        switch (orient) {                                                                                              // 7421\n         case \"bottom\":                                                                                                // 7422\n          {                                                                                                            // 7423\n            tickTransform = d3_svg_axisX;                                                                              // 7424\n            subtickEnter.attr(\"y2\", tickMinorSize);                                                                    // 7425\n            subtickUpdate.attr(\"x2\", 0).attr(\"y2\", tickMinorSize);                                                     // 7426\n            lineEnter.attr(\"y2\", tickMajorSize);                                                                       // 7427\n            textEnter.attr(\"y\", Math.max(tickMajorSize, 0) + tickPadding);                                             // 7428\n            lineUpdate.attr(\"x2\", 0).attr(\"y2\", tickMajorSize);                                                        // 7429\n            textUpdate.attr(\"x\", 0).attr(\"y\", Math.max(tickMajorSize, 0) + tickPadding);                               // 7430\n            text.attr(\"dy\", \".71em\").style(\"text-anchor\", \"middle\");                                                   // 7431\n            pathUpdate.attr(\"d\", \"M\" + range[0] + \",\" + tickEndSize + \"V0H\" + range[1] + \"V\" + tickEndSize);           // 7432\n            break;                                                                                                     // 7433\n          }                                                                                                            // 7434\n                                                                                                                       // 7435\n         case \"top\":                                                                                                   // 7436\n          {                                                                                                            // 7437\n            tickTransform = d3_svg_axisX;                                                                              // 7438\n            subtickEnter.attr(\"y2\", -tickMinorSize);                                                                   // 7439\n            subtickUpdate.attr(\"x2\", 0).attr(\"y2\", -tickMinorSize);                                                    // 7440\n            lineEnter.attr(\"y2\", -tickMajorSize);                                                                      // 7441\n            textEnter.attr(\"y\", -(Math.max(tickMajorSize, 0) + tickPadding));                                          // 7442\n            lineUpdate.attr(\"x2\", 0).attr(\"y2\", -tickMajorSize);                                                       // 7443\n            textUpdate.attr(\"x\", 0).attr(\"y\", -(Math.max(tickMajorSize, 0) + tickPadding));                            // 7444\n            text.attr(\"dy\", \"0em\").style(\"text-anchor\", \"middle\");                                                     // 7445\n            pathUpdate.attr(\"d\", \"M\" + range[0] + \",\" + -tickEndSize + \"V0H\" + range[1] + \"V\" + -tickEndSize);         // 7446\n            break;                                                                                                     // 7447\n          }                                                                                                            // 7448\n                                                                                                                       // 7449\n         case \"left\":                                                                                                  // 7450\n          {                                                                                                            // 7451\n            tickTransform = d3_svg_axisY;                                                                              // 7452\n            subtickEnter.attr(\"x2\", -tickMinorSize);                                                                   // 7453\n            subtickUpdate.attr(\"x2\", -tickMinorSize).attr(\"y2\", 0);                                                    // 7454\n            lineEnter.attr(\"x2\", -tickMajorSize);                                                                      // 7455\n            textEnter.attr(\"x\", -(Math.max(tickMajorSize, 0) + tickPadding));                                          // 7456\n            lineUpdate.attr(\"x2\", -tickMajorSize).attr(\"y2\", 0);                                                       // 7457\n            textUpdate.attr(\"x\", -(Math.max(tickMajorSize, 0) + tickPadding)).attr(\"y\", 0);                            // 7458\n            text.attr(\"dy\", \".32em\").style(\"text-anchor\", \"end\");                                                      // 7459\n            pathUpdate.attr(\"d\", \"M\" + -tickEndSize + \",\" + range[0] + \"H0V\" + range[1] + \"H\" + -tickEndSize);         // 7460\n            break;                                                                                                     // 7461\n          }                                                                                                            // 7462\n                                                                                                                       // 7463\n         case \"right\":                                                                                                 // 7464\n          {                                                                                                            // 7465\n            tickTransform = d3_svg_axisY;                                                                              // 7466\n            subtickEnter.attr(\"x2\", tickMinorSize);                                                                    // 7467\n            subtickUpdate.attr(\"x2\", tickMinorSize).attr(\"y2\", 0);                                                     // 7468\n            lineEnter.attr(\"x2\", tickMajorSize);                                                                       // 7469\n            textEnter.attr(\"x\", Math.max(tickMajorSize, 0) + tickPadding);                                             // 7470\n            lineUpdate.attr(\"x2\", tickMajorSize).attr(\"y2\", 0);                                                        // 7471\n            textUpdate.attr(\"x\", Math.max(tickMajorSize, 0) + tickPadding).attr(\"y\", 0);                               // 7472\n            text.attr(\"dy\", \".32em\").style(\"text-anchor\", \"start\");                                                    // 7473\n            pathUpdate.attr(\"d\", \"M\" + tickEndSize + \",\" + range[0] + \"H0V\" + range[1] + \"H\" + tickEndSize);           // 7474\n            break;                                                                                                     // 7475\n          }                                                                                                            // 7476\n        }                                                                                                              // 7477\n        if (scale.ticks) {                                                                                             // 7478\n          tickEnter.call(tickTransform, scale0);                                                                       // 7479\n          tickUpdate.call(tickTransform, scale1);                                                                      // 7480\n          tickExit.call(tickTransform, scale1);                                                                        // 7481\n          subtickEnter.call(tickTransform, scale0);                                                                    // 7482\n          subtickUpdate.call(tickTransform, scale1);                                                                   // 7483\n          subtickExit.call(tickTransform, scale1);                                                                     // 7484\n        } else {                                                                                                       // 7485\n          var dx = scale1.rangeBand() / 2, x = function(d) {                                                           // 7486\n            return scale1(d) + dx;                                                                                     // 7487\n          };                                                                                                           // 7488\n          tickEnter.call(tickTransform, x);                                                                            // 7489\n          tickUpdate.call(tickTransform, x);                                                                           // 7490\n        }                                                                                                              // 7491\n      });                                                                                                              // 7492\n    }                                                                                                                  // 7493\n    axis.scale = function(x) {                                                                                         // 7494\n      if (!arguments.length) return scale;                                                                             // 7495\n      scale = x;                                                                                                       // 7496\n      return axis;                                                                                                     // 7497\n    };                                                                                                                 // 7498\n    axis.orient = function(x) {                                                                                        // 7499\n      if (!arguments.length) return orient;                                                                            // 7500\n      orient = x in d3_svg_axisOrients ? x + \"\" : d3_svg_axisDefaultOrient;                                            // 7501\n      return axis;                                                                                                     // 7502\n    };                                                                                                                 // 7503\n    axis.ticks = function() {                                                                                          // 7504\n      if (!arguments.length) return tickArguments_;                                                                    // 7505\n      tickArguments_ = arguments;                                                                                      // 7506\n      return axis;                                                                                                     // 7507\n    };                                                                                                                 // 7508\n    axis.tickValues = function(x) {                                                                                    // 7509\n      if (!arguments.length) return tickValues;                                                                        // 7510\n      tickValues = x;                                                                                                  // 7511\n      return axis;                                                                                                     // 7512\n    };                                                                                                                 // 7513\n    axis.tickFormat = function(x) {                                                                                    // 7514\n      if (!arguments.length) return tickFormat_;                                                                       // 7515\n      tickFormat_ = x;                                                                                                 // 7516\n      return axis;                                                                                                     // 7517\n    };                                                                                                                 // 7518\n    axis.tickSize = function(x, y) {                                                                                   // 7519\n      if (!arguments.length) return tickMajorSize;                                                                     // 7520\n      var n = arguments.length - 1;                                                                                    // 7521\n      tickMajorSize = +x;                                                                                              // 7522\n      tickMinorSize = n > 1 ? +y : tickMajorSize;                                                                      // 7523\n      tickEndSize = n > 0 ? +arguments[n] : tickMajorSize;                                                             // 7524\n      return axis;                                                                                                     // 7525\n    };                                                                                                                 // 7526\n    axis.tickPadding = function(x) {                                                                                   // 7527\n      if (!arguments.length) return tickPadding;                                                                       // 7528\n      tickPadding = +x;                                                                                                // 7529\n      return axis;                                                                                                     // 7530\n    };                                                                                                                 // 7531\n    axis.tickSubdivide = function(x) {                                                                                 // 7532\n      if (!arguments.length) return tickSubdivide;                                                                     // 7533\n      tickSubdivide = +x;                                                                                              // 7534\n      return axis;                                                                                                     // 7535\n    };                                                                                                                 // 7536\n    return axis;                                                                                                       // 7537\n  };                                                                                                                   // 7538\n  var d3_svg_axisDefaultOrient = \"bottom\", d3_svg_axisOrients = {                                                      // 7539\n    top: 1,                                                                                                            // 7540\n    right: 1,                                                                                                          // 7541\n    bottom: 1,                                                                                                         // 7542\n    left: 1                                                                                                            // 7543\n  };                                                                                                                   // 7544\n  function d3_svg_axisX(selection, x) {                                                                                // 7545\n    selection.attr(\"transform\", function(d) {                                                                          // 7546\n      return \"translate(\" + x(d) + \",0)\";                                                                              // 7547\n    });                                                                                                                // 7548\n  }                                                                                                                    // 7549\n  function d3_svg_axisY(selection, y) {                                                                                // 7550\n    selection.attr(\"transform\", function(d) {                                                                          // 7551\n      return \"translate(0,\" + y(d) + \")\";                                                                              // 7552\n    });                                                                                                                // 7553\n  }                                                                                                                    // 7554\n  function d3_svg_axisSubdivide(scale, ticks, m) {                                                                     // 7555\n    subticks = [];                                                                                                     // 7556\n    if (m && ticks.length > 1) {                                                                                       // 7557\n      var extent = d3_scaleExtent(scale.domain()), subticks, i = -1, n = ticks.length, d = (ticks[1] - ticks[0]) / ++m, j, v;\n      while (++i < n) {                                                                                                // 7559\n        for (j = m; --j > 0; ) {                                                                                       // 7560\n          if ((v = +ticks[i] - j * d) >= extent[0]) {                                                                  // 7561\n            subticks.push(v);                                                                                          // 7562\n          }                                                                                                            // 7563\n        }                                                                                                              // 7564\n      }                                                                                                                // 7565\n      for (--i, j = 0; ++j < m && (v = +ticks[i] + j * d) < extent[1]; ) {                                             // 7566\n        subticks.push(v);                                                                                              // 7567\n      }                                                                                                                // 7568\n    }                                                                                                                  // 7569\n    return subticks;                                                                                                   // 7570\n  }                                                                                                                    // 7571\n  d3.svg.brush = function() {                                                                                          // 7572\n    var event = d3_eventDispatch(brush, \"brushstart\", \"brush\", \"brushend\"), x = null, y = null, resizes = d3_svg_brushResizes[0], extent = [ [ 0, 0 ], [ 0, 0 ] ], extentDomain;\n    function brush(g) {                                                                                                // 7574\n      g.each(function() {                                                                                              // 7575\n        var g = d3.select(this), bg = g.selectAll(\".background\").data([ 0 ]), fg = g.selectAll(\".extent\").data([ 0 ]), tz = g.selectAll(\".resize\").data(resizes, String), e;\n        g.style(\"pointer-events\", \"all\").on(\"mousedown.brush\", brushstart).on(\"touchstart.brush\", brushstart);         // 7577\n        bg.enter().append(\"rect\").attr(\"class\", \"background\").style(\"visibility\", \"hidden\").style(\"cursor\", \"crosshair\");\n        fg.enter().append(\"rect\").attr(\"class\", \"extent\").style(\"cursor\", \"move\");                                     // 7579\n        tz.enter().append(\"g\").attr(\"class\", function(d) {                                                             // 7580\n          return \"resize \" + d;                                                                                        // 7581\n        }).style(\"cursor\", function(d) {                                                                               // 7582\n          return d3_svg_brushCursor[d];                                                                                // 7583\n        }).append(\"rect\").attr(\"x\", function(d) {                                                                      // 7584\n          return /[ew]$/.test(d) ? -3 : null;                                                                          // 7585\n        }).attr(\"y\", function(d) {                                                                                     // 7586\n          return /^[ns]/.test(d) ? -3 : null;                                                                          // 7587\n        }).attr(\"width\", 6).attr(\"height\", 6).style(\"visibility\", \"hidden\");                                           // 7588\n        tz.style(\"display\", brush.empty() ? \"none\" : null);                                                            // 7589\n        tz.exit().remove();                                                                                            // 7590\n        if (x) {                                                                                                       // 7591\n          e = d3_scaleRange(x);                                                                                        // 7592\n          bg.attr(\"x\", e[0]).attr(\"width\", e[1] - e[0]);                                                               // 7593\n          redrawX(g);                                                                                                  // 7594\n        }                                                                                                              // 7595\n        if (y) {                                                                                                       // 7596\n          e = d3_scaleRange(y);                                                                                        // 7597\n          bg.attr(\"y\", e[0]).attr(\"height\", e[1] - e[0]);                                                              // 7598\n          redrawY(g);                                                                                                  // 7599\n        }                                                                                                              // 7600\n        redraw(g);                                                                                                     // 7601\n      });                                                                                                              // 7602\n    }                                                                                                                  // 7603\n    function redraw(g) {                                                                                               // 7604\n      g.selectAll(\".resize\").attr(\"transform\", function(d) {                                                           // 7605\n        return \"translate(\" + extent[+/e$/.test(d)][0] + \",\" + extent[+/^s/.test(d)][1] + \")\";                         // 7606\n      });                                                                                                              // 7607\n    }                                                                                                                  // 7608\n    function redrawX(g) {                                                                                              // 7609\n      g.select(\".extent\").attr(\"x\", extent[0][0]);                                                                     // 7610\n      g.selectAll(\".extent,.n>rect,.s>rect\").attr(\"width\", extent[1][0] - extent[0][0]);                               // 7611\n    }                                                                                                                  // 7612\n    function redrawY(g) {                                                                                              // 7613\n      g.select(\".extent\").attr(\"y\", extent[0][1]);                                                                     // 7614\n      g.selectAll(\".extent,.e>rect,.w>rect\").attr(\"height\", extent[1][1] - extent[0][1]);                              // 7615\n    }                                                                                                                  // 7616\n    function brushstart() {                                                                                            // 7617\n      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed(\"extent\"), center, origin = mouse(), offset;\n      var w = d3.select(d3_window).on(\"mousemove.brush\", brushmove).on(\"mouseup.brush\", brushend).on(\"touchmove.brush\", brushmove).on(\"touchend.brush\", brushend).on(\"keydown.brush\", keydown).on(\"keyup.brush\", keyup);\n      if (dragging) {                                                                                                  // 7620\n        origin[0] = extent[0][0] - origin[0];                                                                          // 7621\n        origin[1] = extent[0][1] - origin[1];                                                                          // 7622\n      } else if (resizing) {                                                                                           // 7623\n        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);                                                      // 7624\n        offset = [ extent[1 - ex][0] - origin[0], extent[1 - ey][1] - origin[1] ];                                     // 7625\n        origin[0] = extent[ex][0];                                                                                     // 7626\n        origin[1] = extent[ey][1];                                                                                     // 7627\n      } else if (d3.event.altKey) center = origin.slice();                                                             // 7628\n      g.style(\"pointer-events\", \"none\").selectAll(\".resize\").style(\"display\", null);                                   // 7629\n      d3.select(\"body\").style(\"cursor\", eventTarget.style(\"cursor\"));                                                  // 7630\n      event_({                                                                                                         // 7631\n        type: \"brushstart\"                                                                                             // 7632\n      });                                                                                                              // 7633\n      brushmove();                                                                                                     // 7634\n      d3_eventCancel();                                                                                                // 7635\n      function mouse() {                                                                                               // 7636\n        var touches = d3.event.changedTouches;                                                                         // 7637\n        return touches ? d3.touches(target, touches)[0] : d3.mouse(target);                                            // 7638\n      }                                                                                                                // 7639\n      function keydown() {                                                                                             // 7640\n        if (d3.event.keyCode == 32) {                                                                                  // 7641\n          if (!dragging) {                                                                                             // 7642\n            center = null;                                                                                             // 7643\n            origin[0] -= extent[1][0];                                                                                 // 7644\n            origin[1] -= extent[1][1];                                                                                 // 7645\n            dragging = 2;                                                                                              // 7646\n          }                                                                                                            // 7647\n          d3_eventCancel();                                                                                            // 7648\n        }                                                                                                              // 7649\n      }                                                                                                                // 7650\n      function keyup() {                                                                                               // 7651\n        if (d3.event.keyCode == 32 && dragging == 2) {                                                                 // 7652\n          origin[0] += extent[1][0];                                                                                   // 7653\n          origin[1] += extent[1][1];                                                                                   // 7654\n          dragging = 0;                                                                                                // 7655\n          d3_eventCancel();                                                                                            // 7656\n        }                                                                                                              // 7657\n      }                                                                                                                // 7658\n      function brushmove() {                                                                                           // 7659\n        var point = mouse(), moved = false;                                                                            // 7660\n        if (offset) {                                                                                                  // 7661\n          point[0] += offset[0];                                                                                       // 7662\n          point[1] += offset[1];                                                                                       // 7663\n        }                                                                                                              // 7664\n        if (!dragging) {                                                                                               // 7665\n          if (d3.event.altKey) {                                                                                       // 7666\n            if (!center) center = [ (extent[0][0] + extent[1][0]) / 2, (extent[0][1] + extent[1][1]) / 2 ];            // 7667\n            origin[0] = extent[+(point[0] < center[0])][0];                                                            // 7668\n            origin[1] = extent[+(point[1] < center[1])][1];                                                            // 7669\n          } else center = null;                                                                                        // 7670\n        }                                                                                                              // 7671\n        if (resizingX && move1(point, x, 0)) {                                                                         // 7672\n          redrawX(g);                                                                                                  // 7673\n          moved = true;                                                                                                // 7674\n        }                                                                                                              // 7675\n        if (resizingY && move1(point, y, 1)) {                                                                         // 7676\n          redrawY(g);                                                                                                  // 7677\n          moved = true;                                                                                                // 7678\n        }                                                                                                              // 7679\n        if (moved) {                                                                                                   // 7680\n          redraw(g);                                                                                                   // 7681\n          event_({                                                                                                     // 7682\n            type: \"brush\",                                                                                             // 7683\n            mode: dragging ? \"move\" : \"resize\"                                                                         // 7684\n          });                                                                                                          // 7685\n        }                                                                                                              // 7686\n      }                                                                                                                // 7687\n      function move1(point, scale, i) {                                                                                // 7688\n        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], size = extent[1][i] - extent[0][i], min, max;\n        if (dragging) {                                                                                                // 7690\n          r0 -= position;                                                                                              // 7691\n          r1 -= size + position;                                                                                       // 7692\n        }                                                                                                              // 7693\n        min = Math.max(r0, Math.min(r1, point[i]));                                                                    // 7694\n        if (dragging) {                                                                                                // 7695\n          max = (min += position) + size;                                                                              // 7696\n        } else {                                                                                                       // 7697\n          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));                                      // 7698\n          if (position < min) {                                                                                        // 7699\n            max = min;                                                                                                 // 7700\n            min = position;                                                                                            // 7701\n          } else {                                                                                                     // 7702\n            max = position;                                                                                            // 7703\n          }                                                                                                            // 7704\n        }                                                                                                              // 7705\n        if (extent[0][i] !== min || extent[1][i] !== max) {                                                            // 7706\n          extentDomain = null;                                                                                         // 7707\n          extent[0][i] = min;                                                                                          // 7708\n          extent[1][i] = max;                                                                                          // 7709\n          return true;                                                                                                 // 7710\n        }                                                                                                              // 7711\n      }                                                                                                                // 7712\n      function brushend() {                                                                                            // 7713\n        brushmove();                                                                                                   // 7714\n        g.style(\"pointer-events\", \"all\").selectAll(\".resize\").style(\"display\", brush.empty() ? \"none\" : null);         // 7715\n        d3.select(\"body\").style(\"cursor\", null);                                                                       // 7716\n        w.on(\"mousemove.brush\", null).on(\"mouseup.brush\", null).on(\"touchmove.brush\", null).on(\"touchend.brush\", null).on(\"keydown.brush\", null).on(\"keyup.brush\", null);\n        event_({                                                                                                       // 7718\n          type: \"brushend\"                                                                                             // 7719\n        });                                                                                                            // 7720\n        d3_eventCancel();                                                                                              // 7721\n      }                                                                                                                // 7722\n    }                                                                                                                  // 7723\n    brush.x = function(z) {                                                                                            // 7724\n      if (!arguments.length) return x;                                                                                 // 7725\n      x = z;                                                                                                           // 7726\n      resizes = d3_svg_brushResizes[!x << 1 | !y];                                                                     // 7727\n      return brush;                                                                                                    // 7728\n    };                                                                                                                 // 7729\n    brush.y = function(z) {                                                                                            // 7730\n      if (!arguments.length) return y;                                                                                 // 7731\n      y = z;                                                                                                           // 7732\n      resizes = d3_svg_brushResizes[!x << 1 | !y];                                                                     // 7733\n      return brush;                                                                                                    // 7734\n    };                                                                                                                 // 7735\n    brush.extent = function(z) {                                                                                       // 7736\n      var x0, x1, y0, y1, t;                                                                                           // 7737\n      if (!arguments.length) {                                                                                         // 7738\n        z = extentDomain || extent;                                                                                    // 7739\n        if (x) {                                                                                                       // 7740\n          x0 = z[0][0], x1 = z[1][0];                                                                                  // 7741\n          if (!extentDomain) {                                                                                         // 7742\n            x0 = extent[0][0], x1 = extent[1][0];                                                                      // 7743\n            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);                                                        // 7744\n            if (x1 < x0) t = x0, x0 = x1, x1 = t;                                                                      // 7745\n          }                                                                                                            // 7746\n        }                                                                                                              // 7747\n        if (y) {                                                                                                       // 7748\n          y0 = z[0][1], y1 = z[1][1];                                                                                  // 7749\n          if (!extentDomain) {                                                                                         // 7750\n            y0 = extent[0][1], y1 = extent[1][1];                                                                      // 7751\n            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);                                                        // 7752\n            if (y1 < y0) t = y0, y0 = y1, y1 = t;                                                                      // 7753\n          }                                                                                                            // 7754\n        }                                                                                                              // 7755\n        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];                                 // 7756\n      }                                                                                                                // 7757\n      extentDomain = [ [ 0, 0 ], [ 0, 0 ] ];                                                                           // 7758\n      if (x) {                                                                                                         // 7759\n        x0 = z[0], x1 = z[1];                                                                                          // 7760\n        if (y) x0 = x0[0], x1 = x1[0];                                                                                 // 7761\n        extentDomain[0][0] = x0, extentDomain[1][0] = x1;                                                              // 7762\n        if (x.invert) x0 = x(x0), x1 = x(x1);                                                                          // 7763\n        if (x1 < x0) t = x0, x0 = x1, x1 = t;                                                                          // 7764\n        extent[0][0] = x0 | 0, extent[1][0] = x1 | 0;                                                                  // 7765\n      }                                                                                                                // 7766\n      if (y) {                                                                                                         // 7767\n        y0 = z[0], y1 = z[1];                                                                                          // 7768\n        if (x) y0 = y0[1], y1 = y1[1];                                                                                 // 7769\n        extentDomain[0][1] = y0, extentDomain[1][1] = y1;                                                              // 7770\n        if (y.invert) y0 = y(y0), y1 = y(y1);                                                                          // 7771\n        if (y1 < y0) t = y0, y0 = y1, y1 = t;                                                                          // 7772\n        extent[0][1] = y0 | 0, extent[1][1] = y1 | 0;                                                                  // 7773\n      }                                                                                                                // 7774\n      return brush;                                                                                                    // 7775\n    };                                                                                                                 // 7776\n    brush.clear = function() {                                                                                         // 7777\n      extentDomain = null;                                                                                             // 7778\n      extent[0][0] = extent[0][1] = extent[1][0] = extent[1][1] = 0;                                                   // 7779\n      return brush;                                                                                                    // 7780\n    };                                                                                                                 // 7781\n    brush.empty = function() {                                                                                         // 7782\n      return x && extent[0][0] === extent[1][0] || y && extent[0][1] === extent[1][1];                                 // 7783\n    };                                                                                                                 // 7784\n    return d3.rebind(brush, event, \"on\");                                                                              // 7785\n  };                                                                                                                   // 7786\n  var d3_svg_brushCursor = {                                                                                           // 7787\n    n: \"ns-resize\",                                                                                                    // 7788\n    e: \"ew-resize\",                                                                                                    // 7789\n    s: \"ns-resize\",                                                                                                    // 7790\n    w: \"ew-resize\",                                                                                                    // 7791\n    nw: \"nwse-resize\",                                                                                                 // 7792\n    ne: \"nesw-resize\",                                                                                                 // 7793\n    se: \"nwse-resize\",                                                                                                 // 7794\n    sw: \"nesw-resize\"                                                                                                  // 7795\n  };                                                                                                                   // 7796\n  var d3_svg_brushResizes = [ [ \"n\", \"e\", \"s\", \"w\", \"nw\", \"ne\", \"se\", \"sw\" ], [ \"e\", \"w\" ], [ \"n\", \"s\" ], [] ];        // 7797\n  d3.time = {};                                                                                                        // 7798\n  var d3_time = Date, d3_time_daySymbols = [ \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\" ];\n  function d3_time_utc() {                                                                                             // 7800\n    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);                          // 7801\n  }                                                                                                                    // 7802\n  d3_time_utc.prototype = {                                                                                            // 7803\n    getDate: function() {                                                                                              // 7804\n      return this._.getUTCDate();                                                                                      // 7805\n    },                                                                                                                 // 7806\n    getDay: function() {                                                                                               // 7807\n      return this._.getUTCDay();                                                                                       // 7808\n    },                                                                                                                 // 7809\n    getFullYear: function() {                                                                                          // 7810\n      return this._.getUTCFullYear();                                                                                  // 7811\n    },                                                                                                                 // 7812\n    getHours: function() {                                                                                             // 7813\n      return this._.getUTCHours();                                                                                     // 7814\n    },                                                                                                                 // 7815\n    getMilliseconds: function() {                                                                                      // 7816\n      return this._.getUTCMilliseconds();                                                                              // 7817\n    },                                                                                                                 // 7818\n    getMinutes: function() {                                                                                           // 7819\n      return this._.getUTCMinutes();                                                                                   // 7820\n    },                                                                                                                 // 7821\n    getMonth: function() {                                                                                             // 7822\n      return this._.getUTCMonth();                                                                                     // 7823\n    },                                                                                                                 // 7824\n    getSeconds: function() {                                                                                           // 7825\n      return this._.getUTCSeconds();                                                                                   // 7826\n    },                                                                                                                 // 7827\n    getTime: function() {                                                                                              // 7828\n      return this._.getTime();                                                                                         // 7829\n    },                                                                                                                 // 7830\n    getTimezoneOffset: function() {                                                                                    // 7831\n      return 0;                                                                                                        // 7832\n    },                                                                                                                 // 7833\n    valueOf: function() {                                                                                              // 7834\n      return this._.valueOf();                                                                                         // 7835\n    },                                                                                                                 // 7836\n    setDate: function() {                                                                                              // 7837\n      d3_time_prototype.setUTCDate.apply(this._, arguments);                                                           // 7838\n    },                                                                                                                 // 7839\n    setDay: function() {                                                                                               // 7840\n      d3_time_prototype.setUTCDay.apply(this._, arguments);                                                            // 7841\n    },                                                                                                                 // 7842\n    setFullYear: function() {                                                                                          // 7843\n      d3_time_prototype.setUTCFullYear.apply(this._, arguments);                                                       // 7844\n    },                                                                                                                 // 7845\n    setHours: function() {                                                                                             // 7846\n      d3_time_prototype.setUTCHours.apply(this._, arguments);                                                          // 7847\n    },                                                                                                                 // 7848\n    setMilliseconds: function() {                                                                                      // 7849\n      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);                                                   // 7850\n    },                                                                                                                 // 7851\n    setMinutes: function() {                                                                                           // 7852\n      d3_time_prototype.setUTCMinutes.apply(this._, arguments);                                                        // 7853\n    },                                                                                                                 // 7854\n    setMonth: function() {                                                                                             // 7855\n      d3_time_prototype.setUTCMonth.apply(this._, arguments);                                                          // 7856\n    },                                                                                                                 // 7857\n    setSeconds: function() {                                                                                           // 7858\n      d3_time_prototype.setUTCSeconds.apply(this._, arguments);                                                        // 7859\n    },                                                                                                                 // 7860\n    setTime: function() {                                                                                              // 7861\n      d3_time_prototype.setTime.apply(this._, arguments);                                                              // 7862\n    }                                                                                                                  // 7863\n  };                                                                                                                   // 7864\n  var d3_time_prototype = Date.prototype;                                                                              // 7865\n  var d3_time_formatDateTime = \"%a %b %e %X %Y\", d3_time_formatDate = \"%m/%d/%Y\", d3_time_formatTime = \"%H:%M:%S\";     // 7866\n  var d3_time_days = [ \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\" ], d3_time_dayAbbreviations = [ \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\" ], d3_time_months = [ \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ], d3_time_monthAbbreviations = [ \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\" ];\n  function d3_time_interval(local, step, number) {                                                                     // 7868\n    function round(date) {                                                                                             // 7869\n      var d0 = local(date), d1 = offset(d0, 1);                                                                        // 7870\n      return date - d0 < d1 - date ? d0 : d1;                                                                          // 7871\n    }                                                                                                                  // 7872\n    function ceil(date) {                                                                                              // 7873\n      step(date = local(new d3_time(date - 1)), 1);                                                                    // 7874\n      return date;                                                                                                     // 7875\n    }                                                                                                                  // 7876\n    function offset(date, k) {                                                                                         // 7877\n      step(date = new d3_time(+date), k);                                                                              // 7878\n      return date;                                                                                                     // 7879\n    }                                                                                                                  // 7880\n    function range(t0, t1, dt) {                                                                                       // 7881\n      var time = ceil(t0), times = [];                                                                                 // 7882\n      if (dt > 1) {                                                                                                    // 7883\n        while (time < t1) {                                                                                            // 7884\n          if (!(number(time) % dt)) times.push(new Date(+time));                                                       // 7885\n          step(time, 1);                                                                                               // 7886\n        }                                                                                                              // 7887\n      } else {                                                                                                         // 7888\n        while (time < t1) times.push(new Date(+time)), step(time, 1);                                                  // 7889\n      }                                                                                                                // 7890\n      return times;                                                                                                    // 7891\n    }                                                                                                                  // 7892\n    function range_utc(t0, t1, dt) {                                                                                   // 7893\n      try {                                                                                                            // 7894\n        d3_time = d3_time_utc;                                                                                         // 7895\n        var utc = new d3_time_utc();                                                                                   // 7896\n        utc._ = t0;                                                                                                    // 7897\n        return range(utc, t1, dt);                                                                                     // 7898\n      } finally {                                                                                                      // 7899\n        d3_time = Date;                                                                                                // 7900\n      }                                                                                                                // 7901\n    }                                                                                                                  // 7902\n    local.floor = local;                                                                                               // 7903\n    local.round = round;                                                                                               // 7904\n    local.ceil = ceil;                                                                                                 // 7905\n    local.offset = offset;                                                                                             // 7906\n    local.range = range;                                                                                               // 7907\n    var utc = local.utc = d3_time_interval_utc(local);                                                                 // 7908\n    utc.floor = utc;                                                                                                   // 7909\n    utc.round = d3_time_interval_utc(round);                                                                           // 7910\n    utc.ceil = d3_time_interval_utc(ceil);                                                                             // 7911\n    utc.offset = d3_time_interval_utc(offset);                                                                         // 7912\n    utc.range = range_utc;                                                                                             // 7913\n    return local;                                                                                                      // 7914\n  }                                                                                                                    // 7915\n  function d3_time_interval_utc(method) {                                                                              // 7916\n    return function(date, k) {                                                                                         // 7917\n      try {                                                                                                            // 7918\n        d3_time = d3_time_utc;                                                                                         // 7919\n        var utc = new d3_time_utc();                                                                                   // 7920\n        utc._ = date;                                                                                                  // 7921\n        return method(utc, k)._;                                                                                       // 7922\n      } finally {                                                                                                      // 7923\n        d3_time = Date;                                                                                                // 7924\n      }                                                                                                                // 7925\n    };                                                                                                                 // 7926\n  }                                                                                                                    // 7927\n  d3.time.year = d3_time_interval(function(date) {                                                                     // 7928\n    date = d3.time.day(date);                                                                                          // 7929\n    date.setMonth(0, 1);                                                                                               // 7930\n    return date;                                                                                                       // 7931\n  }, function(date, offset) {                                                                                          // 7932\n    date.setFullYear(date.getFullYear() + offset);                                                                     // 7933\n  }, function(date) {                                                                                                  // 7934\n    return date.getFullYear();                                                                                         // 7935\n  });                                                                                                                  // 7936\n  d3.time.years = d3.time.year.range;                                                                                  // 7937\n  d3.time.years.utc = d3.time.year.utc.range;                                                                          // 7938\n  d3.time.day = d3_time_interval(function(date) {                                                                      // 7939\n    var day = new d3_time(1970, 0);                                                                                    // 7940\n    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());                                              // 7941\n    return day;                                                                                                        // 7942\n  }, function(date, offset) {                                                                                          // 7943\n    date.setDate(date.getDate() + offset);                                                                             // 7944\n  }, function(date) {                                                                                                  // 7945\n    return date.getDate() - 1;                                                                                         // 7946\n  });                                                                                                                  // 7947\n  d3.time.days = d3.time.day.range;                                                                                    // 7948\n  d3.time.days.utc = d3.time.day.utc.range;                                                                            // 7949\n  d3.time.dayOfYear = function(date) {                                                                                 // 7950\n    var year = d3.time.year(date);                                                                                     // 7951\n    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);            // 7952\n  };                                                                                                                   // 7953\n  d3_time_daySymbols.forEach(function(day, i) {                                                                        // 7954\n    day = day.toLowerCase();                                                                                           // 7955\n    i = 7 - i;                                                                                                         // 7956\n    var interval = d3.time[day] = d3_time_interval(function(date) {                                                    // 7957\n      (date = d3.time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);                                    // 7958\n      return date;                                                                                                     // 7959\n    }, function(date, offset) {                                                                                        // 7960\n      date.setDate(date.getDate() + Math.floor(offset) * 7);                                                           // 7961\n    }, function(date) {                                                                                                // 7962\n      var day = d3.time.year(date).getDay();                                                                           // 7963\n      return Math.floor((d3.time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);                                  // 7964\n    });                                                                                                                // 7965\n    d3.time[day + \"s\"] = interval.range;                                                                               // 7966\n    d3.time[day + \"s\"].utc = interval.utc.range;                                                                       // 7967\n    d3.time[day + \"OfYear\"] = function(date) {                                                                         // 7968\n      var day = d3.time.year(date).getDay();                                                                           // 7969\n      return Math.floor((d3.time.dayOfYear(date) + (day + i) % 7) / 7);                                                // 7970\n    };                                                                                                                 // 7971\n  });                                                                                                                  // 7972\n  d3.time.week = d3.time.sunday;                                                                                       // 7973\n  d3.time.weeks = d3.time.sunday.range;                                                                                // 7974\n  d3.time.weeks.utc = d3.time.sunday.utc.range;                                                                        // 7975\n  d3.time.weekOfYear = d3.time.sundayOfYear;                                                                           // 7976\n  d3.time.format = function(template) {                                                                                // 7977\n    var n = template.length;                                                                                           // 7978\n    function format(date) {                                                                                            // 7979\n      var string = [], i = -1, j = 0, c, p, f;                                                                         // 7980\n      while (++i < n) {                                                                                                // 7981\n        if (template.charCodeAt(i) === 37) {                                                                           // 7982\n          string.push(template.substring(j, i));                                                                       // 7983\n          if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);                    // 7984\n          if (f = d3_time_formats[c]) c = f(date, p == null ? c === \"e\" ? \" \" : \"0\" : p);                              // 7985\n          string.push(c);                                                                                              // 7986\n          j = i + 1;                                                                                                   // 7987\n        }                                                                                                              // 7988\n      }                                                                                                                // 7989\n      string.push(template.substring(j, i));                                                                           // 7990\n      return string.join(\"\");                                                                                          // 7991\n    }                                                                                                                  // 7992\n    format.parse = function(string) {                                                                                  // 7993\n      var d = {                                                                                                        // 7994\n        y: 1900,                                                                                                       // 7995\n        m: 0,                                                                                                          // 7996\n        d: 1,                                                                                                          // 7997\n        H: 0,                                                                                                          // 7998\n        M: 0,                                                                                                          // 7999\n        S: 0,                                                                                                          // 8000\n        L: 0                                                                                                           // 8001\n      }, i = d3_time_parse(d, template, string, 0);                                                                    // 8002\n      if (i != string.length) return null;                                                                             // 8003\n      if (\"p\" in d) d.H = d.H % 12 + d.p * 12;                                                                         // 8004\n      var date = new d3_time();                                                                                        // 8005\n      date.setFullYear(d.y, d.m, d.d);                                                                                 // 8006\n      date.setHours(d.H, d.M, d.S, d.L);                                                                               // 8007\n      return date;                                                                                                     // 8008\n    };                                                                                                                 // 8009\n    format.toString = function() {                                                                                     // 8010\n      return template;                                                                                                 // 8011\n    };                                                                                                                 // 8012\n    return format;                                                                                                     // 8013\n  };                                                                                                                   // 8014\n  function d3_time_parse(date, template, string, j) {                                                                  // 8015\n    var c, p, i = 0, n = template.length, m = string.length;                                                           // 8016\n    while (i < n) {                                                                                                    // 8017\n      if (j >= m) return -1;                                                                                           // 8018\n      c = template.charCodeAt(i++);                                                                                    // 8019\n      if (c === 37) {                                                                                                  // 8020\n        p = d3_time_parsers[template.charAt(i++)];                                                                     // 8021\n        if (!p || (j = p(date, string, j)) < 0) return -1;                                                             // 8022\n      } else if (c != string.charCodeAt(j++)) {                                                                        // 8023\n        return -1;                                                                                                     // 8024\n      }                                                                                                                // 8025\n    }                                                                                                                  // 8026\n    return j;                                                                                                          // 8027\n  }                                                                                                                    // 8028\n  function d3_time_formatRe(names) {                                                                                   // 8029\n    return new RegExp(\"^(?:\" + names.map(d3.requote).join(\"|\") + \")\", \"i\");                                            // 8030\n  }                                                                                                                    // 8031\n  function d3_time_formatLookup(names) {                                                                               // 8032\n    var map = new d3_Map(), i = -1, n = names.length;                                                                  // 8033\n    while (++i < n) map.set(names[i].toLowerCase(), i);                                                                // 8034\n    return map;                                                                                                        // 8035\n  }                                                                                                                    // 8036\n  function d3_time_formatPad(value, fill, width) {                                                                     // 8037\n    value += \"\";                                                                                                       // 8038\n    var length = value.length;                                                                                         // 8039\n    return length < width ? new Array(width - length + 1).join(fill) + value : value;                                  // 8040\n  }                                                                                                                    // 8041\n  var d3_time_dayRe = d3_time_formatRe(d3_time_days), d3_time_dayAbbrevRe = d3_time_formatRe(d3_time_dayAbbreviations), d3_time_monthRe = d3_time_formatRe(d3_time_months), d3_time_monthLookup = d3_time_formatLookup(d3_time_months), d3_time_monthAbbrevRe = d3_time_formatRe(d3_time_monthAbbreviations), d3_time_monthAbbrevLookup = d3_time_formatLookup(d3_time_monthAbbreviations);\n  var d3_time_formatPads = {                                                                                           // 8043\n    \"-\": \"\",                                                                                                           // 8044\n    _: \" \",                                                                                                            // 8045\n    \"0\": \"0\"                                                                                                           // 8046\n  };                                                                                                                   // 8047\n  var d3_time_formats = {                                                                                              // 8048\n    a: function(d) {                                                                                                   // 8049\n      return d3_time_dayAbbreviations[d.getDay()];                                                                     // 8050\n    },                                                                                                                 // 8051\n    A: function(d) {                                                                                                   // 8052\n      return d3_time_days[d.getDay()];                                                                                 // 8053\n    },                                                                                                                 // 8054\n    b: function(d) {                                                                                                   // 8055\n      return d3_time_monthAbbreviations[d.getMonth()];                                                                 // 8056\n    },                                                                                                                 // 8057\n    B: function(d) {                                                                                                   // 8058\n      return d3_time_months[d.getMonth()];                                                                             // 8059\n    },                                                                                                                 // 8060\n    c: d3.time.format(d3_time_formatDateTime),                                                                         // 8061\n    d: function(d, p) {                                                                                                // 8062\n      return d3_time_formatPad(d.getDate(), p, 2);                                                                     // 8063\n    },                                                                                                                 // 8064\n    e: function(d, p) {                                                                                                // 8065\n      return d3_time_formatPad(d.getDate(), p, 2);                                                                     // 8066\n    },                                                                                                                 // 8067\n    H: function(d, p) {                                                                                                // 8068\n      return d3_time_formatPad(d.getHours(), p, 2);                                                                    // 8069\n    },                                                                                                                 // 8070\n    I: function(d, p) {                                                                                                // 8071\n      return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);                                                         // 8072\n    },                                                                                                                 // 8073\n    j: function(d, p) {                                                                                                // 8074\n      return d3_time_formatPad(1 + d3.time.dayOfYear(d), p, 3);                                                        // 8075\n    },                                                                                                                 // 8076\n    L: function(d, p) {                                                                                                // 8077\n      return d3_time_formatPad(d.getMilliseconds(), p, 3);                                                             // 8078\n    },                                                                                                                 // 8079\n    m: function(d, p) {                                                                                                // 8080\n      return d3_time_formatPad(d.getMonth() + 1, p, 2);                                                                // 8081\n    },                                                                                                                 // 8082\n    M: function(d, p) {                                                                                                // 8083\n      return d3_time_formatPad(d.getMinutes(), p, 2);                                                                  // 8084\n    },                                                                                                                 // 8085\n    p: function(d) {                                                                                                   // 8086\n      return d.getHours() >= 12 ? \"PM\" : \"AM\";                                                                         // 8087\n    },                                                                                                                 // 8088\n    S: function(d, p) {                                                                                                // 8089\n      return d3_time_formatPad(d.getSeconds(), p, 2);                                                                  // 8090\n    },                                                                                                                 // 8091\n    U: function(d, p) {                                                                                                // 8092\n      return d3_time_formatPad(d3.time.sundayOfYear(d), p, 2);                                                         // 8093\n    },                                                                                                                 // 8094\n    w: function(d) {                                                                                                   // 8095\n      return d.getDay();                                                                                               // 8096\n    },                                                                                                                 // 8097\n    W: function(d, p) {                                                                                                // 8098\n      return d3_time_formatPad(d3.time.mondayOfYear(d), p, 2);                                                         // 8099\n    },                                                                                                                 // 8100\n    x: d3.time.format(d3_time_formatDate),                                                                             // 8101\n    X: d3.time.format(d3_time_formatTime),                                                                             // 8102\n    y: function(d, p) {                                                                                                // 8103\n      return d3_time_formatPad(d.getFullYear() % 100, p, 2);                                                           // 8104\n    },                                                                                                                 // 8105\n    Y: function(d, p) {                                                                                                // 8106\n      return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);                                                           // 8107\n    },                                                                                                                 // 8108\n    Z: d3_time_zone,                                                                                                   // 8109\n    \"%\": function() {                                                                                                  // 8110\n      return \"%\";                                                                                                      // 8111\n    }                                                                                                                  // 8112\n  };                                                                                                                   // 8113\n  var d3_time_parsers = {                                                                                              // 8114\n    a: d3_time_parseWeekdayAbbrev,                                                                                     // 8115\n    A: d3_time_parseWeekday,                                                                                           // 8116\n    b: d3_time_parseMonthAbbrev,                                                                                       // 8117\n    B: d3_time_parseMonth,                                                                                             // 8118\n    c: d3_time_parseLocaleFull,                                                                                        // 8119\n    d: d3_time_parseDay,                                                                                               // 8120\n    e: d3_time_parseDay,                                                                                               // 8121\n    H: d3_time_parseHour24,                                                                                            // 8122\n    I: d3_time_parseHour24,                                                                                            // 8123\n    L: d3_time_parseMilliseconds,                                                                                      // 8124\n    m: d3_time_parseMonthNumber,                                                                                       // 8125\n    M: d3_time_parseMinutes,                                                                                           // 8126\n    p: d3_time_parseAmPm,                                                                                              // 8127\n    S: d3_time_parseSeconds,                                                                                           // 8128\n    x: d3_time_parseLocaleDate,                                                                                        // 8129\n    X: d3_time_parseLocaleTime,                                                                                        // 8130\n    y: d3_time_parseYear,                                                                                              // 8131\n    Y: d3_time_parseFullYear                                                                                           // 8132\n  };                                                                                                                   // 8133\n  function d3_time_parseWeekdayAbbrev(date, string, i) {                                                               // 8134\n    d3_time_dayAbbrevRe.lastIndex = 0;                                                                                 // 8135\n    var n = d3_time_dayAbbrevRe.exec(string.substring(i));                                                             // 8136\n    return n ? i += n[0].length : -1;                                                                                  // 8137\n  }                                                                                                                    // 8138\n  function d3_time_parseWeekday(date, string, i) {                                                                     // 8139\n    d3_time_dayRe.lastIndex = 0;                                                                                       // 8140\n    var n = d3_time_dayRe.exec(string.substring(i));                                                                   // 8141\n    return n ? i += n[0].length : -1;                                                                                  // 8142\n  }                                                                                                                    // 8143\n  function d3_time_parseMonthAbbrev(date, string, i) {                                                                 // 8144\n    d3_time_monthAbbrevRe.lastIndex = 0;                                                                               // 8145\n    var n = d3_time_monthAbbrevRe.exec(string.substring(i));                                                           // 8146\n    return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i += n[0].length) : -1;                    // 8147\n  }                                                                                                                    // 8148\n  function d3_time_parseMonth(date, string, i) {                                                                       // 8149\n    d3_time_monthRe.lastIndex = 0;                                                                                     // 8150\n    var n = d3_time_monthRe.exec(string.substring(i));                                                                 // 8151\n    return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i += n[0].length) : -1;                          // 8152\n  }                                                                                                                    // 8153\n  function d3_time_parseLocaleFull(date, string, i) {                                                                  // 8154\n    return d3_time_parse(date, d3_time_formats.c.toString(), string, i);                                               // 8155\n  }                                                                                                                    // 8156\n  function d3_time_parseLocaleDate(date, string, i) {                                                                  // 8157\n    return d3_time_parse(date, d3_time_formats.x.toString(), string, i);                                               // 8158\n  }                                                                                                                    // 8159\n  function d3_time_parseLocaleTime(date, string, i) {                                                                  // 8160\n    return d3_time_parse(date, d3_time_formats.X.toString(), string, i);                                               // 8161\n  }                                                                                                                    // 8162\n  function d3_time_parseFullYear(date, string, i) {                                                                    // 8163\n    d3_time_numberRe.lastIndex = 0;                                                                                    // 8164\n    var n = d3_time_numberRe.exec(string.substring(i, i + 4));                                                         // 8165\n    return n ? (date.y = +n[0], i += n[0].length) : -1;                                                                // 8166\n  }                                                                                                                    // 8167\n  function d3_time_parseYear(date, string, i) {                                                                        // 8168\n    d3_time_numberRe.lastIndex = 0;                                                                                    // 8169\n    var n = d3_time_numberRe.exec(string.substring(i, i + 2));                                                         // 8170\n    return n ? (date.y = d3_time_expandYear(+n[0]), i += n[0].length) : -1;                                            // 8171\n  }                                                                                                                    // 8172\n  function d3_time_expandYear(d) {                                                                                     // 8173\n    return d + (d > 68 ? 1900 : 2e3);                                                                                  // 8174\n  }                                                                                                                    // 8175\n  function d3_time_parseMonthNumber(date, string, i) {                                                                 // 8176\n    d3_time_numberRe.lastIndex = 0;                                                                                    // 8177\n    var n = d3_time_numberRe.exec(string.substring(i, i + 2));                                                         // 8178\n    return n ? (date.m = n[0] - 1, i += n[0].length) : -1;                                                             // 8179\n  }                                                                                                                    // 8180\n  function d3_time_parseDay(date, string, i) {                                                                         // 8181\n    d3_time_numberRe.lastIndex = 0;                                                                                    // 8182\n    var n = d3_time_numberRe.exec(string.substring(i, i + 2));                                                         // 8183\n    return n ? (date.d = +n[0], i += n[0].length) : -1;                                                                // 8184\n  }                                                                                                                    // 8185\n  function d3_time_parseHour24(date, string, i) {                                                                      // 8186\n    d3_time_numberRe.lastIndex = 0;                                                                                    // 8187\n    var n = d3_time_numberRe.exec(string.substring(i, i + 2));                                                         // 8188\n    return n ? (date.H = +n[0], i += n[0].length) : -1;                                                                // 8189\n  }                                                                                                                    // 8190\n  function d3_time_parseMinutes(date, string, i) {                                                                     // 8191\n    d3_time_numberRe.lastIndex = 0;                                                                                    // 8192\n    var n = d3_time_numberRe.exec(string.substring(i, i + 2));                                                         // 8193\n    return n ? (date.M = +n[0], i += n[0].length) : -1;                                                                // 8194\n  }                                                                                                                    // 8195\n  function d3_time_parseSeconds(date, string, i) {                                                                     // 8196\n    d3_time_numberRe.lastIndex = 0;                                                                                    // 8197\n    var n = d3_time_numberRe.exec(string.substring(i, i + 2));                                                         // 8198\n    return n ? (date.S = +n[0], i += n[0].length) : -1;                                                                // 8199\n  }                                                                                                                    // 8200\n  function d3_time_parseMilliseconds(date, string, i) {                                                                // 8201\n    d3_time_numberRe.lastIndex = 0;                                                                                    // 8202\n    var n = d3_time_numberRe.exec(string.substring(i, i + 3));                                                         // 8203\n    return n ? (date.L = +n[0], i += n[0].length) : -1;                                                                // 8204\n  }                                                                                                                    // 8205\n  var d3_time_numberRe = /^\\s*\\d+/;                                                                                    // 8206\n  function d3_time_parseAmPm(date, string, i) {                                                                        // 8207\n    var n = d3_time_amPmLookup.get(string.substring(i, i += 2).toLowerCase());                                         // 8208\n    return n == null ? -1 : (date.p = n, i);                                                                           // 8209\n  }                                                                                                                    // 8210\n  var d3_time_amPmLookup = d3.map({                                                                                    // 8211\n    am: 0,                                                                                                             // 8212\n    pm: 1                                                                                                              // 8213\n  });                                                                                                                  // 8214\n  function d3_time_zone(d) {                                                                                           // 8215\n    var z = d.getTimezoneOffset(), zs = z > 0 ? \"-\" : \"+\", zh = ~~(Math.abs(z) / 60), zm = Math.abs(z) % 60;           // 8216\n    return zs + d3_time_formatPad(zh, \"0\", 2) + d3_time_formatPad(zm, \"0\", 2);                                         // 8217\n  }                                                                                                                    // 8218\n  d3.time.format.utc = function(template) {                                                                            // 8219\n    var local = d3.time.format(template);                                                                              // 8220\n    function format(date) {                                                                                            // 8221\n      try {                                                                                                            // 8222\n        d3_time = d3_time_utc;                                                                                         // 8223\n        var utc = new d3_time();                                                                                       // 8224\n        utc._ = date;                                                                                                  // 8225\n        return local(utc);                                                                                             // 8226\n      } finally {                                                                                                      // 8227\n        d3_time = Date;                                                                                                // 8228\n      }                                                                                                                // 8229\n    }                                                                                                                  // 8230\n    format.parse = function(string) {                                                                                  // 8231\n      try {                                                                                                            // 8232\n        d3_time = d3_time_utc;                                                                                         // 8233\n        var date = local.parse(string);                                                                                // 8234\n        return date && date._;                                                                                         // 8235\n      } finally {                                                                                                      // 8236\n        d3_time = Date;                                                                                                // 8237\n      }                                                                                                                // 8238\n    };                                                                                                                 // 8239\n    format.toString = local.toString;                                                                                  // 8240\n    return format;                                                                                                     // 8241\n  };                                                                                                                   // 8242\n  var d3_time_formatIso = d3.time.format.utc(\"%Y-%m-%dT%H:%M:%S.%LZ\");                                                 // 8243\n  d3.time.format.iso = Date.prototype.toISOString && +new Date(\"2000-01-01T00:00:00.000Z\") ? d3_time_formatIsoNative : d3_time_formatIso;\n  function d3_time_formatIsoNative(date) {                                                                             // 8245\n    return date.toISOString();                                                                                         // 8246\n  }                                                                                                                    // 8247\n  d3_time_formatIsoNative.parse = function(string) {                                                                   // 8248\n    var date = new Date(string);                                                                                       // 8249\n    return isNaN(date) ? null : date;                                                                                  // 8250\n  };                                                                                                                   // 8251\n  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;                                                       // 8252\n  d3.time.second = d3_time_interval(function(date) {                                                                   // 8253\n    return new d3_time(Math.floor(date / 1e3) * 1e3);                                                                  // 8254\n  }, function(date, offset) {                                                                                          // 8255\n    date.setTime(date.getTime() + Math.floor(offset) * 1e3);                                                           // 8256\n  }, function(date) {                                                                                                  // 8257\n    return date.getSeconds();                                                                                          // 8258\n  });                                                                                                                  // 8259\n  d3.time.seconds = d3.time.second.range;                                                                              // 8260\n  d3.time.seconds.utc = d3.time.second.utc.range;                                                                      // 8261\n  d3.time.minute = d3_time_interval(function(date) {                                                                   // 8262\n    return new d3_time(Math.floor(date / 6e4) * 6e4);                                                                  // 8263\n  }, function(date, offset) {                                                                                          // 8264\n    date.setTime(date.getTime() + Math.floor(offset) * 6e4);                                                           // 8265\n  }, function(date) {                                                                                                  // 8266\n    return date.getMinutes();                                                                                          // 8267\n  });                                                                                                                  // 8268\n  d3.time.minutes = d3.time.minute.range;                                                                              // 8269\n  d3.time.minutes.utc = d3.time.minute.utc.range;                                                                      // 8270\n  d3.time.hour = d3_time_interval(function(date) {                                                                     // 8271\n    var timezone = date.getTimezoneOffset() / 60;                                                                      // 8272\n    return new d3_time((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);                                        // 8273\n  }, function(date, offset) {                                                                                          // 8274\n    date.setTime(date.getTime() + Math.floor(offset) * 36e5);                                                          // 8275\n  }, function(date) {                                                                                                  // 8276\n    return date.getHours();                                                                                            // 8277\n  });                                                                                                                  // 8278\n  d3.time.hours = d3.time.hour.range;                                                                                  // 8279\n  d3.time.hours.utc = d3.time.hour.utc.range;                                                                          // 8280\n  d3.time.month = d3_time_interval(function(date) {                                                                    // 8281\n    date = d3.time.day(date);                                                                                          // 8282\n    date.setDate(1);                                                                                                   // 8283\n    return date;                                                                                                       // 8284\n  }, function(date, offset) {                                                                                          // 8285\n    date.setMonth(date.getMonth() + offset);                                                                           // 8286\n  }, function(date) {                                                                                                  // 8287\n    return date.getMonth();                                                                                            // 8288\n  });                                                                                                                  // 8289\n  d3.time.months = d3.time.month.range;                                                                                // 8290\n  d3.time.months.utc = d3.time.month.utc.range;                                                                        // 8291\n  function d3_time_scale(linear, methods, format) {                                                                    // 8292\n    function scale(x) {                                                                                                // 8293\n      return linear(x);                                                                                                // 8294\n    }                                                                                                                  // 8295\n    scale.invert = function(x) {                                                                                       // 8296\n      return d3_time_scaleDate(linear.invert(x));                                                                      // 8297\n    };                                                                                                                 // 8298\n    scale.domain = function(x) {                                                                                       // 8299\n      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);                                            // 8300\n      linear.domain(x);                                                                                                // 8301\n      return scale;                                                                                                    // 8302\n    };                                                                                                                 // 8303\n    scale.nice = function(m) {                                                                                         // 8304\n      return scale.domain(d3_scale_nice(scale.domain(), function() {                                                   // 8305\n        return m;                                                                                                      // 8306\n      }));                                                                                                             // 8307\n    };                                                                                                                 // 8308\n    scale.ticks = function(m, k) {                                                                                     // 8309\n      var extent = d3_time_scaleExtent(scale.domain());                                                                // 8310\n      if (typeof m !== \"function\") {                                                                                   // 8311\n        var span = extent[1] - extent[0], target = span / m, i = d3.bisect(d3_time_scaleSteps, target);                // 8312\n        if (i == d3_time_scaleSteps.length) return methods.year(extent, m);                                            // 8313\n        if (!i) return linear.ticks(m).map(d3_time_scaleDate);                                                         // 8314\n        if (Math.log(target / d3_time_scaleSteps[i - 1]) < Math.log(d3_time_scaleSteps[i] / target)) --i;              // 8315\n        m = methods[i];                                                                                                // 8316\n        k = m[1];                                                                                                      // 8317\n        m = m[0].range;                                                                                                // 8318\n      }                                                                                                                // 8319\n      return m(extent[0], new Date(+extent[1] + 1), k);                                                                // 8320\n    };                                                                                                                 // 8321\n    scale.tickFormat = function() {                                                                                    // 8322\n      return format;                                                                                                   // 8323\n    };                                                                                                                 // 8324\n    scale.copy = function() {                                                                                          // 8325\n      return d3_time_scale(linear.copy(), methods, format);                                                            // 8326\n    };                                                                                                                 // 8327\n    return d3.rebind(scale, linear, \"range\", \"rangeRound\", \"interpolate\", \"clamp\");                                    // 8328\n  }                                                                                                                    // 8329\n  function d3_time_scaleExtent(domain) {                                                                               // 8330\n    var start = domain[0], stop = domain[domain.length - 1];                                                           // 8331\n    return start < stop ? [ start, stop ] : [ stop, start ];                                                           // 8332\n  }                                                                                                                    // 8333\n  function d3_time_scaleDate(t) {                                                                                      // 8334\n    return new Date(t);                                                                                                // 8335\n  }                                                                                                                    // 8336\n  function d3_time_scaleFormat(formats) {                                                                              // 8337\n    return function(date) {                                                                                            // 8338\n      var i = formats.length - 1, f = formats[i];                                                                      // 8339\n      while (!f[1](date)) f = formats[--i];                                                                            // 8340\n      return f[0](date);                                                                                               // 8341\n    };                                                                                                                 // 8342\n  }                                                                                                                    // 8343\n  function d3_time_scaleSetYear(y) {                                                                                   // 8344\n    var d = new Date(y, 0, 1);                                                                                         // 8345\n    d.setFullYear(y);                                                                                                  // 8346\n    return d;                                                                                                          // 8347\n  }                                                                                                                    // 8348\n  function d3_time_scaleGetYear(d) {                                                                                   // 8349\n    var y = d.getFullYear(), d0 = d3_time_scaleSetYear(y), d1 = d3_time_scaleSetYear(y + 1);                           // 8350\n    return y + (d - d0) / (d1 - d0);                                                                                   // 8351\n  }                                                                                                                    // 8352\n  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];\n  var d3_time_scaleLocalMethods = [ [ d3.time.second, 1 ], [ d3.time.second, 5 ], [ d3.time.second, 15 ], [ d3.time.second, 30 ], [ d3.time.minute, 1 ], [ d3.time.minute, 5 ], [ d3.time.minute, 15 ], [ d3.time.minute, 30 ], [ d3.time.hour, 1 ], [ d3.time.hour, 3 ], [ d3.time.hour, 6 ], [ d3.time.hour, 12 ], [ d3.time.day, 1 ], [ d3.time.day, 2 ], [ d3.time.week, 1 ], [ d3.time.month, 1 ], [ d3.time.month, 3 ], [ d3.time.year, 1 ] ];\n  var d3_time_scaleLocalFormats = [ [ d3.time.format(\"%Y\"), d3_true ], [ d3.time.format(\"%B\"), function(d) {           // 8355\n    return d.getMonth();                                                                                               // 8356\n  } ], [ d3.time.format(\"%b %d\"), function(d) {                                                                        // 8357\n    return d.getDate() != 1;                                                                                           // 8358\n  } ], [ d3.time.format(\"%a %d\"), function(d) {                                                                        // 8359\n    return d.getDay() && d.getDate() != 1;                                                                             // 8360\n  } ], [ d3.time.format(\"%I %p\"), function(d) {                                                                        // 8361\n    return d.getHours();                                                                                               // 8362\n  } ], [ d3.time.format(\"%I:%M\"), function(d) {                                                                        // 8363\n    return d.getMinutes();                                                                                             // 8364\n  } ], [ d3.time.format(\":%S\"), function(d) {                                                                          // 8365\n    return d.getSeconds();                                                                                             // 8366\n  } ], [ d3.time.format(\".%L\"), function(d) {                                                                          // 8367\n    return d.getMilliseconds();                                                                                        // 8368\n  } ] ];                                                                                                               // 8369\n  var d3_time_scaleLinear = d3.scale.linear(), d3_time_scaleLocalFormat = d3_time_scaleFormat(d3_time_scaleLocalFormats);\n  d3_time_scaleLocalMethods.year = function(extent, m) {                                                               // 8371\n    return d3_time_scaleLinear.domain(extent.map(d3_time_scaleGetYear)).ticks(m).map(d3_time_scaleSetYear);            // 8372\n  };                                                                                                                   // 8373\n  d3.time.scale = function() {                                                                                         // 8374\n    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);                      // 8375\n  };                                                                                                                   // 8376\n  var d3_time_scaleUTCMethods = d3_time_scaleLocalMethods.map(function(m) {                                            // 8377\n    return [ m[0].utc, m[1] ];                                                                                         // 8378\n  });                                                                                                                  // 8379\n  var d3_time_scaleUTCFormats = [ [ d3.time.format.utc(\"%Y\"), d3_true ], [ d3.time.format.utc(\"%B\"), function(d) {     // 8380\n    return d.getUTCMonth();                                                                                            // 8381\n  } ], [ d3.time.format.utc(\"%b %d\"), function(d) {                                                                    // 8382\n    return d.getUTCDate() != 1;                                                                                        // 8383\n  } ], [ d3.time.format.utc(\"%a %d\"), function(d) {                                                                    // 8384\n    return d.getUTCDay() && d.getUTCDate() != 1;                                                                       // 8385\n  } ], [ d3.time.format.utc(\"%I %p\"), function(d) {                                                                    // 8386\n    return d.getUTCHours();                                                                                            // 8387\n  } ], [ d3.time.format.utc(\"%I:%M\"), function(d) {                                                                    // 8388\n    return d.getUTCMinutes();                                                                                          // 8389\n  } ], [ d3.time.format.utc(\":%S\"), function(d) {                                                                      // 8390\n    return d.getUTCSeconds();                                                                                          // 8391\n  } ], [ d3.time.format.utc(\".%L\"), function(d) {                                                                      // 8392\n    return d.getUTCMilliseconds();                                                                                     // 8393\n  } ] ];                                                                                                               // 8394\n  var d3_time_scaleUTCFormat = d3_time_scaleFormat(d3_time_scaleUTCFormats);                                           // 8395\n  function d3_time_scaleUTCSetYear(y) {                                                                                // 8396\n    var d = new Date(Date.UTC(y, 0, 1));                                                                               // 8397\n    d.setUTCFullYear(y);                                                                                               // 8398\n    return d;                                                                                                          // 8399\n  }                                                                                                                    // 8400\n  function d3_time_scaleUTCGetYear(d) {                                                                                // 8401\n    var y = d.getUTCFullYear(), d0 = d3_time_scaleUTCSetYear(y), d1 = d3_time_scaleUTCSetYear(y + 1);                  // 8402\n    return y + (d - d0) / (d1 - d0);                                                                                   // 8403\n  }                                                                                                                    // 8404\n  d3_time_scaleUTCMethods.year = function(extent, m) {                                                                 // 8405\n    return d3_time_scaleLinear.domain(extent.map(d3_time_scaleUTCGetYear)).ticks(m).map(d3_time_scaleUTCSetYear);      // 8406\n  };                                                                                                                   // 8407\n  d3.time.scale.utc = function() {                                                                                     // 8408\n    return d3_time_scale(d3.scale.linear(), d3_time_scaleUTCMethods, d3_time_scaleUTCFormat);                          // 8409\n  };                                                                                                                   // 8410\n  d3.text = function() {                                                                                               // 8411\n    return d3.xhr.apply(d3, arguments).response(d3_text);                                                              // 8412\n  };                                                                                                                   // 8413\n  function d3_text(request) {                                                                                          // 8414\n    return request.responseText;                                                                                       // 8415\n  }                                                                                                                    // 8416\n  d3.json = function(url, callback) {                                                                                  // 8417\n    return d3.xhr(url, \"application/json\", callback).response(d3_json);                                                // 8418\n  };                                                                                                                   // 8419\n  function d3_json(request) {                                                                                          // 8420\n    return JSON.parse(request.responseText);                                                                           // 8421\n  }                                                                                                                    // 8422\n  d3.html = function(url, callback) {                                                                                  // 8423\n    return d3.xhr(url, \"text/html\", callback).response(d3_html);                                                       // 8424\n  };                                                                                                                   // 8425\n  function d3_html(request) {                                                                                          // 8426\n    var range = d3_document.createRange();                                                                             // 8427\n    range.selectNode(d3_document.body);                                                                                // 8428\n    return range.createContextualFragment(request.responseText);                                                       // 8429\n  }                                                                                                                    // 8430\n  d3.xml = function() {                                                                                                // 8431\n    return d3.xhr.apply(d3, arguments).response(d3_xml);                                                               // 8432\n  };                                                                                                                   // 8433\n  function d3_xml(request) {                                                                                           // 8434\n    return request.responseXML;                                                                                        // 8435\n  }                                                                                                                    // 8436\n  return d3;                                                                                                           // 8437\n}();                                                                                                                   // 8438\n                                                                                                                       // 8439\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.d3 = {}, {\n  d3: d3\n});\n\n})();\n","servePath":"/packages/d3.js"}]